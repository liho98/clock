Microsoft (R) Macro Assembler Version 5.00                  11/25/19 00:37:54
                                                             Page     1-1


				.model small 
				.8086 
				.8087 
				.386 
				.387 
				 
				include	/8086/data.asm 
 0000                        C	.data 
 0000  53 4D 44 20 43 6C 6F  C	clock_title db "SMD Clock","$" 
       63 6B 24              C	
 000A  53 68 6F 77 20 43 6C  C	show_clock_str db "Show Clock","$" 
       6F 63 6B 24           C	
 0015  53 65 74 20 41 6C 61  C	set_alarm_str db "Set Alarm","$" 
       72 6D 24              C	
 001F  54 69 6D 65 72 24     C	timer_str db "Timer","$" 
 0025  53 74 6F 70 77 61 74  C	stopwatch_str db "Stopwatch","$" 
       63 68 24              C	
 002F  20 20 53 74 61 72 74  C	start_vga_str db "  Start ","$" 
       20 24                 C	
 0038  20 20 53 74 6F 70 20  C	stop_vga_str db "  Stop  ","$" 
       20 24                 C	
 0041  20 52 65 73 65 74 20  C	reset_vga_str db " Reset ","$" 
       24                    C	
 0049  4C 65 61 76 65 24     C	quit_str db "Leave","$" 
 004F  42 61 63 6B 24        C	back_str db "Back","$" 
 0054  20 20 20 20 42 61 63  C	back_vga_str db "    Back    ","$" 
       6B 20 20 20 20 24     C	
 0061  57 61 69 74 69 6E 67  C	wait_respond_str db "Waiting for mouse respond 
				. . .","$" 
       20 66 6F 72 20 6D 6F  C	
       75 73 65 20 72 65 73  C	
       70 6F 6E 64 20 2E 20  C	
       2E 20 2E 24           C	
 0081  20 20 20 20 20 20 57  C	wait_respond_vga_str db "      Waiting for mous
				e respond . . .   ","$" 
       61 69 74 69 6E 67 20  C	
       66 6F 72 20 6D 6F 75  C	
       73 65 20 72 65 73 70  C	
       6F 6E 64 20 2E 20 2E  C	
       20 2E 20 20 20 24     C	
			     C	 
 00AA                        C	arr label byte 
 00AA  14                    C	max_length db 20 
 00AB  ??                    C	act_length db ? 
 00AC  0014[                 C	input db 20 dup("$") 
	   24                C	
			 ]   C	
			     C	
			     C	 
 00C0  0A                    C	ten db 10 
 00C1  ??                    C	quotient db ? 
 00C2  ??                    C	remainder db ? 
			     C	 
 00C3  ????                  C	mouse_row dw ? 
Microsoft (R) Macro Assembler Version 5.00                  11/25/19 00:37:54
                                                             Page     1-2


 00C5  ????                  C	mouse_col dw ? 
			     C	 
 00C7  41 6E 61 6C 6F 67 24  C	analog_str db  "Analog","$" 
 00CE  44 69 67 69 74 61 6C  C	digital_str db "Digital","$" 
       24                    C	
			     C	 
 00D6  00                    C	is_show_clock db 0b 
 00D7  00                    C	is_analog db 0b 
 00D8  00                    C	is_digital db 0b 
			     C	 
 00D9  00                    C	is_set_alarm db 0b 
 00DA  00                    C	is_timer db 0b 
 00DB  00                    C	is_stopwatch db 0b 
 00DC  00                    C	is_exit db 0b 
			     C	 
			     C	; for clock 
 00DD  0000                  C	start_row dw 0 
 00DF  0000                  C	start_col dw 0 
			     C	 
 00E1  00                    C	color db 0 
 00E2  3F                    C	option_color db 3fh 
 00E3  0E                    C	clock_color db 0eh 
			     C	 
 00E4  0000                  C	row_1 dw 0 
 00E6  0000                  C	row_2 dw 0 
 00E8  0000                  C	row_3 dw 0 
 00EA  0000                  C	col_1 dw 0 
 00EC  0000                  C	col_2 dw 0 
 00EE  0000                  C	col_3 dw 0 
			     C	 
 00F0  30 30 3A 30 30 3A 30  C	time_buf db "00:00:00$"		;time buffer hr
				:min:sec, "ahal:ahal:ahal" al = first digit, ah
				 = second digit 
       30 24                 C	
 00F9  30 30 2F 30 30 2F 30  C	date_buf db "00/00/0000$"		 
       30 30 30 24           C	
 0104  30 30 3A 30 30 24     C	alarm_buf db "00:00$" 
 010A  30 30 3A 30 30 3A 30  C	timer_buf db "00:00:00$" 
       30 24                 C	
			     C	 
 0113  ??                    C	day db ? 
 0114  0A 0D 4D 6F 6E 64 61  C	mon db 10,13,"Monday","$" 
       79 24                 C	
 011D  0A 0D 54 75 65 73 64  C	tue db 10,13,"Tuesday","$" 
       61 79 24              C	
 0127  0A 0D 57 65 64 6E 65  C	wed db 10,13,"Wednesday","$" 
       73 64 61 79 24        C	
 0133  0A 0D 54 68 75 72 73  C	thu db 10,13,"Thursday","$" 
       64 61 79 24           C	
 013E  0A 0D 46 72 69 64 61  C	fri db 10,13,"Friday","$" 
       79 24                 C	
 0147  0A 0D 53 61 74 75 72  C	sat db 10,13,"Saturday","$" 
       64 61 79 24           C	
 0152  0A 0D 53 75 6E 64 61  C	sun db 10,13,"Sunday","$" 
Microsoft (R) Macro Assembler Version 5.00                  11/25/19 00:37:54
                                                             Page     1-3


       79 24                 C	
			     C	 
 015B  00                    C	is_24 db 0 
			     C	 
 015C  ???? ????             C	old_vector dw ?, ? 
 0160  ???? ????             C	new_vector dw ?, ? 
			     C	 
 0164  53 65 74 20 74 68 65  C	input_alarm_str db "Set the alarm with the time
				 in format (hh:mm) : ","$" 
       20 61 6C 61 72 6D 20  C	
       77 69 74 68 20 74 68  C	
       65 20 74 69 6D 65 20  C	
       69 6E 20 66 6F 72 6D  C	
       61 74 20 28 68 68 3A  C	
       6D 6D 29 20 3A 20 24  C	
 0195  41 6C 61 72 6D 20 69  C	alarm_ok_str db "Alarm is set successfully$" 
       73 20 73 65 74 20 73  C	
       75 63 63 65 73 73 66  C	
       75 6C 6C 79 24        C	
 01AF  41 6C 61 72 6D 20 69  C	alarm_fail_str db "Alarm is set unsuccessfully$
				" 
       73 20 73 65 74 20 75  C	
       6E 73 75 63 63 65 73  C	
       73 66 75 6C 6C 79 24  C	
 01CB  41 6C 61 72 6D 20 69  C	alarm_cancel_ok_str db "Alarm is cancel success
				fully$" 
       73 20 63 61 6E 63 65  C	
       6C 20 73 75 63 63 65  C	
       73 73 66 75 6C 6C 79  C	
       24                    C	
 01E8  41 6C 61 72 6D 20 69  C	alarm_on_str db "Alarm is set at the time : $" 
       73 20 73 65 74 20 61  C	
       74 20 74 68 65 20 74  C	
       69 6D 65 20 3A 20 24  C	
 0204  43 61 6E 63 65 6C 20  C	alarm_cancel_str db "Cancel alarm please enter 
				'-'$" 
       61 6C 61 72 6D 20 70  C	
       6C 65 61 73 65 20 65  C	
       6E 74 65 72 20 27 2D  C	
       27 24                 C	
 0222  41 6C 61 72 6D 20 69  C	alarm_off_str db "Alarm is not set yet. $" 
       73 20 6E 6F 74 20 73  C	
       65 74 20 79 65 74 2E  C	
       20 24                 C	
 0239  ??                    C	alarm_hh db ? 
 023A  ??                    C	alarm_mm db ? 
 023B  00                    C	is_alarm_set db 0b		;false 
 023C  00                    C	invoker_alarm db 0b 
			     C	 
 023D  ??                    C	timer_hh db ? 
 023E  ??                    C	timer_mm db ? 
 023F  ??                    C	timer_ss db ? 
 0240  54 69 6D 65 72 20 63  C	timer_set_str db "Timer countdown from ","$" 
       6F 75 6E 74 64 6F 77  C	
Microsoft (R) Macro Assembler Version 5.00                  11/25/19 00:37:54
                                                             Page     1-4


       6E 20 66 72 6F 6D 20  C	
       24                    C	
 0256  53 65 74 20 74 68 65  C	input_timer_str db "Set the timer with the time
				 in format (hh:mm:ss) : ","$" 
       20 74 69 6D 65 72 20  C	
       77 69 74 68 20 74 68  C	
       65 20 74 69 6D 65 20  C	
       69 6E 20 66 6F 72 6D  C	
       61 74 20 28 68 68 3A  C	
       6D 6D 3A 73 73 29 20  C	
       3A 20 24              C	
 028A  54 69 6D 65 72 20 69  C	timer_ok_str db "Timer is set successfully$" 
       73 20 73 65 74 20 73  C	
       75 63 63 65 73 73 66  C	
       75 6C 6C 79 24        C	
 02A4  54 69 6D 65 72 20 69  C	timer_fail_str db "Timer is set unsuccessfully$
				" 
       73 20 73 65 74 20 75  C	
       6E 73 75 63 63 65 73  C	
       73 66 75 6C 6C 79 24  C	
 02C0  20 20 20 20 45 64 69  C	edit_vga_str db "    Edit    ","$" 
       74 20 20 20 20 24     C	
 02CD  00                    C	is_edit db 0b 
 02CE  00                    C	is_timer_exit db 0b 
 02CF  00                    C	simulate_timer_hh db 0 
 02D0  00                    C	simulate_timer_mm db 0 
 02D1  00                    C	simulate_timer_ss db 0 
 02D2  00                    C	first_timer_sec db 0b 
 02D3  00                    C	invoke_timer_alarm db 0b 
			     C	 
 02D4  ??                    C	temp_sec db ? 
			     C	 
 02D5  00                    C	simulate_minute db 0 
 02D6  00                    C	simulate_sec db 0 
 02D7  00                    C	simulate_milisec db 0 
 02D8  01                    C	first_sec db 1b 
 02D9  00                    C	is_sec_pass db 0b 
			     C	 
 02DA  00                    C	is_start db 0b 
 02DB  00                    C	is_reset db 0b 
			     C	 
 02DC  00                    C	is_timer_start db 0b 
 02DD  00                    C	is_timer_reset db 0b 
			     C	 
			     C	 
			     C	;analog data	 
 02DE  ??                    C	temp_sec_ana db ? 
 02DF  00                    C	is_sec_pass_ana db 0b 
			     C	 
 02E0  00                    C	analog_ss db 0 
 02E1  00                    C	analog_mm db 0 
 02E2  00                    C	analog_hh db 0 
 02E3  0000                  C	inner_analog_hh dw 0 
 02E5  0000                  C	hour_in_60 dw 0 
Microsoft (R) Macro Assembler Version 5.00                  11/25/19 00:37:54
                                                             Page     1-5


			     C	 
 02E7  03                    C	sec_hand_color db 3 
 02E8  07                    C	min_hand_color db 7 
 02E9  0A                    C	hour_hand_color db 10 
 02EA  59000000              C	min_hand_start_deg dd 89 
			     C	 
 02EE  00000000              C	radius dd 0 
 02F2  00000000              C	adjust_x dd 0 
 02F6  00000000              C	adjust_y dd 0 
 02FA  00000000              C	x dd 0 
 02FE  00000000              C	y dd 0 
			     C		 
 0302  00003443              C	deg_180 dd 180.0	 
			     C	 
 0306  0000B442              C	theta dd 90.0 
 030A  0AD7233C              C	deg_step dd 0.01 
 030E  0000F041              C	hr_deg_step dd 30.0 
 0312  0000C040              C	sec_deg_step dd 6.0 
			     C	 
 0316  CDCCCC3D              C	min_hand_step dd 0.1 
			     C	;analog end data 
				 
				include	/8086/util.asm 
 0000                        C	.code 
			     C	;lea dx,(data) for display 
 0000                        C	print proc 
 0000  B4 09                 C		mov ah,09h 
 0002  CD 21                 C		int 21h 
 0004  C3                    C		ret 
 0005                        C	print endp 
			     C	 
			     C	;store input as input 
 0005                        C	scan proc 
 0005  B4 0A                 C		mov ah,0ah 
 0007  CD 21                 C		int 21h 
 0009  C3                    C		ret 
 000A                        C	scan endp 
			     C	 
			     C	;clear screen for cyan color 
 000A                        C	clr_src proc 
			     C	 
 000A  B8 0600               C		mov ax,0600h 
 000D  B7 7F                 C		mov bh,7fh 
 000F  B9 0000               C		mov cx,0000h 
 0012  BA 184F               C		mov dx,184fh 
 0015  CD 10                 C		int 10h 
			     C		  
 0017  B6 00                 C		mov dh,0		;set row 
 0019  B2 19                 C		mov dl,25		;set column 
 001B  E8 001F R             C		call res_cur 
			     C		  
 001E  C3                    C		ret 
 001F                        C	clr_src endp 
			     C	 
Microsoft (R) Macro Assembler Version 5.00                  11/25/19 00:37:54
                                                             Page     1-6


			     C	;INT 10 - AH = 02h VIDEO - SET CURSOR POSITION 
 001F                        C	res_cur proc 
			     C		;dh = row,dl = column 
 001F  B7 00                 C		mov bh,0 
 0021  B4 02                 C		mov ah,02h 
 0023  CD 10                 C		int 10h 
 0025  C3                    C		ret 
 0026                        C	res_cur endp 
			     C	 
			     C	 
				 
				include	/8086/math.asm 
 0026                        C	.code 
			     C	 
			     C	;In dl out dl  
 0026                        C	bcd2dec proc 
 0026  B4 00                 C		mov ah,0 
 0028  8A C2                 C		mov al,dl 
 002A  C0 E8 04              C		shr al,4 
			     C	 
 002D  B1 0A                 C		mov cl,10 
 002F  F6 E1                 C		mul cl 
 0031  8A C8                 C		mov cl,al 
 0033  8A C2                 C		mov al,dl 
 0035  C0 E0 04              C		shl al,4 
 0038  C0 E8 04              C		shr al,4	 
			     C	 
 003B  02 C1                 C		add al,cl 
 003D  8A D0                 C		mov dl,al 
 003F  C3                    C		ret 
 0040                        C	bcd2dec endp   
			     C	 
			     C	;Input theta radius adjust_x and adjust_y out x
				,y 
			     C	;x = r - r cosθ + adjust_x, y = r -r sinθ + a
				djust_y		 
 0040                        C	circle_func proc 
 0040  D8 36 0302 R          C		fdiv deg_180		;convert degree
				 to radian 
			     C	 
 0044  D9 EB                 C		fldpi				;load p
				i=3.142 
			     C			 
 0046  DE C9                 C		fmul 				;floati
				ng point multiplication 
			     C			 
 0048  D9 FB                 C		fsincos				;st(0)=
				cos, st(1)=sin 
			     C		 
 004A  DA 0E 02EE R          C		fimul radius		;integer and fl
				oating point multiplication 
 004E  D9 E0                 C		fchs				;st(0) 
				= -st(0) 
			     C	 
Microsoft (R) Macro Assembler Version 5.00                  11/25/19 00:37:54
                                                             Page     1-7


 0050  DA 06 02F2 R          C		fiadd adjust_x		;integer and fl
				oating point addition 
			     C	 
 0054  DA 06 02EE R          C		fiadd radius	 
			     C		 
 0058  DB 1E 02FA R          C		fistp x				;x=st(0
				), and pop st(0) 
			     C		 
 005C  DA 0E 02EE R          C		fimul radius 
 0060  D9 E0                 C		fchs		 
			     C	 
 0062  DA 06 02F6 R          C		fiadd adjust_y 
			     C	 
 0066  DA 06 02EE R          C		fiadd radius	 
			     C		 
 006A  DB 16 02FE R          C		fist y 
			     C		 
 006E  C3                    C		ret 
 006F                        C	circle_func endp 
			     C	 
				 
				include	/8086/d_clock.asm 
			     C	;macro is like a function that can accept input
				 parameter and process the code in main functio
				n 
			     C	;row_drawer is a macro that use to draw the hor
				izontal line in the vga mode of dosbox 
			     C	row_drawer macro row, start_col, end_col, color
				  
			     C		local con_col 
			     C		 
			     C		mov	ah,0ch			
					;draw pixel 
			     C		mov	bh,0			
					;page 
			     C		mov	al,color		
					;color 
			     C		mov cx,start_col		;column
				 
			     C		mov	dx,row			
					;row 
			     C		 
			     C		con_col : 	 
			     C		 
			     C			int	10h		
						;draw  
			     C			inc cx 
			     C			cmp cx, end_col 
			     C			jle con_col 
			     C			 
			     C	endm 
			     C	 
			     C	;col_drawer is a macro that use to draw the hor
				izontal line in the vga mode of dosbox 
Microsoft (R) Macro Assembler Version 5.00                  11/25/19 00:37:54
                                                             Page     1-8


			     C	col_drawer macro column, start_row, end_row, co
				lor  
			     C		local con_row 
			     C		 
			     C		mov	ah,0ch			
					;draw pixel 
			     C		mov	bh,0			
					;page 
			     C		mov	al,color		
					;color 
			     C		mov cx,column			;column
				 
			     C		mov	dx,start_row		;row 
			     C		 
			     C		con_row : 	 
			     C		 
			     C			int	10h		
						;draw  
			     C			inc dx 
			     C			cmp dx, end_row 
			     C			jle con_row 
			     C			 
			     C	endm 
 006F                        C	.code 
 006F                        C	reset_print	proc 
			     C		;row 
 006F  A1 00DD R             C		mov	ax,start_row 
 0072  C7 06 00E4 R 0000     C		mov	row_1,0 
 0078  01 06 00E4 R          C		add	row_1,ax 
 007C  C7 06 00E6 R 0019     C		mov	row_2,25 
 0082  01 06 00E6 R          C		add	row_2,ax 
 0086  C7 06 00E8 R 0032     C		mov	row_3,50 
 008C  01 06 00E8 R          C		add	row_3,ax 
			     C		 
			     C		;column	 
 0090  A1 00DF R             C		mov	ax,start_col 
 0093  C7 06 00EA R 0000     C		mov	col_1,0 
 0099  01 06 00EA R          C		add	col_1,ax 
 009D  C7 06 00EC R 0014     C		mov	col_2,20 
 00A3  01 06 00EC R          C		add	col_2,ax 
			     C	 
			     C		row_drawer	row_1,col_1,col_2,clock
				_color 
 00A7  B4 0C                 C1		mov	ah,0ch			
					;draw pixel 
 00A9  B7 00                 C1		mov	bh,0			
					;page 
 00AB  A0 00E3 R             C1		mov	al,clock_color		
					;color 
 00AE  8B 0E 00EA R          C1		mov cx,col_1		;column 
 00B2  8B 16 00E4 R          C1		mov	dx,row_1		
						;row 
 00B6                        C1		??0000 : 
 00B6  CD 10                 C1			int	10h		
Microsoft (R) Macro Assembler Version 5.00                  11/25/19 00:37:54
                                                             Page     1-9


						;draw 
 00B8  41                    C1			inc cx 
 00B9  3B 0E 00EC R          C1			cmp cx, col_2 
 00BD  7E F7                 C1			jle ??0000 
			     C		row_drawer	row_2,col_1,col_2,clock
				_color 
 00BF  B4 0C                 C1		mov	ah,0ch			
					;draw pixel 
 00C1  B7 00                 C1		mov	bh,0			
					;page 
 00C3  A0 00E3 R             C1		mov	al,clock_color		
					;color 
 00C6  8B 0E 00EA R          C1		mov cx,col_1		;column 
 00CA  8B 16 00E6 R          C1		mov	dx,row_2		
						;row 
 00CE                        C1		??0001 : 
 00CE  CD 10                 C1			int	10h		
						;draw 
 00D0  41                    C1			inc cx 
 00D1  3B 0E 00EC R          C1			cmp cx, col_2 
 00D5  7E F7                 C1			jle ??0001 
			     C		row_drawer	row_3,col_1,col_2,clock
				_color 
 00D7  B4 0C                 C1		mov	ah,0ch			
					;draw pixel 
 00D9  B7 00                 C1		mov	bh,0			
					;page 
 00DB  A0 00E3 R             C1		mov	al,clock_color		
					;color 
 00DE  8B 0E 00EA R          C1		mov cx,col_1		;column 
 00E2  8B 16 00E8 R          C1		mov	dx,row_3		
						;row 
 00E6                        C1		??0002 : 
 00E6  CD 10                 C1			int	10h		
						;draw 
 00E8  41                    C1			inc cx 
 00E9  3B 0E 00EC R          C1			cmp cx, col_2 
 00ED  7E F7                 C1			jle ??0002 
			     C		col_drawer	col_1,row_1,row_3,clock
				_color 
 00EF  B4 0C                 C1		mov	ah,0ch			
					;draw pixel 
 00F1  B7 00                 C1		mov	bh,0			
					;page 
 00F3  A0 00E3 R             C1		mov	al,clock_color		
					;color 
 00F6  8B 0E 00EA R          C1		mov cx,col_1			;column
				 
 00FA  8B 16 00E4 R          C1		mov	dx,row_1		;row 
 00FE                        C1		??0003 : 
 00FE  CD 10                 C1			int	10h		
						;draw 
 0100  42                    C1			inc dx 
 0101  3B 16 00E8 R          C1			cmp dx, row_3 
Microsoft (R) Macro Assembler Version 5.00                  11/25/19 00:37:54
                                                             Page     1-10


 0105  7E F7                 C1			jle ??0003 
			     C		col_drawer	col_2,row_1,row_3,clock
				_color 
 0107  B4 0C                 C1		mov	ah,0ch			
					;draw pixel 
 0109  B7 00                 C1		mov	bh,0			
					;page 
 010B  A0 00E3 R             C1		mov	al,clock_color		
					;color 
 010E  8B 0E 00EC R          C1		mov cx,col_2			;column
				 
 0112  8B 16 00E4 R          C1		mov	dx,row_1		;row 
 0116                        C1		??0004 : 
 0116  CD 10                 C1			int	10h		
						;draw 
 0118  42                    C1			inc dx 
 0119  3B 16 00E8 R          C1			cmp dx, row_3 
 011D  7E F7                 C1			jle ??0004 
			     C		 
 011F  83 2E 00EC R 05       C		sub col_2,5 
			     C		col_drawer	col_2,row_1,row_3,clock
				_color 
 0124  B4 0C                 C1		mov	ah,0ch			
					;draw pixel 
 0126  B7 00                 C1		mov	bh,0			
					;page 
 0128  A0 00E3 R             C1		mov	al,clock_color		
					;color 
 012B  8B 0E 00EC R          C1		mov cx,col_2			;column
				 
 012F  8B 16 00E4 R          C1		mov	dx,row_1		;row 
 0133                        C1		??0005 : 
 0133  CD 10                 C1			int	10h		
						;draw 
 0135  42                    C1			inc dx 
 0136  3B 16 00E8 R          C1			cmp dx, row_3 
 013A  7E F7                 C1			jle ??0005 
			     C		 
 013C  C3                    C		ret 
 013D                        C	reset_print	endp 
			     C	 
 013D                        C	print_0 proc 
			     C		;row 
 013D  A1 00DD R             C		mov	ax,start_row 
 0140  C7 06 00E4 R 0000     C		mov row_1,0 
 0146  01 06 00E4 R          C		add	row_1,ax 
 014A  C7 06 00E6 R 0032     C		mov row_2,50 
 0150  01 06 00E6 R          C		add	row_2,ax 
			     C	 
			     C		;column 
 0154  A1 00DF R             C		mov	ax,start_col 
 0157  C7 06 00EA R 0000     C		mov col_1,0 
 015D  01 06 00EA R          C		add	col_1,ax 
 0161  C7 06 00EC R 0014     C		mov col_2,20 
Microsoft (R) Macro Assembler Version 5.00                  11/25/19 00:37:54
                                                             Page     1-11


 0167  01 06 00EC R          C		add	col_2,ax		
					 
			     C				 
			     C		row_drawer 	row_1, col_1, col_2, co
				lor		 
 016B  B4 0C                 C1		mov	ah,0ch			
					;draw pixel 
 016D  B7 00                 C1		mov	bh,0			
					;page 
 016F  A0 00E1 R             C1		mov	al,color		
					;color 
 0172  8B 0E 00EA R          C1		mov cx,col_1		;column 
 0176  8B 16 00E4 R          C1		mov	dx,row_1		
						;row 
 017A                        C1		??0006 : 
 017A  CD 10                 C1			int	10h		
						;draw 
 017C  41                    C1			inc cx 
 017D  3B 0E 00EC R          C1			cmp cx, col_2 
 0181  7E F7                 C1			jle ??0006 
			     C		row_drawer 	row_2, col_1, col_2, co
				lor	 
 0183  B4 0C                 C1		mov	ah,0ch			
					;draw pixel 
 0185  B7 00                 C1		mov	bh,0			
					;page 
 0187  A0 00E1 R             C1		mov	al,color		
					;color 
 018A  8B 0E 00EA R          C1		mov cx,col_1		;column 
 018E  8B 16 00E6 R          C1		mov	dx,row_2		
						;row 
 0192                        C1		??0007 : 
 0192  CD 10                 C1			int	10h		
						;draw 
 0194  41                    C1			inc cx 
 0195  3B 0E 00EC R          C1			cmp cx, col_2 
 0199  7E F7                 C1			jle ??0007 
			     C	 
			     C		col_drawer 	col_1, row_1, row_2, co
				lor		 
 019B  B4 0C                 C1		mov	ah,0ch			
					;draw pixel 
 019D  B7 00                 C1		mov	bh,0			
					;page 
 019F  A0 00E1 R             C1		mov	al,color		
					;color 
 01A2  8B 0E 00EA R          C1		mov cx,col_1			;column
				 
 01A6  8B 16 00E4 R          C1		mov	dx,row_1		;row 
 01AA                        C1		??0008 : 
 01AA  CD 10                 C1			int	10h		
						;draw 
 01AC  42                    C1			inc dx 
 01AD  3B 16 00E6 R          C1			cmp dx, row_2 
Microsoft (R) Macro Assembler Version 5.00                  11/25/19 00:37:54
                                                             Page     1-12


 01B1  7E F7                 C1			jle ??0008 
			     C		col_drawer 	col_2, row_1, row_2, co
				lor	 
 01B3  B4 0C                 C1		mov	ah,0ch			
					;draw pixel 
 01B5  B7 00                 C1		mov	bh,0			
					;page 
 01B7  A0 00E1 R             C1		mov	al,color		
					;color 
 01BA  8B 0E 00EC R          C1		mov cx,col_2			;column
				 
 01BE  8B 16 00E4 R          C1		mov	dx,row_1		;row 
 01C2                        C1		??0009 : 
 01C2  CD 10                 C1			int	10h		
						;draw 
 01C4  42                    C1			inc dx 
 01C5  3B 16 00E6 R          C1			cmp dx, row_2 
 01C9  7E F7                 C1			jle ??0009 
 01CB  C3                    C		ret 
 01CC                        C	print_0 endp 
			     C	 
 01CC                        C	print_1 proc 
			     C		;row 
 01CC  A1 00DD R             C		mov	ax,start_row 
 01CF  C7 06 00E4 R 0000     C		mov row_1,0 
 01D5  01 06 00E4 R          C		add	row_1,ax 
 01D9  C7 06 00E6 R 0032     C		mov row_2,50 
 01DF  01 06 00E6 R          C		add	row_2,ax 
			     C	 
			     C		;column 
 01E3  A1 00DF R             C		mov	ax,start_col 
 01E6  C7 06 00EA R 000A     C		mov col_1,10 
 01EC  01 06 00EA R          C		add	col_1,ax 
 01F0  C7 06 00EC R 000F     C		mov col_2,15 
 01F6  01 06 00EC R          C		add	col_2,ax		
					 
			     C				 
			     C		col_drawer 	col_2, row_1, row_2, co
				lor	 
 01FA  B4 0C                 C1		mov	ah,0ch			
					;draw pixel 
 01FC  B7 00                 C1		mov	bh,0			
					;page 
 01FE  A0 00E1 R             C1		mov	al,color		
					;color 
 0201  8B 0E 00EC R          C1		mov cx,col_2			;column
				 
 0205  8B 16 00E4 R          C1		mov	dx,row_1		;row 
 0209                        C1		??000A : 
 0209  CD 10                 C1			int	10h		
						;draw 
 020B  42                    C1			inc dx 
 020C  3B 16 00E6 R          C1			cmp dx, row_2 
 0210  7E F7                 C1			jle ??000A 
Microsoft (R) Macro Assembler Version 5.00                  11/25/19 00:37:54
                                                             Page     1-13


			     C		row_drawer 	row_1, col_1, col_2, co
				lor	 
 0212  B4 0C                 C1		mov	ah,0ch			
					;draw pixel 
 0214  B7 00                 C1		mov	bh,0			
					;page 
 0216  A0 00E1 R             C1		mov	al,color		
					;color 
 0219  8B 0E 00EA R          C1		mov cx,col_1		;column 
 021D  8B 16 00E4 R          C1		mov	dx,row_1		
						;row 
 0221                        C1		??000B : 
 0221  CD 10                 C1			int	10h		
						;draw 
 0223  41                    C1			inc cx 
 0224  3B 0E 00EC R          C1			cmp cx, col_2 
 0228  7E F7                 C1			jle ??000B 
			     C		 
 022A  C3                    C		ret 
 022B                        C	print_1 endp 
			     C	 
 022B                        C	print_2 proc 
			     C		;row 
 022B  A1 00DD R             C		mov	ax,start_row 
 022E  C7 06 00E4 R 0000     C		mov row_1,0 
 0234  01 06 00E4 R          C		add	row_1,ax 
 0238  C7 06 00E6 R 0019     C		mov row_2,25 
 023E  01 06 00E6 R          C		add	row_2,ax 
 0242  C7 06 00E8 R 0032     C		mov row_3,50 
 0248  01 06 00E8 R          C		add	row_3,ax	 
			     C	 
			     C		;column 
 024C  A1 00DF R             C		mov	ax,start_col 
 024F  C7 06 00EA R 0000     C		mov col_1,0 
 0255  01 06 00EA R          C		add	col_1,ax 
 0259  C7 06 00EC R 0014     C		mov col_2,20 
 025F  01 06 00EC R          C		add	col_2,ax		
					 
			     C				 
			     C		row_drawer 	row_1, col_1, col_2, co
				lor			 
 0263  B4 0C                 C1		mov	ah,0ch			
					;draw pixel 
 0265  B7 00                 C1		mov	bh,0			
					;page 
 0267  A0 00E1 R             C1		mov	al,color		
					;color 
 026A  8B 0E 00EA R          C1		mov cx,col_1		;column 
 026E  8B 16 00E4 R          C1		mov	dx,row_1		
						;row 
 0272                        C1		??000C : 
 0272  CD 10                 C1			int	10h		
						;draw 
 0274  41                    C1			inc cx 
Microsoft (R) Macro Assembler Version 5.00                  11/25/19 00:37:54
                                                             Page     1-14


 0275  3B 0E 00EC R          C1			cmp cx, col_2 
 0279  7E F7                 C1			jle ??000C 
			     C		col_drawer 	col_2, row_1, row_2, co
				lor		 
 027B  B4 0C                 C1		mov	ah,0ch			
					;draw pixel 
 027D  B7 00                 C1		mov	bh,0			
					;page 
 027F  A0 00E1 R             C1		mov	al,color		
					;color 
 0282  8B 0E 00EC R          C1		mov cx,col_2			;column
				 
 0286  8B 16 00E4 R          C1		mov	dx,row_1		;row 
 028A                        C1		??000D : 
 028A  CD 10                 C1			int	10h		
						;draw 
 028C  42                    C1			inc dx 
 028D  3B 16 00E6 R          C1			cmp dx, row_2 
 0291  7E F7                 C1			jle ??000D 
			     C		row_drawer 	row_2, col_1, col_2, co
				lor 
 0293  B4 0C                 C1		mov	ah,0ch			
					;draw pixel 
 0295  B7 00                 C1		mov	bh,0			
					;page 
 0297  A0 00E1 R             C1		mov	al,color		
					;color 
 029A  8B 0E 00EA R          C1		mov cx,col_1		;column 
 029E  8B 16 00E6 R          C1		mov	dx,row_2		
						;row 
 02A2                        C1		??000E : 
 02A2  CD 10                 C1			int	10h		
						;draw 
 02A4  41                    C1			inc cx 
 02A5  3B 0E 00EC R          C1			cmp cx, col_2 
 02A9  7E F7                 C1			jle ??000E 
			     C		col_drawer 	col_1, row_2, row_3, co
				lor	 
 02AB  B4 0C                 C1		mov	ah,0ch			
					;draw pixel 
 02AD  B7 00                 C1		mov	bh,0			
					;page 
 02AF  A0 00E1 R             C1		mov	al,color		
					;color 
 02B2  8B 0E 00EA R          C1		mov cx,col_1			;column
				 
 02B6  8B 16 00E6 R          C1		mov	dx,row_2		;row 
 02BA                        C1		??000F : 
 02BA  CD 10                 C1			int	10h		
						;draw 
 02BC  42                    C1			inc dx 
 02BD  3B 16 00E8 R          C1			cmp dx, row_3 
 02C1  7E F7                 C1			jle ??000F 
			     C		row_drawer 	row_3, col_1, col_2, co
Microsoft (R) Macro Assembler Version 5.00                  11/25/19 00:37:54
                                                             Page     1-15


				lor 
 02C3  B4 0C                 C1		mov	ah,0ch			
					;draw pixel 
 02C5  B7 00                 C1		mov	bh,0			
					;page 
 02C7  A0 00E1 R             C1		mov	al,color		
					;color 
 02CA  8B 0E 00EA R          C1		mov cx,col_1		;column 
 02CE  8B 16 00E8 R          C1		mov	dx,row_3		
						;row 
 02D2                        C1		??0010 : 
 02D2  CD 10                 C1			int	10h		
						;draw 
 02D4  41                    C1			inc cx 
 02D5  3B 0E 00EC R          C1			cmp cx, col_2 
 02D9  7E F7                 C1			jle ??0010 
			     C	 
 02DB  C3                    C		ret 
 02DC                        C	print_2 endp 
			     C	 
 02DC                        C	print_3 proc 
			     C		;row 
 02DC  A1 00DD R             C		mov	ax,start_row 
 02DF  C7 06 00E4 R 0000     C		mov row_1,0 
 02E5  01 06 00E4 R          C		add	row_1,ax 
 02E9  C7 06 00E6 R 0019     C		mov row_2,25 
 02EF  01 06 00E6 R          C		add	row_2,ax 
 02F3  C7 06 00E8 R 0032     C		mov row_3,50 
 02F9  01 06 00E8 R          C		add	row_3,ax	 
			     C	 
			     C		;column 
 02FD  A1 00DF R             C		mov	ax,start_col 
 0300  C7 06 00EA R 0000     C		mov col_1,0 
 0306  01 06 00EA R          C		add	col_1,ax 
 030A  C7 06 00EC R 0014     C		mov col_2,20 
 0310  01 06 00EC R          C		add	col_2,ax		
					 
			     C				 
			     C		row_drawer 	row_1, col_1, col_2, co
				lor			 
 0314  B4 0C                 C1		mov	ah,0ch			
					;draw pixel 
 0316  B7 00                 C1		mov	bh,0			
					;page 
 0318  A0 00E1 R             C1		mov	al,color		
					;color 
 031B  8B 0E 00EA R          C1		mov cx,col_1		;column 
 031F  8B 16 00E4 R          C1		mov	dx,row_1		
						;row 
 0323                        C1		??0011 : 
 0323  CD 10                 C1			int	10h		
						;draw 
 0325  41                    C1			inc cx 
 0326  3B 0E 00EC R          C1			cmp cx, col_2 
Microsoft (R) Macro Assembler Version 5.00                  11/25/19 00:37:54
                                                             Page     1-16


 032A  7E F7                 C1			jle ??0011 
			     C		row_drawer 	row_2, col_1, col_2, co
				lor 
 032C  B4 0C                 C1		mov	ah,0ch			
					;draw pixel 
 032E  B7 00                 C1		mov	bh,0			
					;page 
 0330  A0 00E1 R             C1		mov	al,color		
					;color 
 0333  8B 0E 00EA R          C1		mov cx,col_1		;column 
 0337  8B 16 00E6 R          C1		mov	dx,row_2		
						;row 
 033B                        C1		??0012 : 
 033B  CD 10                 C1			int	10h		
						;draw 
 033D  41                    C1			inc cx 
 033E  3B 0E 00EC R          C1			cmp cx, col_2 
 0342  7E F7                 C1			jle ??0012 
			     C		row_drawer 	row_3, col_1, col_2, co
				lor 
 0344  B4 0C                 C1		mov	ah,0ch			
					;draw pixel 
 0346  B7 00                 C1		mov	bh,0			
					;page 
 0348  A0 00E1 R             C1		mov	al,color		
					;color 
 034B  8B 0E 00EA R          C1		mov cx,col_1		;column 
 034F  8B 16 00E8 R          C1		mov	dx,row_3		
						;row 
 0353                        C1		??0013 : 
 0353  CD 10                 C1			int	10h		
						;draw 
 0355  41                    C1			inc cx 
 0356  3B 0E 00EC R          C1			cmp cx, col_2 
 035A  7E F7                 C1			jle ??0013 
			     C		col_drawer 	col_2, row_1, row_3, co
				lor		 
 035C  B4 0C                 C1		mov	ah,0ch			
					;draw pixel 
 035E  B7 00                 C1		mov	bh,0			
					;page 
 0360  A0 00E1 R             C1		mov	al,color		
					;color 
 0363  8B 0E 00EC R          C1		mov cx,col_2			;column
				 
 0367  8B 16 00E4 R          C1		mov	dx,row_1		;row 
 036B                        C1		??0014 : 
 036B  CD 10                 C1			int	10h		
						;draw 
 036D  42                    C1			inc dx 
 036E  3B 16 00E8 R          C1			cmp dx, row_3 
 0372  7E F7                 C1			jle ??0014 
			     C	 
 0374  C3                    C		ret 
Microsoft (R) Macro Assembler Version 5.00                  11/25/19 00:37:54
                                                             Page     1-17


 0375                        C	print_3 endp 
			     C	 
 0375                        C	print_4 proc 
			     C		;row 
 0375  A1 00DD R             C		mov	ax,start_row 
 0378  C7 06 00E4 R 0000     C		mov row_1,0 
 037E  01 06 00E4 R          C		add	row_1,ax 
 0382  C7 06 00E6 R 0019     C		mov row_2,25 
 0388  01 06 00E6 R          C		add	row_2,ax 
 038C  C7 06 00E8 R 0032     C		mov row_3,50 
 0392  01 06 00E8 R          C		add	row_3,ax	 
			     C	 
			     C		;column 
 0396  A1 00DF R             C		mov	ax,start_col 
 0399  C7 06 00EA R 0000     C		mov col_1,0 
 039F  01 06 00EA R          C		add	col_1,ax 
 03A3  C7 06 00EC R 0014     C		mov col_2,20 
 03A9  01 06 00EC R          C		add	col_2,ax	 
			     C	 
			     C						 
			     C		col_drawer 	col_1, row_1, row_2, co
				lor		 
 03AD  B4 0C                 C1		mov	ah,0ch			
					;draw pixel 
 03AF  B7 00                 C1		mov	bh,0			
					;page 
 03B1  A0 00E1 R             C1		mov	al,color		
					;color 
 03B4  8B 0E 00EA R          C1		mov cx,col_1			;column
				 
 03B8  8B 16 00E4 R          C1		mov	dx,row_1		;row 
 03BC                        C1		??0015 : 
 03BC  CD 10                 C1			int	10h		
						;draw 
 03BE  42                    C1			inc dx 
 03BF  3B 16 00E6 R          C1			cmp dx, row_2 
 03C3  7E F7                 C1			jle ??0015 
 03C5  83 2E 00E6 R 19       C		sub row_2,25 
			     C		col_drawer 	col_2, row_2, row_3, co
				lor	 
 03CA  B4 0C                 C1		mov	ah,0ch			
					;draw pixel 
 03CC  B7 00                 C1		mov	bh,0			
					;page 
 03CE  A0 00E1 R             C1		mov	al,color		
					;color 
 03D1  8B 0E 00EC R          C1		mov cx,col_2			;column
				 
 03D5  8B 16 00E6 R          C1		mov	dx,row_2		;row 
 03D9                        C1		??0016 : 
 03D9  CD 10                 C1			int	10h		
						;draw 
 03DB  42                    C1			inc dx 
 03DC  3B 16 00E8 R          C1			cmp dx, row_3 
Microsoft (R) Macro Assembler Version 5.00                  11/25/19 00:37:54
                                                             Page     1-18


 03E0  7E F7                 C1			jle ??0016 
 03E2  83 06 00E6 R 19       C		add row_2,25 
			     C		row_drawer 	row_2, col_1, col_2, co
				lor	 
 03E7  B4 0C                 C1		mov	ah,0ch			
					;draw pixel 
 03E9  B7 00                 C1		mov	bh,0			
					;page 
 03EB  A0 00E1 R             C1		mov	al,color		
					;color 
 03EE  8B 0E 00EA R          C1		mov cx,col_1		;column 
 03F2  8B 16 00E6 R          C1		mov	dx,row_2		
						;row 
 03F6                        C1		??0017 : 
 03F6  CD 10                 C1			int	10h		
						;draw 
 03F8  41                    C1			inc cx 
 03F9  3B 0E 00EC R          C1			cmp cx, col_2 
 03FD  7E F7                 C1			jle ??0017 
			     C		 
 03FF  C3                    C		ret 
 0400                        C	print_4 endp 
			     C	 
 0400                        C	print_5 proc 
			     C		;row 
 0400  A1 00DD R             C		mov	ax,start_row 
 0403  C7 06 00E4 R 0000     C		mov row_1,0 
 0409  01 06 00E4 R          C		add	row_1,ax 
 040D  C7 06 00E6 R 0019     C		mov row_2,25 
 0413  01 06 00E6 R          C		add	row_2,ax 
 0417  C7 06 00E8 R 0032     C		mov row_3,50 
 041D  01 06 00E8 R          C		add	row_3,ax	 
			     C	 
			     C		;column 
 0421  A1 00DF R             C		mov	ax,start_col 
 0424  C7 06 00EA R 0000     C		mov col_1,0 
 042A  01 06 00EA R          C		add	col_1,ax 
 042E  C7 06 00EC R 0014     C		mov col_2,20 
 0434  01 06 00EC R          C		add	col_2,ax		
					 
			     C				 
			     C		row_drawer 	row_1, col_1, col_2, co
				lor			 
 0438  B4 0C                 C1		mov	ah,0ch			
					;draw pixel 
 043A  B7 00                 C1		mov	bh,0			
					;page 
 043C  A0 00E1 R             C1		mov	al,color		
					;color 
 043F  8B 0E 00EA R          C1		mov cx,col_1		;column 
 0443  8B 16 00E4 R          C1		mov	dx,row_1		
						;row 
 0447                        C1		??0018 : 
 0447  CD 10                 C1			int	10h		
Microsoft (R) Macro Assembler Version 5.00                  11/25/19 00:37:54
                                                             Page     1-19


						;draw 
 0449  41                    C1			inc cx 
 044A  3B 0E 00EC R          C1			cmp cx, col_2 
 044E  7E F7                 C1			jle ??0018 
			     C		col_drawer 	col_1, row_1, row_2, co
				lor		 
 0450  B4 0C                 C1		mov	ah,0ch			
					;draw pixel 
 0452  B7 00                 C1		mov	bh,0			
					;page 
 0454  A0 00E1 R             C1		mov	al,color		
					;color 
 0457  8B 0E 00EA R          C1		mov cx,col_1			;column
				 
 045B  8B 16 00E4 R          C1		mov	dx,row_1		;row 
 045F                        C1		??0019 : 
 045F  CD 10                 C1			int	10h		
						;draw 
 0461  42                    C1			inc dx 
 0462  3B 16 00E6 R          C1			cmp dx, row_2 
 0466  7E F7                 C1			jle ??0019 
			     C		row_drawer 	row_2, col_1, col_2, co
				lor 
 0468  B4 0C                 C1		mov	ah,0ch			
					;draw pixel 
 046A  B7 00                 C1		mov	bh,0			
					;page 
 046C  A0 00E1 R             C1		mov	al,color		
					;color 
 046F  8B 0E 00EA R          C1		mov cx,col_1		;column 
 0473  8B 16 00E6 R          C1		mov	dx,row_2		
						;row 
 0477                        C1		??001A : 
 0477  CD 10                 C1			int	10h		
						;draw 
 0479  41                    C1			inc cx 
 047A  3B 0E 00EC R          C1			cmp cx, col_2 
 047E  7E F7                 C1			jle ??001A 
			     C		col_drawer 	col_2, row_2, row_3, co
				lor	 
 0480  B4 0C                 C1		mov	ah,0ch			
					;draw pixel 
 0482  B7 00                 C1		mov	bh,0			
					;page 
 0484  A0 00E1 R             C1		mov	al,color		
					;color 
 0487  8B 0E 00EC R          C1		mov cx,col_2			;column
				 
 048B  8B 16 00E6 R          C1		mov	dx,row_2		;row 
 048F                        C1		??001B : 
 048F  CD 10                 C1			int	10h		
						;draw 
 0491  42                    C1			inc dx 
 0492  3B 16 00E8 R          C1			cmp dx, row_3 
Microsoft (R) Macro Assembler Version 5.00                  11/25/19 00:37:54
                                                             Page     1-20


 0496  7E F7                 C1			jle ??001B 
			     C		row_drawer 	row_3, col_1, col_2, co
				lor 
 0498  B4 0C                 C1		mov	ah,0ch			
					;draw pixel 
 049A  B7 00                 C1		mov	bh,0			
					;page 
 049C  A0 00E1 R             C1		mov	al,color		
					;color 
 049F  8B 0E 00EA R          C1		mov cx,col_1		;column 
 04A3  8B 16 00E8 R          C1		mov	dx,row_3		
						;row 
 04A7                        C1		??001C : 
 04A7  CD 10                 C1			int	10h		
						;draw 
 04A9  41                    C1			inc cx 
 04AA  3B 0E 00EC R          C1			cmp cx, col_2 
 04AE  7E F7                 C1			jle ??001C 
			     C	 
 04B0  C3                    C		ret 
 04B1                        C	print_5 endp 
			     C	 
 04B1                        C	print_6 proc 
			     C		;row 
 04B1  A1 00DD R             C		mov	ax,start_row 
 04B4  C7 06 00E4 R 0000     C		mov row_1,0 
 04BA  01 06 00E4 R          C		add	row_1,ax 
 04BE  C7 06 00E6 R 0019     C		mov row_2,25 
 04C4  01 06 00E6 R          C		add	row_2,ax 
 04C8  C7 06 00E8 R 0032     C		mov row_3,50 
 04CE  01 06 00E8 R          C		add	row_3,ax	 
			     C	 
			     C		;column 
 04D2  A1 00DF R             C		mov	ax,start_col 
 04D5  C7 06 00EA R 0000     C		mov col_1,0 
 04DB  01 06 00EA R          C		add	col_1,ax 
 04DF  C7 06 00EC R 0014     C		mov col_2,20 
 04E5  01 06 00EC R          C		add	col_2,ax		
					 
			     C				 
			     C		row_drawer 	row_1, col_1, col_2, co
				lor			 
 04E9  B4 0C                 C1		mov	ah,0ch			
					;draw pixel 
 04EB  B7 00                 C1		mov	bh,0			
					;page 
 04ED  A0 00E1 R             C1		mov	al,color		
					;color 
 04F0  8B 0E 00EA R          C1		mov cx,col_1		;column 
 04F4  8B 16 00E4 R          C1		mov	dx,row_1		
						;row 
 04F8                        C1		??001D : 
 04F8  CD 10                 C1			int	10h		
						;draw 
Microsoft (R) Macro Assembler Version 5.00                  11/25/19 00:37:54
                                                             Page     1-21


 04FA  41                    C1			inc cx 
 04FB  3B 0E 00EC R          C1			cmp cx, col_2 
 04FF  7E F7                 C1			jle ??001D 
			     C		col_drawer 	col_1, row_1, row_3, co
				lor		 
 0501  B4 0C                 C1		mov	ah,0ch			
					;draw pixel 
 0503  B7 00                 C1		mov	bh,0			
					;page 
 0505  A0 00E1 R             C1		mov	al,color		
					;color 
 0508  8B 0E 00EA R          C1		mov cx,col_1			;column
				 
 050C  8B 16 00E4 R          C1		mov	dx,row_1		;row 
 0510                        C1		??001E : 
 0510  CD 10                 C1			int	10h		
						;draw 
 0512  42                    C1			inc dx 
 0513  3B 16 00E8 R          C1			cmp dx, row_3 
 0517  7E F7                 C1			jle ??001E 
			     C		row_drawer 	row_2, col_1, col_2, co
				lor 
 0519  B4 0C                 C1		mov	ah,0ch			
					;draw pixel 
 051B  B7 00                 C1		mov	bh,0			
					;page 
 051D  A0 00E1 R             C1		mov	al,color		
					;color 
 0520  8B 0E 00EA R          C1		mov cx,col_1		;column 
 0524  8B 16 00E6 R          C1		mov	dx,row_2		
						;row 
 0528                        C1		??001F : 
 0528  CD 10                 C1			int	10h		
						;draw 
 052A  41                    C1			inc cx 
 052B  3B 0E 00EC R          C1			cmp cx, col_2 
 052F  7E F7                 C1			jle ??001F 
			     C		col_drawer 	col_2, row_2, row_3, co
				lor	 
 0531  B4 0C                 C1		mov	ah,0ch			
					;draw pixel 
 0533  B7 00                 C1		mov	bh,0			
					;page 
 0535  A0 00E1 R             C1		mov	al,color		
					;color 
 0538  8B 0E 00EC R          C1		mov cx,col_2			;column
				 
 053C  8B 16 00E6 R          C1		mov	dx,row_2		;row 
 0540                        C1		??0020 : 
 0540  CD 10                 C1			int	10h		
						;draw 
 0542  42                    C1			inc dx 
 0543  3B 16 00E8 R          C1			cmp dx, row_3 
 0547  7E F7                 C1			jle ??0020 
Microsoft (R) Macro Assembler Version 5.00                  11/25/19 00:37:54
                                                             Page     1-22


			     C		row_drawer 	row_3, col_1, col_2, co
				lor 
 0549  B4 0C                 C1		mov	ah,0ch			
					;draw pixel 
 054B  B7 00                 C1		mov	bh,0			
					;page 
 054D  A0 00E1 R             C1		mov	al,color		
					;color 
 0550  8B 0E 00EA R          C1		mov cx,col_1		;column 
 0554  8B 16 00E8 R          C1		mov	dx,row_3		
						;row 
 0558                        C1		??0021 : 
 0558  CD 10                 C1			int	10h		
						;draw 
 055A  41                    C1			inc cx 
 055B  3B 0E 00EC R          C1			cmp cx, col_2 
 055F  7E F7                 C1			jle ??0021 
			     C	 
 0561  C3                    C		ret 
 0562                        C	print_6 endp 
			     C	 
 0562                        C	print_7 proc 
			     C		;row 
 0562  A1 00DD R             C		mov	ax,start_row 
 0565  C7 06 00E4 R 0000     C		mov row_1,0 
 056B  01 06 00E4 R          C		add	row_1,ax 
 056F  C7 06 00E6 R 0032     C		mov row_2,50 
 0575  01 06 00E6 R          C		add	row_2,ax 
			     C	 
			     C		;column 
 0579  A1 00DF R             C		mov	ax,start_col 
 057C  C7 06 00EA R 0000     C		mov col_1,0 
 0582  01 06 00EA R          C		add	col_1,ax 
 0586  C7 06 00EC R 0014     C		mov col_2,20 
 058C  01 06 00EC R          C		add	col_2,ax		
					 
			     C				 
			     C		row_drawer 	row_1, col_1, col_2, co
				lor			 
 0590  B4 0C                 C1		mov	ah,0ch			
					;draw pixel 
 0592  B7 00                 C1		mov	bh,0			
					;page 
 0594  A0 00E1 R             C1		mov	al,color		
					;color 
 0597  8B 0E 00EA R          C1		mov cx,col_1		;column 
 059B  8B 16 00E4 R          C1		mov	dx,row_1		
						;row 
 059F                        C1		??0022 : 
 059F  CD 10                 C1			int	10h		
						;draw 
 05A1  41                    C1			inc cx 
 05A2  3B 0E 00EC R          C1			cmp cx, col_2 
 05A6  7E F7                 C1			jle ??0022 
Microsoft (R) Macro Assembler Version 5.00                  11/25/19 00:37:54
                                                             Page     1-23


			     C		col_drawer 	col_2, row_1, row_2, co
				lor		 
 05A8  B4 0C                 C1		mov	ah,0ch			
					;draw pixel 
 05AA  B7 00                 C1		mov	bh,0			
					;page 
 05AC  A0 00E1 R             C1		mov	al,color		
					;color 
 05AF  8B 0E 00EC R          C1		mov cx,col_2			;column
				 
 05B3  8B 16 00E4 R          C1		mov	dx,row_1		;row 
 05B7                        C1		??0023 : 
 05B7  CD 10                 C1			int	10h		
						;draw 
 05B9  42                    C1			inc dx 
 05BA  3B 16 00E6 R          C1			cmp dx, row_2 
 05BE  7E F7                 C1			jle ??0023 
			     C	 
 05C0  C3                    C		ret 
 05C1                        C	print_7 endp 
			     C	 
 05C1                        C	print_8 proc 
			     C		;row 
 05C1  A1 00DD R             C		mov	ax,start_row 
 05C4  C7 06 00E4 R 0000     C		mov row_1,0 
 05CA  01 06 00E4 R          C		add	row_1,ax 
 05CE  C7 06 00E6 R 0019     C		mov row_2,25 
 05D4  01 06 00E6 R          C		add	row_2,ax 
 05D8  C7 06 00E8 R 0032     C		mov row_3,50 
 05DE  01 06 00E8 R          C		add	row_3,ax	 
			     C	 
			     C		;column 
 05E2  A1 00DF R             C		mov	ax,start_col 
 05E5  C7 06 00EA R 0000     C		mov col_1,0 
 05EB  01 06 00EA R          C		add	col_1,ax 
 05EF  C7 06 00EC R 0014     C		mov col_2,20 
 05F5  01 06 00EC R          C		add	col_2,ax		
					 
			     C				 
			     C		row_drawer 	row_1, col_1, col_2, co
				lor			 
 05F9  B4 0C                 C1		mov	ah,0ch			
					;draw pixel 
 05FB  B7 00                 C1		mov	bh,0			
					;page 
 05FD  A0 00E1 R             C1		mov	al,color		
					;color 
 0600  8B 0E 00EA R          C1		mov cx,col_1		;column 
 0604  8B 16 00E4 R          C1		mov	dx,row_1		
						;row 
 0608                        C1		??0024 : 
 0608  CD 10                 C1			int	10h		
						;draw 
 060A  41                    C1			inc cx 
Microsoft (R) Macro Assembler Version 5.00                  11/25/19 00:37:54
                                                             Page     1-24


 060B  3B 0E 00EC R          C1			cmp cx, col_2 
 060F  7E F7                 C1			jle ??0024 
			     C		col_drawer 	col_1, row_1, row_3, co
				lor		 
 0611  B4 0C                 C1		mov	ah,0ch			
					;draw pixel 
 0613  B7 00                 C1		mov	bh,0			
					;page 
 0615  A0 00E1 R             C1		mov	al,color		
					;color 
 0618  8B 0E 00EA R          C1		mov cx,col_1			;column
				 
 061C  8B 16 00E4 R          C1		mov	dx,row_1		;row 
 0620                        C1		??0025 : 
 0620  CD 10                 C1			int	10h		
						;draw 
 0622  42                    C1			inc dx 
 0623  3B 16 00E8 R          C1			cmp dx, row_3 
 0627  7E F7                 C1			jle ??0025 
			     C		row_drawer 	row_2, col_1, col_2, co
				lor 
 0629  B4 0C                 C1		mov	ah,0ch			
					;draw pixel 
 062B  B7 00                 C1		mov	bh,0			
					;page 
 062D  A0 00E1 R             C1		mov	al,color		
					;color 
 0630  8B 0E 00EA R          C1		mov cx,col_1		;column 
 0634  8B 16 00E6 R          C1		mov	dx,row_2		
						;row 
 0638                        C1		??0026 : 
 0638  CD 10                 C1			int	10h		
						;draw 
 063A  41                    C1			inc cx 
 063B  3B 0E 00EC R          C1			cmp cx, col_2 
 063F  7E F7                 C1			jle ??0026 
			     C		col_drawer 	col_2, row_1, row_3, co
				lor	 
 0641  B4 0C                 C1		mov	ah,0ch			
					;draw pixel 
 0643  B7 00                 C1		mov	bh,0			
					;page 
 0645  A0 00E1 R             C1		mov	al,color		
					;color 
 0648  8B 0E 00EC R          C1		mov cx,col_2			;column
				 
 064C  8B 16 00E4 R          C1		mov	dx,row_1		;row 
 0650                        C1		??0027 : 
 0650  CD 10                 C1			int	10h		
						;draw 
 0652  42                    C1			inc dx 
 0653  3B 16 00E8 R          C1			cmp dx, row_3 
 0657  7E F7                 C1			jle ??0027 
			     C		row_drawer 	row_3, col_1, col_2, co
Microsoft (R) Macro Assembler Version 5.00                  11/25/19 00:37:54
                                                             Page     1-25


				lor 
 0659  B4 0C                 C1		mov	ah,0ch			
					;draw pixel 
 065B  B7 00                 C1		mov	bh,0			
					;page 
 065D  A0 00E1 R             C1		mov	al,color		
					;color 
 0660  8B 0E 00EA R          C1		mov cx,col_1		;column 
 0664  8B 16 00E8 R          C1		mov	dx,row_3		
						;row 
 0668                        C1		??0028 : 
 0668  CD 10                 C1			int	10h		
						;draw 
 066A  41                    C1			inc cx 
 066B  3B 0E 00EC R          C1			cmp cx, col_2 
 066F  7E F7                 C1			jle ??0028 
			     C	 
 0671  C3                    C		ret 
 0672                        C	print_8 endp 
			     C	 
 0672                        C	print_9 proc 
			     C		;row 
 0672  A1 00DD R             C		mov	ax,start_row 
 0675  C7 06 00E4 R 0000     C		mov row_1,0 
 067B  01 06 00E4 R          C		add	row_1,ax 
 067F  C7 06 00E6 R 0019     C		mov row_2,25 
 0685  01 06 00E6 R          C		add	row_2,ax 
 0689  C7 06 00E8 R 0032     C		mov row_3,50 
 068F  01 06 00E8 R          C		add	row_3,ax	 
			     C	 
			     C		;column 
 0693  A1 00DF R             C		mov	ax,start_col 
 0696  C7 06 00EA R 0000     C		mov col_1,0 
 069C  01 06 00EA R          C		add	col_1,ax 
 06A0  C7 06 00EC R 0014     C		mov col_2,20 
 06A6  01 06 00EC R          C		add	col_2,ax		
					 
			     C				 
			     C		row_drawer 	row_1, col_1, col_2, co
				lor			 
 06AA  B4 0C                 C1		mov	ah,0ch			
					;draw pixel 
 06AC  B7 00                 C1		mov	bh,0			
					;page 
 06AE  A0 00E1 R             C1		mov	al,color		
					;color 
 06B1  8B 0E 00EA R          C1		mov cx,col_1		;column 
 06B5  8B 16 00E4 R          C1		mov	dx,row_1		
						;row 
 06B9                        C1		??0029 : 
 06B9  CD 10                 C1			int	10h		
						;draw 
 06BB  41                    C1			inc cx 
 06BC  3B 0E 00EC R          C1			cmp cx, col_2 
Microsoft (R) Macro Assembler Version 5.00                  11/25/19 00:37:54
                                                             Page     1-26


 06C0  7E F7                 C1			jle ??0029 
			     C		col_drawer 	col_1, row_1, row_2, co
				lor		 
 06C2  B4 0C                 C1		mov	ah,0ch			
					;draw pixel 
 06C4  B7 00                 C1		mov	bh,0			
					;page 
 06C6  A0 00E1 R             C1		mov	al,color		
					;color 
 06C9  8B 0E 00EA R          C1		mov cx,col_1			;column
				 
 06CD  8B 16 00E4 R          C1		mov	dx,row_1		;row 
 06D1                        C1		??002A : 
 06D1  CD 10                 C1			int	10h		
						;draw 
 06D3  42                    C1			inc dx 
 06D4  3B 16 00E6 R          C1			cmp dx, row_2 
 06D8  7E F7                 C1			jle ??002A 
			     C		row_drawer 	row_2, col_1, col_2, co
				lor 
 06DA  B4 0C                 C1		mov	ah,0ch			
					;draw pixel 
 06DC  B7 00                 C1		mov	bh,0			
					;page 
 06DE  A0 00E1 R             C1		mov	al,color		
					;color 
 06E1  8B 0E 00EA R          C1		mov cx,col_1		;column 
 06E5  8B 16 00E6 R          C1		mov	dx,row_2		
						;row 
 06E9                        C1		??002B : 
 06E9  CD 10                 C1			int	10h		
						;draw 
 06EB  41                    C1			inc cx 
 06EC  3B 0E 00EC R          C1			cmp cx, col_2 
 06F0  7E F7                 C1			jle ??002B 
			     C		col_drawer 	col_2, row_1, row_3, co
				lor	 
 06F2  B4 0C                 C1		mov	ah,0ch			
					;draw pixel 
 06F4  B7 00                 C1		mov	bh,0			
					;page 
 06F6  A0 00E1 R             C1		mov	al,color		
					;color 
 06F9  8B 0E 00EC R          C1		mov cx,col_2			;column
				 
 06FD  8B 16 00E4 R          C1		mov	dx,row_1		;row 
 0701                        C1		??002C : 
 0701  CD 10                 C1			int	10h		
						;draw 
 0703  42                    C1			inc dx 
 0704  3B 16 00E8 R          C1			cmp dx, row_3 
 0708  7E F7                 C1			jle ??002C 
			     C		row_drawer 	row_3, col_1, col_2, co
				lor 
Microsoft (R) Macro Assembler Version 5.00                  11/25/19 00:37:54
                                                             Page     1-27


 070A  B4 0C                 C1		mov	ah,0ch			
					;draw pixel 
 070C  B7 00                 C1		mov	bh,0			
					;page 
 070E  A0 00E1 R             C1		mov	al,color		
					;color 
 0711  8B 0E 00EA R          C1		mov cx,col_1		;column 
 0715  8B 16 00E8 R          C1		mov	dx,row_3		
						;row 
 0719                        C1		??002D : 
 0719  CD 10                 C1			int	10h		
						;draw 
 071B  41                    C1			inc cx 
 071C  3B 0E 00EC R          C1			cmp cx, col_2 
 0720  7E F7                 C1			jle ??002D 
			     C	 
 0722  C3                    C		ret 
 0723                        C	print_9 endp 
			     C	 
 0723                        C	print_seperator proc 
			     C		;row 
 0723  A1 00DD R             C		mov	ax,start_row 
 0726  C7 06 00E4 R 000D     C		mov row_1,13 
 072C  01 06 00E4 R          C		add	row_1,ax 
 0730  C7 06 00E6 R 0026     C		mov row_2,38 
 0736  01 06 00E6 R          C		add	row_2,ax 
			     C		;column 
 073A  A1 00DF R             C		mov	ax,start_col 
 073D  C7 06 00EA R 0009     C		mov col_1,9 
 0743  01 06 00EA R          C		add	col_1,ax 
 0747  C7 06 00EC R 000B     C		mov col_2,11 
 074D  01 06 00EC R          C		add	col_2,ax		
					 
			     C				 
			     C		row_drawer 	row_1, col_1, col_2, co
				lor			 
 0751  B4 0C                 C1		mov	ah,0ch			
					;draw pixel 
 0753  B7 00                 C1		mov	bh,0			
					;page 
 0755  A0 00E1 R             C1		mov	al,color		
					;color 
 0758  8B 0E 00EA R          C1		mov cx,col_1		;column 
 075C  8B 16 00E4 R          C1		mov	dx,row_1		
						;row 
 0760                        C1		??002E : 
 0760  CD 10                 C1			int	10h		
						;draw 
 0762  41                    C1			inc cx 
 0763  3B 0E 00EC R          C1			cmp cx, col_2 
 0767  7E F7                 C1			jle ??002E 
			     C		 
			     C		row_drawer 	row_2, col_1, col_2, co
				lor 
Microsoft (R) Macro Assembler Version 5.00                  11/25/19 00:37:54
                                                             Page     1-28


 0769  B4 0C                 C1		mov	ah,0ch			
					;draw pixel 
 076B  B7 00                 C1		mov	bh,0			
					;page 
 076D  A0 00E1 R             C1		mov	al,color		
					;color 
 0770  8B 0E 00EA R          C1		mov cx,col_1		;column 
 0774  8B 16 00E6 R          C1		mov	dx,row_2		
						;row 
 0778                        C1		??002F : 
 0778  CD 10                 C1			int	10h		
						;draw 
 077A  41                    C1			inc cx 
 077B  3B 0E 00EC R          C1			cmp cx, col_2 
 077F  7E F7                 C1			jle ??002F 
			     C	 
 0781  C3                    C		ret 
 0782                        C	print_seperator endp 
				 
				 
				;tone is a macro that will accept the frequency
				 and send to horn to produce different sound 
				tone macro number 
					mov bx,number			;This m
				acro receives the tone 
					call horn			
					;and send to call the procedures 
				endm 
				 
 0040				.stack 64 
				 
 0782				.code 
				 
 0782				check_one_sec_ana proc  
 0782  80 3E 02DE R 3C			cmp temp_sec_ana,60 
 0787  0F 85 0790 R			jne no_reset_sec_ana 
 078B  C6 06 02DE R 00			mov temp_sec_ana,0 
 0790					no_reset_sec_ana: 
				 
 0790  B4 02				mov ah,02h			
					;get real time 
 0792  CD 1A				int 1ah                	;ch = hr, cl = 
				min, dh = sec 
 0794  8A D6				mov dl,dh 
 0796  E8 0026 R			call bcd2dec 
 0799  8A F2				mov dh,dl 
 079B  3A 36 02DE R				cmp dh,temp_sec_ana 
 079F  0F 85 07AC R				jne not_yet_sec_ana 
 07A3  C6 06 02DF R 01				mov is_sec_pass_ana,1b 
 07A8  FE 06 02DE R				inc temp_sec_ana 
							 
 07AC					not_yet_sec_ana:	 
 07AC  C3				ret 
 07AD				check_one_sec_ana endp	 
Microsoft (R) Macro Assembler Version 5.00                  11/25/19 00:37:54
                                                             Page     1-29


				 
				;in al out ax 
 07AD				inner_hr proc 
 07AD  B2 0C				mov dl,12			
					;60/12 = 5 ;5 gaps 
 07AF  B4 00				mov ah,0			
					;meaning update the hour hand every 12 
				minutes  
 07B1  F6 F2				div dl 
 07B3  B4 00				mov ah,0	 
 07B5  B2 06				mov dl,6			
					;6deg rep 12 minutes 
 07B7  F6 E2				mul dl 
 07B9  8B C8				mov cx,ax 
 07BB  C3				ret  
 07BC				inner_hr endp 
				 
 07BC				get_analog_time proc 
 07BC  B4 02				mov ah,02h			
					;get real time 
 07BE  CD 1A				int 1ah                	;ch = hr, cl = 
				min, dh = sec 
 07C0  8A D6				mov dl,dh 
 07C2  E8 0026 R			call bcd2dec 
 07C5  88 16 02E0 R			mov analog_ss,dl 
					 
 07C9  B4 02				mov ah,02h			
					;get real time 
 07CB  CD 1A				int 1ah                	;ch = hr, cl = 
				min, dh = sec	 
 07CD  8A D1				mov dl,cl 
 07CF  E8 0026 R			call bcd2dec 
 07D2  88 16 02E1 R			mov analog_mm,dl 
					 
 07D6  B4 02				mov ah,02h			
					;get real time 
 07D8  CD 1A				int 1ah                	;ch = hr, cl = 
				min, dh = sec	 
 07DA  8A D5				mov dl,ch 
 07DC  E8 0026 R			call bcd2dec 
					 
 07DF  80 FA 0C				cmp dl,12 
 07E2  0F 8C 07E9 R			jl hr_12_format 
 07E6  80 EA 0C				sub dl,12 
 07E9				hr_12_format:		 
					 
 07E9  88 16 02E2 R			mov analog_hh,dl 
				 
 07ED  E8 0782 R			call check_one_sec_ana 
 07F0  80 3E 02DF R 01			cmp is_sec_pass_ana,1b 
 07F5  0F 85 0938 R			jne end_get_time 
 07F9  C6 06 02DF R 00			mov is_sec_pass_ana,0b 
				 
				;display the current second 
Microsoft (R) Macro Assembler Version 5.00                  11/25/19 00:37:54
                                                             Page     1-30


				 
 07FE  66| B8 00000006			mov eax,6			
					;second gap or step 
 0804  F6 26 02E0 R			mul analog_ss 
 0808  66| 83 C0 5A			add eax,90			
					;adjust start from 90deg 
					 
 080C  66| A3 0306 R			mov theta,eax 
 0810  C6 06 02E7 R 0B			mov sec_hand_color,11	 
 0815  E8 1BCF R			call sec_hand	 
					 
				;remove the previous second 
				 
 0818  66| B8 00000006			mov eax,6 
 081E  F6 26 02E0 R			mul analog_ss 
 0822  66| 83 C0 5A			add eax,90			
					;adjust to start from 90++deg 
				 
 0826  66| 83 E8 06			sub eax,6 
					 
 082A  66| A3 0306 R			mov theta,eax	 
					 
 082E  C6 06 02E7 R 00			mov sec_hand_color,0	 
 0833  E8 1BCF R			call sec_hand	 
					 
				;display the current minute 
 0836  8A 0E 02E1 R			mov cl,analog_mm 
 083A  8A 36 02E0 R			mov dh,analog_ss 
					 
				;show_min_hand: 
 083E  66| B8 00000006			mov eax,6			
					;minute gap or step 
 0844  F6 E1				mul cl 
 0846  66| 83 C0 5A			add eax,90			
					;adjust start from 90deg 
					 
 084A  66| A3 0306 R			mov theta,eax 
 084E  C6 06 02E8 R 0A			mov min_hand_color,10 
 0853  E8 1B60 R			call min_hand 
					 
				;remove the previous minute	 
 0856  8A 0E 02E1 R			mov cl,analog_mm 
					 
 085A  80 E9 01				sub cl,1 
 085D  3A 0E 02E0 R			cmp cl,analog_ss 
 0861  0F 85 086D R			jne reset_color_0 
 0865  C6 06 02E8 R 0B			mov min_hand_color,11 
 086A  EB 06 90				jmp reset_min_hand 
				 
 086D				reset_color_0: 
 086D  C6 06 02E8 R 00			mov min_hand_color,0	 
					 
 0872				reset_min_hand: 
 0872  80 C1 01				add cl,1 
Microsoft (R) Macro Assembler Version 5.00                  11/25/19 00:37:54
                                                             Page     1-31


					 
 0875  66| B8 00000006			mov eax,6			
					;minute gap or step 
 087B  F6 E1				mul cl 
 087D  66| 83 C0 5A			add eax,90			
					;adjust start from 90deg 
					 
 0881  66| 83 E8 06			sub eax,6 
					 
 0885  66| A3 0306 R			mov theta,eax	 
 0889  E8 1B60 R			call min_hand 
					 
				;display the current hour 
				 
				;show_hour_hand: 
				 
 088C  66| B8 00000000			mov eax,0 
 0892  A0 02E1 R			mov al,analog_mm 
 0895  E8 07AD R			call inner_hr 
 0898  89 0E 02E3 R			mov inner_analog_hh,cx 
					 
 089C  66| B8 0000001E			mov eax,30			
					;hour gap or step 
 08A2  F6 26 02E2 R			mul analog_hh 
 08A6  66| 83 C0 5A			add eax,90			
					;adjust start from 90deg 
 08AA  66| 03 C1			add eax,ecx	 
					 
 08AD  66| A3 0306 R			mov theta,eax 
 08B1  C6 06 02E9 R 0F			mov hour_hand_color,15 
 08B6  E8 1AF1 R			call hour_hand 
					 
				;remove the previous hour	  
 08B9  66| B8 00000000			mov eax,0 
 08BF  A0 02E1 R			mov al,analog_mm 
 08C2  B2 0C				mov dl,12			
					;60/12 = 5 ;5 gaps 
 08C4  B4 00				mov ah,0			
					;meaning update the hour hand every 12 
				minutes  
 08C6  F6 F2				div dl 
 08C8  8B D8				mov bx,ax 
					 
					;convert hour in (0-59) format for comp
				arison 
 08CA  B8 0000				mov ax,0 
 08CD  B2 05				mov dl,5			
					 
 08CF  A0 02E2 R			mov al,analog_hh 
 08D2  F6 E2				mul dl 
 08D4  03 C3				add ax,bx 
 08D6  8B C8				mov cx,ax 
 08D8  89 0E 02E5 R			mov hour_in_60,cx 
					 
Microsoft (R) Macro Assembler Version 5.00                  11/25/19 00:37:54
                                                             Page     1-32


 08DC  80 E9 01				sub cl,1 
 08DF  3A 0E 02E0 R			cmp cl,analog_ss 
 08E3  0F 85 08EF R			jne chk_hour_color 
 08E7  C6 06 02E9 R 0B			mov hour_hand_color,11		;is sec
				ond hand after chg hour hand 
 08EC  EB 1D 90				jmp reset_hour_hand	 
 08EF				chk_hour_color:	 
 08EF  8B 0E 02E5 R			mov cx,hour_in_60 
					 
 08F3  80 E9 01				sub cl,1 
 08F6  3A 0E 02E1 R			cmp cl,analog_mm 
 08FA  0F 85 0906 R			jne reset_color_1	 
 08FE  C6 06 02E9 R 0A			mov hour_hand_color,10		;is min
				ute hand after chg hour hand 
 0903  EB 06 90				jmp reset_hour_hand 
				 
 0906				reset_color_1: 
 0906  C6 06 02E9 R 00			mov hour_hand_color,0	 
					 
 090B				reset_hour_hand: 
 090B  66| B8 0000001E			mov eax,30			
					;hour gap or step 
 0911  F6 26 02E2 R			mul analog_hh 
 0915  66| 83 C0 5A			add eax,90			
					;adjust start from 90deg 
				 
 0919  8B 0E 02E3 R			mov cx,inner_analog_hh 
 091D  83 F9 00				cmp cx,0 
 0920  0F 84 092D R			je inner_hour_0 
 0924  83 E9 06				sub cx,6			
					;delete previus hour hand 
 0927  66| 03 C1			add eax,ecx 
 092A  EB 05 90				jmp reseted_hr_hand 
 092D				inner_hour_0:	 
 092D  66| 83 E8 06			sub eax,6 
				 
 0931				reseted_hr_hand: 
					 
 0931  66| A3 0306 R			mov theta,eax 
 0935  E8 1AF1 R			call hour_hand 
					 
 0938				end_get_time:	 
 0938  C3				ret 
 0939				get_analog_time endp 
				 
				;to aschii procedure is used to convert the num
				ber to its specific aschii value 
 0939				to_aschii proc 
				 
 0939  B4 00				mov ah,0		 
 093B  B2 0A				mov dl,10        
 093D  F6 F2				div dl           
 093F  80 C4 30				add ah,30h 
 0942  04 30				add al,30h 
Microsoft (R) Macro Assembler Version 5.00                  11/25/19 00:37:54
                                                             Page     1-33


				             
 0944  C3				ret 
 0945				to_aschii endp 
				 
 0945				get_time proc 
					;input bx as the address of time buffer
				 
 0945  B4 02				mov ah,02h			
					;get real time 
 0947  CD 1A				int 1ah                	;ch = hr, cl = 
				min, dh = sec 
 0949  8A D5				mov dl,ch 
 094B  E8 0026 R			call bcd2dec 
 094E  8A EA				mov ch,dl 
 0950  B4 00				mov ah,0 
					 
 0952  C6 06 015B R 01			mov is_24,1			
					;assign false if current time is not 24
				 or 12am 
					 
 0957  8A C5				mov al,ch      
 0959  3C 18				cmp al,24 
 095B  0F 85 0964 R			jne store 
					 
 095F  C6 06 015B R 00			mov is_24,0			
					;assign true if current time is 24 or 1
				2am 
					 
 0964					store: 
 0964  E8 0939 R			call to_aschii      
						 
 0967  89 07				mov [bx],ax      
						 
 0969  B4 02				mov ah,02h			
					;get real time 
 096B  CD 1A				int 1ah                	;ch = hr, cl = 
				min, dh = sec 
 096D  8A D1				mov dl,cl 
 096F  E8 0026 R			call bcd2dec 
 0972  8A CA				mov cl,dl	 
 0974  B4 00				mov ah,0	 
						 
 0976  8A C1				mov al,cl      
 0978  E8 0939 R			call to_aschii         
 097B  89 47 03				mov [bx+3], ax      
				 
 097E  B4 02				mov ah,02h			
					;get real time 
 0980  CD 1A				int 1ah                	;ch = hr, cl = 
				min, dh = sec 
 0982  8A D6				mov dl,dh 
 0984  E8 0026 R			call bcd2dec 
 0987  8A F2				mov dh,dl 
 0989  B4 00				mov ah,0 
Microsoft (R) Macro Assembler Version 5.00                  11/25/19 00:37:54
                                                             Page     1-34


					 
 098B  8A C6				mov al,dh      
 098D  E8 0939 R			call to_aschii       
 0990  89 47 06				mov [bx+6],ax       
				 
 0993  C3				ret 
 0994				get_time endp 
				 
 0994				check_one_sec proc  
 0994  80 3E 02D4 R 3C			cmp temp_sec,60 
 0999  0F 85 09A2 R			jne no_reset_sec_counter 
 099D  C6 06 02D4 R 00			mov temp_sec,0 
 09A2					no_reset_sec_counter: 
				 
 09A2  B4 2C					mov ah,2ch 
 09A4  CD 21					int 21h 
 09A6  3A 36 02D4 R				cmp dh,temp_sec 
 09AA  0F 85 09B7 R				jne not_yet_sec 
 09AE  C6 06 02D9 R 01				mov is_sec_pass,1b 
 09B3  FE 06 02D4 R				inc temp_sec 
							 
 09B7					not_yet_sec:	 
 09B7  C3				ret 
 09B8				check_one_sec endp 
				 
 09B8				simulate_time proc 
 09B8  80 3E 02D8 R 01			cmp first_sec,1b 
 09BD  0F 85 09CB R			jne not_first_sec 
 09C1  C6 06 02D8 R 00			mov first_sec,0b 
 09C6  C6 06 02D6 R FF			mov simulate_sec,-1 
				 
 09CB				not_first_sec: 
 09CB  80 3E 02D6 R 3C			cmp simulate_sec,60 
 09D0  0F 85 09DD R			jne	no_reset_sec 
 09D4  FE 06 02D5 R			inc simulate_minute 
 09D8  C6 06 02D6 R 00			mov simulate_sec,0 
				 
 09DD				no_reset_sec:	 
				 
 09DD  80 3E 02D9 R 01			cmp is_sec_pass,1b 
 09E2  0F 85 09EF R			jne not_yet_sec2 
 09E6  C6 06 02D9 R 00			mov is_sec_pass,0b	 
 09EB  FE 06 02D6 R			inc simulate_sec 
							 
 09EF				not_yet_sec2:	 
					 
 09EF  C3				ret 
 09F0				simulate_time endp 
				 
 09F0				init_stopwatch proc  
 09F0  C6 06 015B R 01			mov is_24,1			
					;assign false if current time is not 24
				 or 12am 
					 
Microsoft (R) Macro Assembler Version 5.00                  11/25/19 00:37:54
                                                             Page     1-35


 09F5  80 3E 02DB R 01			cmp is_reset,1b 
 09FA  0F 85 0A12 R			jne not_reset 
 09FE  C6 06 02D7 R 00			mov simulate_milisec,0 
 0A03  C6 06 02D6 R 00			mov simulate_sec,0 
 0A08  C6 06 02D5 R 00			mov simulate_minute,0 
 0A0D  C6 06 02DB R 00			mov is_reset,0b 
					 
 0A12				not_reset:	 
 0A12  E8 0994 R			call check_one_sec	 
 0A15  80 3E 02DA R 01			cmp is_start,1b 
 0A1A  0F 85 0A21 R			jne not_yet_start 
 0A1E  E8 09B8 R			call simulate_time	 
					 
 0A21				not_yet_start:	 
					 
 0A21  A0 02D5 R			mov al,simulate_minute    
 0A24  E8 0939 R			call to_aschii      
 0A27  89 07				mov [bx],ax      
				 
 0A29  A0 02D6 R			mov al,simulate_sec   
 0A2C  E8 0939 R			call to_aschii         
 0A2F  89 47 03				mov [bx+3], ax      
				 
 0A32  80 3E 02DA R 01			cmp is_start,1b 
 0A37  0F 85 0A43 R			jne con4 
 0A3B  B4 2C				mov ah,2ch 
 0A3D  CD 21				int 21h 
 0A3F  88 16 02D7 R			mov simulate_milisec,dl	 
 0A43				con4:	 
				 
 0A43  A0 02D7 R			mov al,simulate_milisec   
 0A46  E8 0939 R			call to_aschii       
 0A49  89 47 06				mov [bx+6],ax       
					; set 1 million microseconds interval (
				1 second) 
 0A4C  C3				ret 
 0A4D				init_stopwatch endp 
				 
 0A4D				simulate_timer_time proc 
 0A4D  80 3E 02D2 R 01			cmp first_timer_sec,1b 
 0A52  0F 85 0A60 R			jne not_first_timer_sec 
 0A56  C6 06 02D2 R 00			mov first_timer_sec,0b 
 0A5B  C6 06 02D1 R FF			mov simulate_timer_ss,-1 
				 
 0A60				not_first_timer_sec: 
 0A60  80 3E 02D1 R FF			cmp simulate_timer_ss,-1 
 0A65  0F 85 0A99 R			jne	no_reset_sec2 
 0A69  C6 06 02D1 R 3B			mov simulate_timer_ss,59 
					 
 0A6E  80 3E 02CF R 00			cmp simulate_timer_hh,0 
 0A73  0F 84 0A8C R			je con8 
 0A77  80 3E 02D0 R 00			cmp simulate_timer_mm,0 
 0A7C  0F 85 0A8C R			jne con8 
 0A80  C6 06 02D0 R 3B			mov simulate_timer_mm,59 
Microsoft (R) Macro Assembler Version 5.00                  11/25/19 00:37:54
                                                             Page     1-36


 0A85  FE 0E 02CF R			dec simulate_timer_hh 
 0A89  EB 0E 90				jmp no_reset_sec2 
 0A8C				con8: 
 0A8C  80 3E 02D0 R 00			cmp simulate_timer_mm,0 
 0A91  0F 84 0A99 R			je no_reset_sec2 
 0A95  FE 0E 02D0 R			dec simulate_timer_mm 
					 
 0A99				no_reset_sec2:	 
				 
 0A99  80 3E 02D9 R 01			cmp is_sec_pass,1b 
 0A9E  0F 85 0AAB R			jne not_yet_sec3 
 0AA2  C6 06 02D9 R 00			mov is_sec_pass,0b	 
 0AA7  FE 0E 02D1 R			dec simulate_timer_ss 
							 
 0AAB				not_yet_sec3:	 
					 
 0AAB  C3				ret 
 0AAC				simulate_timer_time endp 
				 
 0AAC				init_timer proc  
 0AAC  C6 06 015B R 01			mov is_24,1			
					;assign false if current time is not 24
				 or 12am 
					 
 0AB1  80 3E 02DD R 01			cmp is_timer_reset,1b 
 0AB6  0F 85 0AD1 R			jne not_reset2 
 0ABA  A0 023D R			mov al,timer_hh 
 0ABD  A2 02CF R			mov simulate_timer_hh,al 
 0AC0  A0 023E R			mov al,timer_mm 
 0AC3  A2 02D0 R			mov simulate_timer_mm,al 
 0AC6  A0 023F R			mov al,timer_ss 
 0AC9  A2 02D1 R			mov simulate_timer_ss,al 
 0ACC  C6 06 02DD R 00			mov is_timer_reset,0b 
					 
 0AD1				not_reset2:	 
 0AD1  E8 0994 R			call check_one_sec	 
 0AD4  80 3E 02DC R 01			cmp is_timer_start,1b 
 0AD9  0F 85 0B08 R			jne not_yet_start2 
 0ADD  80 3E 02CF R 00			cmp simulate_timer_hh,0 
 0AE2  0F 85 0B05 R			jne con_countdown 
 0AE6  80 3E 02D0 R 00			cmp simulate_timer_mm,0 
 0AEB  0F 85 0B05 R			jne con_countdown 
 0AEF  80 3E 02D1 R 00			cmp simulate_timer_ss,0	 
 0AF4  0F 85 0B05 R			jne con_countdown 
 0AF8  C6 06 02DC R 00			mov is_timer_start,0b 
 0AFD  C6 06 02D3 R 01			mov invoke_timer_alarm,1b 
 0B02  EB 04 90				jmp stop_countdown 
					 
 0B05				con_countdown: 
 0B05  E8 0A4D R			call simulate_timer_time 
					 
 0B08				stop_countdown: 
				 
 0B08				not_yet_start2:	 
Microsoft (R) Macro Assembler Version 5.00                  11/25/19 00:37:54
                                                             Page     1-37


					 
 0B08  A0 02CF R			mov al,simulate_timer_hh 
 0B0B  E8 0939 R			call to_aschii      
 0B0E  89 07				mov [bx],ax      
				 
 0B10  A0 02D0 R			mov al,simulate_timer_mm  
 0B13  E8 0939 R			call to_aschii         
 0B16  89 47 03				mov [bx+3], ax      
				 
 0B19  A0 02D1 R			mov al,simulate_timer_ss 
 0B1C  E8 0939 R			call to_aschii       
 0B1F  89 47 06				mov [bx+6],ax       
				 
 0B22  C3				ret 
 0B23				init_timer endp 
				 
 0B23				clock_int proc 
				;interrupt procedure activated by timer 
				 
					;get new time 
 0B23  8D 1E 00F0 R			lea	bx,time_buf		
					;bx points to time buffer 
 0B27  80 3E 00D6 R 01			cmp is_show_clock,1b 
 0B2C  0F 84 0B42 R			je run_get_time 
 0B30  80 3E 00DB R 01			cmp is_stopwatch,1b 
 0B35  0F 84 0B57 R			je run_init_stopwatch 
 0B39  80 3E 00DA R 01			cmp is_timer,1b 
 0B3E  0F 84 0B5D R			je run_init_timer 
				 
 0B42				run_get_time: 
 0B42  80 3E 00D7 R 01			cmp is_analog,1b 
 0B47  0F 85 0B51 R			jne call_get_dig_time 
 0B4B  E8 07BC R			call get_analog_time		
					;store time in buffer 
 0B4E  E9 0F77 R			jmp no_ana_alarm 
					 
 0B51				call_get_dig_time:	 
 0B51  E8 0945 R			call get_time	 
 0B54  EB 0D 90				jmp check_alarm 
					 
 0B57				run_init_stopwatch: 
 0B57  E8 09F0 R			call init_stopwatch		;store 
				time in buffer	 
 0B5A  EB 55 90				jmp alarm_1_minite 
					 
 0B5D				run_init_timer:	 
 0B5D  E8 0AAC R			call init_timer 
 0B60  EB 4F 90				jmp alarm_1_minite 
					 
 0B63				check_alarm: 
					;check alarm 
 0B63  A0 0104 R			mov al,alarm_buf[0] 
 0B66  A2 00AC R			mov input[0],al 
 0B69  A0 0105 R			mov al,alarm_buf[1] 
Microsoft (R) Macro Assembler Version 5.00                  11/25/19 00:37:54
                                                             Page     1-38


 0B6C  A2 00AD R			mov input[1],al 
 0B6F  A0 0107 R			mov al,alarm_buf[3] 
 0B72  A2 00AF R			mov input[3],al	 
 0B75  A0 0108 R			mov al,alarm_buf[4] 
 0B78  A2 00B0 R			mov input[4],al 
 0B7B  E8 13D2 R			call get_alarm 
					 
 0B7E  B4 02				mov ah,02h			
					;get real time 
 0B80  CD 1A				int 1ah                	;ch = hr, cl = 
				min, dh = sec 
 0B82  8A D5				mov dl,ch 
 0B84  E8 0026 R			call bcd2dec 
 0B87  8A EA				mov ch,dl 
 0B89  3A 2E 0239 R			cmp ch,alarm_hh 
 0B8D  0F 85 0BAC R			jne no_alarm_invoke 
					 
 0B91  B4 02				mov ah,02h			
					;get real time 
 0B93  CD 1A				int 1ah                	;ch = hr, cl = 
				min, dh = sec 
 0B95  8A D1				mov dl,cl 
 0B97  E8 0026 R			call bcd2dec 
 0B9A  8A CA				mov cl,dl 
 0B9C  3A 0E 023A R			cmp cl,alarm_mm 
 0BA0  0F 85 0BAC R			jne no_alarm_invoke 
					 
 0BA4  C6 06 023C R 01			mov invoker_alarm,1b 
 0BA9  EB 06 90				jmp alarm_1_minite		;set al
				arm for 1 minute only 
					 
 0BAC				no_alarm_invoke:	 
 0BAC  C6 06 023C R 00			mov invoker_alarm,0b	 
 0BB1				alarm_1_minite: 
 0BB1  80 3E 00D7 R 01			cmp is_analog,1b 
 0BB6  0F 84 0F77 R			je no_ana_alarm 
				 
					;print first digit of minutes value 
 0BBA  C7 06 00DD R 0041		mov	start_row,65 
 0BC0  C7 06 00DF R 0028		mov	start_col,40 
 0BC6  E8 006F R			call reset_print 
					 
					 
 0BC9  A0 015B R			mov al,is_24 
 0BCC  3C 00				cmp al,0 
 0BCE  0F 84 0BDA R			je h10 
					 
 0BD2  B0 30				mov	al,'0' 
 0BD4  38 07				cmp	[bx],al	 
 0BD6  0F 85 0BE0 R			jne	h11 
					 
 0BDA					h10: 
 0BDA  E8 013D R				call print_0 
 0BDD  EB 74 90					jmp	h1 
Microsoft (R) Macro Assembler Version 5.00                  11/25/19 00:37:54
                                                             Page     1-39


					 
 0BE0					h11: 
 0BE0  FE C0					inc	al 
 0BE2  38 07					cmp	[bx],al 
 0BE4  0F 85 0BEE R				jne	h12 
 0BE8  E8 01CC R				call print_1 
 0BEB  EB 66 90					jmp	h1 
 0BEE					h12:	 
 0BEE  FE C0					inc	al 
 0BF0  38 07					cmp	[bx],al 
 0BF2  0F 85 0BFC R				jne	h13 
 0BF6  E8 022B R				call print_2 
 0BF9  EB 58 90					jmp	h1 
 0BFC					h13:	 
 0BFC  FE C0					inc	al 
 0BFE  38 07					cmp	[bx],al 
 0C00  0F 85 0C0A R				jne	h14 
 0C04  E8 02DC R				call print_3 
 0C07  EB 4A 90					jmp	h1 
 0C0A					h14:	 
 0C0A  FE C0					inc	al 
 0C0C  38 07					cmp	[bx],al 
 0C0E  0F 85 0C18 R				jne	h15 
 0C12  E8 0375 R				call print_4 
 0C15  EB 3C 90					jmp	h1 
 0C18					h15:	 
 0C18  FE C0					inc	al 
 0C1A  38 07					cmp	[bx],al 
 0C1C  0F 85 0C26 R				jne	h16 
 0C20  E8 0400 R				call print_5 
 0C23  EB 2E 90					jmp	h1 
 0C26					h16:	 
 0C26  FE C0					inc	al 
 0C28  38 07					cmp	[bx],al 
 0C2A  0F 85 0C34 R				jne	h17 
 0C2E  E8 04B1 R				call print_6 
 0C31  EB 20 90					jmp	h1 
 0C34					h17:	 
 0C34  FE C0					inc	al 
 0C36  38 07					cmp	[bx],al 
 0C38  0F 85 0C42 R				jne	h18 
 0C3C  E8 0562 R				call print_7 
 0C3F  EB 12 90					jmp	h1 
 0C42					h18:	 
 0C42  FE C0					inc	al 
 0C44  38 07					cmp	[bx],al 
 0C46  0F 85 0C50 R				jne	h19 
 0C4A  E8 05C1 R				call print_8 
 0C4D  EB 04 90					jmp	h1 
 0C50					h19:	 
 0C50  E8 0672 R				call print_9 
						 
 0C53					h1: 
					 
Microsoft (R) Macro Assembler Version 5.00                  11/25/19 00:37:54
                                                             Page     1-40


					;print second digit of hour value 
 0C53  C7 06 00DD R 0041		mov	start_row,65 
 0C59  C7 06 00DF R 0046		mov	start_col,70 
 0C5F  E8 006F R			call reset_print 
							 
 0C62  A0 015B R			mov al,is_24 
 0C65  3C 00				cmp al,0 
 0C67  0F 84 0C74 R			je h20 
							 
 0C6B  B0 30				mov	al,'0' 
 0C6D  38 47 01				cmp	[bx+1],al 
 0C70  0F 85 0C7A R			jne	h21 
					 
 0C74					h20: 
 0C74  E8 013D R				call print_0 
 0C77  EB 7C 90					jmp	h2 
						 
 0C7A					h21:	 
 0C7A  FE C0					inc	al 
 0C7C  38 47 01					cmp	[bx+1],al 
 0C7F  0F 85 0C89 R				jne	h22 
 0C83  E8 01CC R				call print_1 
 0C86  EB 6D 90					jmp	h2 
 0C89					h22:	 
 0C89  FE C0					inc	al 
 0C8B  38 47 01					cmp	[bx+1],al 
 0C8E  0F 85 0C98 R				jne	h23 
 0C92  E8 022B R				call print_2 
 0C95  EB 5E 90					jmp	h2 
 0C98					h23:	 
 0C98  FE C0					inc	al 
 0C9A  38 47 01					cmp	[bx+1],al 
 0C9D  0F 85 0CA7 R				jne	h24 
 0CA1  E8 02DC R				call print_3 
 0CA4  EB 4F 90					jmp	h2 
 0CA7					h24:	 
 0CA7  FE C0					inc	al 
 0CA9  38 47 01					cmp	[bx+1],al 
 0CAC  0F 85 0CB6 R				jne	h25 
 0CB0  E8 0375 R				call print_4 
 0CB3  EB 40 90					jmp	h2 
 0CB6					h25:	 
 0CB6  FE C0					inc	al 
 0CB8  38 47 01					cmp	[bx+1],al 
 0CBB  0F 85 0CC5 R				jne	h26 
 0CBF  E8 0400 R				call print_5 
 0CC2  EB 31 90					jmp	h2 
 0CC5					h26:	 
 0CC5  FE C0					inc	al 
 0CC7  38 47 01					cmp	[bx+1],al 
 0CCA  0F 85 0CD4 R				jne	h27 
 0CCE  E8 04B1 R				call print_6 
 0CD1  EB 22 90					jmp	h2 
 0CD4					h27:	 
Microsoft (R) Macro Assembler Version 5.00                  11/25/19 00:37:54
                                                             Page     1-41


 0CD4  FE C0					inc	al 
 0CD6  38 47 01					cmp	[bx+1],al 
 0CD9  0F 85 0CE3 R				jne	h28 
 0CDD  E8 0562 R				call print_7 
 0CE0  EB 13 90					jmp	h2 
 0CE3					h28:	 
 0CE3  FE C0					inc	al 
 0CE5  38 47 01					cmp	[bx+1],al 
 0CE8  0F 85 0CF2 R				jne	h29 
 0CEC  E8 05C1 R				call print_8 
 0CEF  EB 04 90					jmp	h2 
 0CF2					h29:	 
 0CF2  E8 0672 R				call print_9 
 0CF5					h2:	 
					 
					;print a seprator 
 0CF5  C7 06 00DD R 0041		mov	start_row,65 
 0CFB  C7 06 00DF R 0064		mov	start_col,100 
 0D01  E8 0723 R			call print_seperator 
					 
					;print first digit of minutes value 
 0D04  C7 06 00DD R 0041		mov	start_row,65 
 0D0A  C7 06 00DF R 0082		mov	start_col,130 
 0D10  E8 006F R			call reset_print 
					 
 0D13  B0 30				mov	al,'0' 
 0D15  38 47 03				cmp	[bx+3],al	 
 0D18  0F 85 0D22 R			jne	m11 
					 
 0D1C  E8 013D R			call print_0 
 0D1F  EB 7C 90				jmp	m1 
					 
 0D22					m11: 
 0D22  FE C0					inc	al 
 0D24  38 47 03					cmp	[bx+3],al 
 0D27  0F 85 0D31 R				jne	m12 
 0D2B  E8 01CC R				call print_1 
 0D2E  EB 6D 90					jmp	m1 
 0D31					m12:	 
 0D31  FE C0					inc	al 
 0D33  38 47 03					cmp	[bx+3],al 
 0D36  0F 85 0D40 R				jne	m13 
 0D3A  E8 022B R				call print_2 
 0D3D  EB 5E 90					jmp	m1 
 0D40					m13:	 
 0D40  FE C0					inc	al 
 0D42  38 47 03					cmp	[bx+3],al 
 0D45  0F 85 0D4F R				jne	m14 
 0D49  E8 02DC R				call print_3 
 0D4C  EB 4F 90					jmp	m1 
 0D4F					m14:	 
 0D4F  FE C0					inc	al 
 0D51  38 47 03					cmp	[bx+3],al 
 0D54  0F 85 0D5E R				jne	m15 
Microsoft (R) Macro Assembler Version 5.00                  11/25/19 00:37:54
                                                             Page     1-42


 0D58  E8 0375 R				call print_4 
 0D5B  EB 40 90					jmp	m1 
 0D5E					m15:	 
 0D5E  FE C0					inc	al 
 0D60  38 47 03					cmp	[bx+3],al 
 0D63  0F 85 0D6D R				jne	m16 
 0D67  E8 0400 R				call print_5 
 0D6A  EB 31 90					jmp	m1 
 0D6D					m16:	 
 0D6D  FE C0					inc	al 
 0D6F  38 47 03					cmp	[bx+3],al 
 0D72  0F 85 0D7C R				jne	m17 
 0D76  E8 04B1 R				call print_6 
 0D79  EB 22 90					jmp	m1 
 0D7C					m17:	 
 0D7C  FE C0					inc	al 
 0D7E  38 47 03					cmp	[bx+3],al 
 0D81  0F 85 0D8B R				jne	m18 
 0D85  E8 0562 R				call print_7 
 0D88  EB 13 90					jmp	m1 
 0D8B					m18:	 
 0D8B  FE C0					inc	al 
 0D8D  38 47 03					cmp	[bx+3],al 
 0D90  0F 85 0D9A R				jne	m19 
 0D94  E8 05C1 R				call print_8 
 0D97  EB 04 90					jmp	m1 
 0D9A					m19:	 
 0D9A  E8 0672 R				call print_9 
						 
 0D9D					m1: 
					 
					;print second digit of minute value 
 0D9D  C7 06 00DD R 0041		mov	start_row,65 
 0DA3  C7 06 00DF R 00A0		mov	start_col,160 
 0DA9  E8 006F R			call reset_print 
							 
 0DAC  B0 30				mov	al,'0' 
 0DAE  38 47 04				cmp	[bx+4],al 
 0DB1  0F 85 0DBB R			jne	m21 
 0DB5  E8 013D R			call print_0 
 0DB8  EB 7C 90				jmp	m2 
						 
 0DBB					m21:	 
 0DBB  FE C0					inc	al 
 0DBD  38 47 04					cmp	[bx+4],al 
 0DC0  0F 85 0DCA R				jne	m22 
 0DC4  E8 01CC R				call print_1 
 0DC7  EB 6D 90					jmp	m2 
 0DCA					m22:	 
 0DCA  FE C0					inc	al 
 0DCC  38 47 04					cmp	[bx+4],al 
 0DCF  0F 85 0DD9 R				jne	m23 
 0DD3  E8 022B R				call print_2 
 0DD6  EB 5E 90					jmp	m2 
Microsoft (R) Macro Assembler Version 5.00                  11/25/19 00:37:54
                                                             Page     1-43


 0DD9					m23:	 
 0DD9  FE C0					inc	al 
 0DDB  38 47 04					cmp	[bx+4],al 
 0DDE  0F 85 0DE8 R				jne	m24 
 0DE2  E8 02DC R				call print_3 
 0DE5  EB 4F 90					jmp	m2 
 0DE8					m24:	 
 0DE8  FE C0					inc	al 
 0DEA  38 47 04					cmp	[bx+4],al 
 0DED  0F 85 0DF7 R				jne	m25 
 0DF1  E8 0375 R				call print_4 
 0DF4  EB 40 90					jmp	m2 
 0DF7					m25:	 
 0DF7  FE C0					inc	al 
 0DF9  38 47 04					cmp	[bx+4],al 
 0DFC  0F 85 0E06 R				jne	m26 
 0E00  E8 0400 R				call print_5 
 0E03  EB 31 90					jmp	m2 
 0E06					m26:	 
 0E06  FE C0					inc	al 
 0E08  38 47 04					cmp	[bx+4],al 
 0E0B  0F 85 0E15 R				jne	m27 
 0E0F  E8 04B1 R				call print_6 
 0E12  EB 22 90					jmp	m2 
 0E15					m27:	 
 0E15  FE C0					inc	al 
 0E17  38 47 04					cmp	[bx+4],al 
 0E1A  0F 85 0E24 R				jne	m28 
 0E1E  E8 0562 R				call print_7 
 0E21  EB 13 90					jmp	m2 
 0E24					m28:	 
 0E24  FE C0					inc	al 
 0E26  38 47 04					cmp	[bx+4],al 
 0E29  0F 85 0E33 R				jne	m29 
 0E2D  E8 05C1 R				call print_8 
 0E30  EB 04 90					jmp	m2 
 0E33					m29:	 
 0E33  E8 0672 R				call print_9 
 0E36					m2: 
					 
					;print a seprator 
 0E36  C7 06 00DD R 0041		mov	start_row,65 
 0E3C  C7 06 00DF R 00BE		mov	start_col,190 
 0E42  E8 0723 R			call print_seperator 
					 
					;print first digit of second value 
 0E45  C7 06 00DD R 0041		mov	start_row,65 
 0E4B  C7 06 00DF R 00DC		mov	start_col,220 
 0E51  E8 006F R			call reset_print 
					 
 0E54  B0 30				mov	al,'0' 
 0E56  38 47 06				cmp	[bx+6],al	 
 0E59  0F 85 0E63 R			jne	s11 
					 
Microsoft (R) Macro Assembler Version 5.00                  11/25/19 00:37:54
                                                             Page     1-44


 0E5D  E8 013D R			call print_0 
 0E60  EB 7C 90				jmp	s1 
					 
 0E63					s11: 
 0E63  FE C0					inc	al 
 0E65  38 47 06					cmp	[bx+6],al 
 0E68  0F 85 0E72 R				jne	s12 
 0E6C  E8 01CC R				call print_1 
 0E6F  EB 6D 90					jmp	s1 
 0E72					s12:	 
 0E72  FE C0					inc	al 
 0E74  38 47 06					cmp	[bx+6],al 
 0E77  0F 85 0E81 R				jne	s13 
 0E7B  E8 022B R				call print_2 
 0E7E  EB 5E 90					jmp	s1 
 0E81					s13:	 
 0E81  FE C0					inc	al 
 0E83  38 47 06					cmp	[bx+6],al 
 0E86  0F 85 0E90 R				jne	s14 
 0E8A  E8 02DC R				call print_3 
 0E8D  EB 4F 90					jmp	s1 
 0E90					s14:	 
 0E90  FE C0					inc	al 
 0E92  38 47 06					cmp	[bx+6],al 
 0E95  0F 85 0E9F R				jne	s15 
 0E99  E8 0375 R				call print_4 
 0E9C  EB 40 90					jmp	s1 
 0E9F					s15:	 
 0E9F  FE C0					inc	al 
 0EA1  38 47 06					cmp	[bx+6],al 
 0EA4  0F 85 0EAE R				jne	s16 
 0EA8  E8 0400 R				call print_5 
 0EAB  EB 31 90					jmp	s1 
 0EAE					s16:	 
 0EAE  FE C0					inc	al 
 0EB0  38 47 06					cmp	[bx+6],al 
 0EB3  0F 85 0EBD R				jne	s17 
 0EB7  E8 04B1 R				call print_6 
 0EBA  EB 22 90					jmp	s1 
 0EBD					s17:	 
 0EBD  FE C0					inc	al 
 0EBF  38 47 06					cmp	[bx+6],al 
 0EC2  0F 85 0ECC R				jne	s18 
 0EC6  E8 0562 R				call print_7 
 0EC9  EB 13 90					jmp	s1 
 0ECC					s18:	 
 0ECC  FE C0					inc	al 
 0ECE  38 47 06					cmp	[bx+6],al 
 0ED1  0F 85 0EDB R				jne	s19 
 0ED5  E8 05C1 R				call print_8 
 0ED8  EB 04 90					jmp	s1 
 0EDB					s19:	 
 0EDB  E8 0672 R				call print_9 
						 
Microsoft (R) Macro Assembler Version 5.00                  11/25/19 00:37:54
                                                             Page     1-45


 0EDE					s1: 
					;print second digit of second value 
 0EDE  C7 06 00DD R 0041		mov	start_row,65 
 0EE4  C7 06 00DF R 00FA		mov	start_col,250 
 0EEA  E8 006F R			call reset_print 
							 
 0EED  B0 30				mov	al,'0' 
 0EEF  38 47 07				cmp	[bx+7],al 
 0EF2  0F 85 0EFC R			jne	s21 
 0EF6  E8 013D R			call print_0 
 0EF9  EB 7C 90				jmp	s2 
						 
 0EFC					s21:	 
 0EFC  FE C0					inc	al 
 0EFE  38 47 07					cmp	[bx+7],al 
 0F01  0F 85 0F0B R				jne	s22 
 0F05  E8 01CC R				call print_1 
 0F08  EB 6D 90					jmp	s2 
 0F0B					s22:	 
 0F0B  FE C0					inc	al 
 0F0D  38 47 07					cmp	[bx+7],al 
 0F10  0F 85 0F1A R				jne	s23 
 0F14  E8 022B R				call print_2 
 0F17  EB 5E 90					jmp	s2 
 0F1A					s23:	 
 0F1A  FE C0					inc	al 
 0F1C  38 47 07					cmp	[bx+7],al 
 0F1F  0F 85 0F29 R				jne	s24 
 0F23  E8 02DC R				call print_3 
 0F26  EB 4F 90					jmp	s2 
 0F29					s24:	 
 0F29  FE C0					inc	al 
 0F2B  38 47 07					cmp	[bx+7],al 
 0F2E  0F 85 0F38 R				jne	s25 
 0F32  E8 0375 R				call print_4 
 0F35  EB 40 90					jmp	s2 
 0F38					s25:	 
 0F38  FE C0					inc	al 
 0F3A  38 47 07					cmp	[bx+7],al 
 0F3D  0F 85 0F47 R				jne	s26 
 0F41  E8 0400 R				call print_5 
 0F44  EB 31 90					jmp	s2 
 0F47					s26:	 
 0F47  FE C0					inc	al 
 0F49  38 47 07					cmp	[bx+7],al 
 0F4C  0F 85 0F56 R				jne	s27 
 0F50  E8 04B1 R				call print_6 
 0F53  EB 22 90					jmp	s2 
 0F56					s27:	 
 0F56  FE C0					inc	al 
 0F58  38 47 07					cmp	[bx+7],al 
 0F5B  0F 85 0F65 R				jne	s28 
 0F5F  E8 0562 R				call print_7 
 0F62  EB 13 90					jmp	s2 
Microsoft (R) Macro Assembler Version 5.00                  11/25/19 00:37:54
                                                             Page     1-46


 0F65					s28:	 
 0F65  FE C0					inc	al 
 0F67  38 47 07					cmp	[bx+7],al 
 0F6A  0F 85 0F74 R				jne	s29 
 0F6E  E8 05C1 R				call print_8 
 0F71  EB 04 90					jmp	s2 
 0F74					s29:	 
 0F74  E8 0672 R				call print_9 
 0F77					s2: 
				 
 0F77				no_ana_alarm: 
 0F77  CF				iret	;interupt return 
 0F78				clock_int	endp 
				 
 0F78				setup_int proc 
				 
					;saves old vector and sets up new vecto
				r 
					;input:	al = interrupt number 
					;		di = address of buffer 
				for old vector 
					;		si = address of buffer 
				containing new vector 
					;save old interrupt vector 
					 
 0F78  B4 35				mov	ah,35h			
					;35h gets vector 
 0F7A  CD 21				int	21h			
						;es:bx = vector 
							 
 0F7C  89 1D				mov	[di],bx			
					;save offset 
 0F7E  8C 45 02				mov	[di+2],es		
					;save segment, di associtaed with es an
				d support string handling operation 
					 
					;setup new vector 
 0F81  8B 14				mov	dx,[si]			
					;dx has offset 
 0F83  1E				push ds				
					;save ds 
 0F84  8E 5C 02				mov	ds,[si+2]		
					;ds has segment number, si associtaed w
				ith ds and support string handling operation 
							 
 0F87  B4 25				mov	ah,25h			
					;25h sets vector, DS:DX = new vector to
				 be used for specified interrupt 
 0F89  CD 21				int	21h 
							 
 0F8B  1F				pop	ds			
						;restore ds 
 0F8C  C3				ret 
					 
Microsoft (R) Macro Assembler Version 5.00                  11/25/19 00:37:54
                                                             Page     1-47


 0F8D				setup_int endp 
				;//MAIN FUNCTION//MAIN FUNCTION//MAIN FUNCTION/
				/MAIN FUNCTION//MAIN FUNCTION//MAIN FUNCTION//M
				AIN FUNCTION//MAIN FUNCTION//MAIN FUNC
 0F8D				main proc 
 0F8D  B8 ---- R			mov ax,@data 
 0F90  8E D8				mov ds,ax          
					 
 0F92				show_menu: 
				 
 0F92  E8 000A R			call clr_src 
 0F95  E8 102C R			call menu 
				 
 0F98  B8 0000				mov ax,0000h 
 0F9B  CD 33				int 33h 
					 
 0F9D  B8 0001				mov ax,0001h 
 0FA0  CD 33				int 33h 
					 
 0FA2					chk_mouse: 
 0FA2  E8 10F0 R			call mouse 
					 
 0FA5  E8 1143 R			call chk_show_clock 
 0FA8  80 3E 00D6 R 01			cmp is_show_clock,1b 
 0FAD  0F 84 0FEB R			je call_show_clock 
					 
 0FB1  E8 13B4 R			call chk_set_alarm 
 0FB4  80 3E 00D9 R 01			cmp is_set_alarm,1b 
 0FB9  0F 84 0FFA R			je call_set_alarm	 
					 
 0FBD  E8 1545 R			call chk_timer 
 0FC0  80 3E 00DA R 01			cmp is_timer,1b 
 0FC5  0F 84 1009 R			je call_timer 
					 
 0FC9  E8 18B3 R			call chk_stopwatch 
 0FCC  80 3E 00DB R 01			cmp is_stopwatch,1b 
 0FD1  0F 84 1014 R			je call_stopwatch	 
					 
 0FD5  E8 1125 R			call check_exit 
					 
 0FD8  80 3E 00DC R 01			cmp is_exit,1b 
 0FDD  C6 06 00DC R 00			mov is_exit,0b 
 0FE2  0F 85 0FE9 R			jne re_chk_press 
				 
 0FE6  EB 37 90				jmp exit 
					 
 0FE9				re_chk_press: 
 0FE9  EB B7				jmp chk_mouse 
				 
 0FEB				call_show_clock: 
 0FEB  B8 0002				mov ax,0002h 
 0FEE  CD 33				int 33h 
 0FF0  E8 119F R			call select_clock 
 0FF3  C6 06 00D6 R 00			mov is_show_clock,0b	 
Microsoft (R) Macro Assembler Version 5.00                  11/25/19 00:37:54
                                                             Page     1-48


					 
 0FF8  EB 98				jmp show_menu 
					 
 0FFA				call_set_alarm: 
 0FFA  B8 0002				mov ax,0002h 
 0FFD  CD 33				int 33h 
 0FFF  E8 1401 R			call set_alarm 
 1002  C6 06 00D9 R 00			mov is_set_alarm,0b	 
 1007  EB 89				jmp show_menu 
					 
 1009				call_timer: 
 1009  E8 165E R			call timer 
 100C  C6 06 00DA R 00			mov is_timer,0b 
 1011  E9 0F92 R			jmp show_menu 
					 
 1014				call_stopwatch: 
 1014  E8 1933 R			call stopwatch 
 1017  C6 06 00DB R 00			mov is_stopwatch,0b	 
 101C  E9 0F92 R			jmp show_menu 
					 
 101F				exit:	 
 101F  B8 0002				mov ax,0002h 
 1022  CD 33				int 33h 
					 
 1024  E8 000A R			call clr_src 
 1027  B8 4C00				mov	ax,4c00h      
 102A  CD 21				int 21h     
					 
 102C				main endp 
				;//MAIN FUNCTION//MAIN FUNCTION//MAIN FUNCTION/
				/MAIN FUNCTION//MAIN FUNCTION//MAIN FUNCTION//M
				AIN FUNCTION//MAIN FUNCTION//MAIN FUNC
				 
 102C				menu proc 
 102C  B8 0600				mov ax,0600h 
 102F  8A 3E 00E2 R			mov bh,option_color 
 1033  B9 0508				mov cx,0508h	;ul r:c 
 1036  BA 0546				mov dx,0546h	;lr r:c 
 1039  CD 10				int 10h 
					 
 103B  B6 05				mov dh,05h		;set row 
 103D  B2 24				mov dl,24h		;set column 
 103F  E8 001F R			call res_cur 
					 
 1042  8D 16 0000 R			lea dx,clock_title 
 1046  E8 0000 R			call print 
					 
 1049  B8 0600				mov ax,0600h 
 104C  8A 3E 00E2 R			mov bh,option_color 
 1050  B9 0A08				mov cx,0a08h	;ul r:c 
 1053  BA 0A20				mov dx,0a20h	;lr r:c 
 1056  CD 10				int 10h	 
					 
 1058  B6 0A				mov dh,0ah		;set row 
Microsoft (R) Macro Assembler Version 5.00                  11/25/19 00:37:54
                                                             Page     1-49


 105A  B2 10				mov dl,10h		;set column 
 105C  E8 001F R			call res_cur 
					 
 105F  8D 16 000A R			lea dx,show_clock_str 
 1063  E8 0000 R			call print 
					 
 1066  B8 0600				mov ax,0600h 
 1069  8A 3E 00E2 R			mov bh,option_color 
 106D  B9 0A30				mov cx,0a30h	;ul r:c 
 1070  BA 0A46				mov dx,0a46h	;lr r:c 
 1073  CD 10				int 10h 
					 
 1075  B6 0A				mov dh,0ah		;set row 
 1077  B2 37				mov dl,37h		;set column 
 1079  E8 001F R			call res_cur 
					 
 107C  8D 16 0015 R			lea dx,set_alarm_str 
 1080  E8 0000 R			call print 
					 
 1083  B8 0600				mov ax,0600h 
 1086  8A 3E 00E2 R			mov bh,option_color 
 108A  B9 0E08				mov cx,0e08h	;ul r:c 
 108D  BA 0E20				mov dx,0e20h	;lr r:c 
 1090  CD 10				int 10h	 
					 
 1092  B6 0E				mov dh,0eh		;set row 
 1094  B2 12				mov dl,12h		;set column 
 1096  E8 001F R			call res_cur 
					 
 1099  8D 16 001F R			lea dx,timer_str 
 109D  E8 0000 R			call print 
					 
 10A0  B8 0600				mov ax,0600h 
 10A3  8A 3E 00E2 R			mov bh,option_color 
 10A7  B9 0E30				mov cx,0e30h	;ul r:c 
 10AA  BA 0E46				mov dx,0e46h	;lr r:c 
 10AD  CD 10				int 10h	 
					 
 10AF  B6 0E				mov dh,0eh		;set row 
 10B1  B2 37				mov dl,37h		;set column 
 10B3  E8 001F R			call res_cur 
					 
 10B6  8D 16 0025 R			lea dx,stopwatch_str 
 10BA  E8 0000 R			call print	 
					 
 10BD  B8 0600				mov ax,0600h 
 10C0  8A 3E 00E2 R			mov bh,option_color 
 10C4  B9 1208				mov cx,1208h	;ul r:c 
 10C7  BA 1220				mov dx,1220h	;lr r:c 
 10CA  CD 10				int 10h 
					 
 10CC  B6 12				mov dh,12h		;set row 
 10CE  B2 12				mov dl,12h		;set column 
 10D0  E8 001F R			call res_cur 
Microsoft (R) Macro Assembler Version 5.00                  11/25/19 00:37:54
                                                             Page     1-50


					 
 10D3  8D 16 0049 R			lea dx,quit_str 
 10D7  E8 0000 R			call print	 
					 
 10DA  B6 16				mov dh,16h		;set row 
 10DC  B2 08				mov dl,08h		;set column 
 10DE  E8 001F R			call res_cur 
					 
 10E1  8D 16 0061 R			lea dx,wait_respond_str 
 10E5  E8 0000 R			call print	 
					 
 10E8  B6 16				mov dh,16h		;set row 
 10EA  B2 28				mov dl,28h		;set column 
 10EC  E8 001F R			call res_cur 
					 
 10EF  C3				ret 
 10F0				menu endp 
				 
 10F0				mouse proc 
 10F0					chk_press: 
 10F0  B8 0003				mov ax, 3 
 10F3  CD 33				int 33h     			;Check 
				the mouse 
 10F5  83 FB 00				cmp bx, 0   			;See if
				 button is pressed 
 10F8  74 F6				je chk_press    		;If Not
				 pressed, go back and check again 
				 
 10FA  33 DB				xor bx, bx  			;Okay, 
				button is pressed, clear the result 
				 
 10FC					chk_release: 
 10FC  B8 0003				mov ax, 3 
 10FF  CD 33				int 33h     			;Check 
				the mouse 
 1101  83 FB 00				cmp bx, 0   			;See if
				 button is released 
 1104  75 F6				jne chk_release   		;If NOT
				 equal, then not released, go check again. 
				 
 1106  33 DB				xor bx, bx  			;button
				 is released, clear the result 
					 
 1108  89 0E 00C5 R			mov mouse_col,cx 
 110C  89 16 00C3 R			mov mouse_row,dx 
				 
					;divide 8 is for text mode 
 1110  A1 00C5 R			mov ax,mouse_col 
 1113  B2 08				mov dl,8 
 1115  F6 F2				div dl 
 1117  A3 00C5 R			mov mouse_col,ax 
					 
 111A  A1 00C3 R			mov ax,mouse_row 
 111D  B2 08				mov dl,8 
Microsoft (R) Macro Assembler Version 5.00                  11/25/19 00:37:54
                                                             Page     1-51


 111F  F6 F2				div dl 
 1121  A3 00C3 R			mov mouse_row,ax	 
				 
 1124  C3				ret 
 1125				mouse endp 
				 
 1125				check_exit proc 
 1125  A1 00C5 R			mov ax,mouse_col		;real v
				alue store in al 
 1128  3C 08				cmp al,08h			
					 
 112A  0F 8C 1142 R			jl not_exit 
 112E  3C 20				cmp al,20h 
 1130  0F 8F 1142 R			jg not_exit 
 1134  A1 00C3 R			mov ax,mouse_row		;real v
				alue store in al	 
 1137  3C 12				cmp al,12h 
 1139  0F 85 1142 R			jne not_exit 
 113D  C6 06 00DC R 01			mov is_exit,1b 
 1142				not_exit: 
 1142  C3				ret 
 1143				check_exit endp 
				 
 1143				chk_show_clock proc 
 1143  A1 00C5 R			mov ax,mouse_col		;real v
				alue store in al 
 1146  3C 08				cmp al,08h			
					 
 1148  0F 8C 1160 R			jl not_show_clock 
 114C  3C 20				cmp al,20h 
 114E  0F 8F 1160 R			jg not_show_clock 
 1152  A1 00C3 R			mov ax,mouse_row		;real v
				alue store in al	 
 1155  3C 0A				cmp al,0ah 
 1157  0F 85 1160 R			jne not_show_clock 
 115B  C6 06 00D6 R 01			mov is_show_clock,1b 
 1160				not_show_clock: 
 1160  C3				ret 
 1161				chk_show_clock endp 
				 
 1161				chk_select_clock proc 
 1161  A1 00C5 R			mov ax,mouse_col		;real v
				alue store in al 
 1164  3C 08				cmp al,08h			
					 
 1166  0F 8C 1181 R			jl not_analog 
 116A  3C 20				cmp al,20h 
 116C  0F 8F 1181 R			jg not_analog 
 1170  A1 00C3 R			mov ax,mouse_row		;real v
				alue store in al	 
 1173  3C 0A				cmp al,0ah 
 1175  0F 85 1181 R			jne not_analog 
 1179  C6 06 00D7 R 01			mov is_analog,1b 
 117E  EB 1E 90				jmp not_digital 
Microsoft (R) Macro Assembler Version 5.00                  11/25/19 00:37:54
                                                             Page     1-52


 1181				not_analog:	 
 1181  A1 00C5 R			mov ax,mouse_col		;real v
				alue store in al 
 1184  3C 30				cmp al,30h			
					 
 1186  0F 8C 119E R			jl not_digital 
 118A  3C 46				cmp al,46h 
 118C  0F 8F 119E R			jg not_digital 
 1190  A1 00C3 R			mov ax,mouse_row		;real v
				alue store in al	 
 1193  3C 0A				cmp al,0ah 
 1195  0F 85 119E R			jne not_digital 
 1199  C6 06 00D8 R 01			mov is_digital,1b 
 119E				not_digital: 
 119E  C3				ret 
 119F				chk_select_clock endp 
				 
 119F				select_clock proc 
 119F  E8 000A R			call clr_src 
					 
 11A2  B8 0600				mov ax,0600h 
 11A5  8A 3E 00E2 R			mov bh,option_color 
 11A9  B9 0A08				mov cx,0a08h	;ul r:c 
 11AC  BA 0A20				mov dx,0a20h	;lr r:c 
 11AF  CD 10				int 10h	 
					 
 11B1  B6 0A				mov dh,0ah		;set row 
 11B3  B2 11				mov dl,11h		;set column 
 11B5  E8 001F R			call res_cur 
					 
 11B8  8D 16 00C7 R			lea dx,analog_str 
 11BC  E8 0000 R			call print 
					 
 11BF  B8 0600				mov ax,0600h 
 11C2  8A 3E 00E2 R			mov bh,option_color 
 11C6  B9 0A30				mov cx,0a30h	;ul r:c 
 11C9  BA 0A46				mov dx,0a46h	;lr r:c 
 11CC  CD 10				int 10h 
					 
 11CE  B6 0A				mov dh,0ah		;set row 
 11D0  B2 38				mov dl,38h		;set column 
 11D2  E8 001F R			call res_cur 
					 
 11D5  8D 16 00CE R			lea dx,digital_str 
 11D9  E8 0000 R			call print 
					 
 11DC  B6 16				mov dh,16h		;set row 
 11DE  B2 00				mov dl,00h		;set column 
 11E0  E8 001F R			call res_cur 
					 
 11E3  8D 16 0081 R			lea dx,wait_respond_vga_str 
 11E7  E8 0000 R			call print	 
					 
 11EA  B6 16				mov dh,16h		;set row 
Microsoft (R) Macro Assembler Version 5.00                  11/25/19 00:37:54
                                                             Page     1-53


 11EC  B2 28				mov dl,28h		;set column 
 11EE  E8 001F R			call res_cur	 
					 
 11F1  B8 0000				mov ax,0000h 
 11F4  CD 33				int 33h		 
 11F6					chk_mouse_8: 
				 
 11F6  B8 0001				mov ax,0001h 
 11F9  CD 33				int 33h		 
 11FB  E8 10F0 R			call mouse 
					 
 11FE  E8 1161 R			call chk_select_clock 
 1201  80 3E 00D7 R 01			cmp is_analog,1b 
 1206  0F 84 1215 R			je call_analog_clock 
					 
 120A  80 3E 00D8 R 01			cmp is_digital,1b 
 120F  0F 84 1220 R			je call_digital_clock 
					 
 1213				re_chk_press_8: 
 1213  EB E1				jmp chk_mouse_8	 
					 
 1215				call_analog_clock: 
 1215  E8 1252 R			call analog_clock 
 1218  C6 06 00D7 R 00			mov is_analog,0b		 
 121D  EB 09 90				jmp return_8 
					 
 1220				call_digital_clock: 
 1220  E8 12F3 R			call digital_clock 
 1223  C6 06 00D8 R 00			mov is_digital,0b	 
					 
 1228				return_8: 
 1228  B8 0002				mov ax,0002h 
 122B  CD 33				int 33h	 
 122D  C3				ret 
 122E				select_clock endp 
				 
 122E				check_ana_exit proc 
 122E  A1 00C5 R			mov ax,mouse_col		;real v
				alue store in al 
 1231  3C 02				cmp al,02h			
					 
 1233  0F 8C 1251 R			jl not_ana_exit 
 1237  3C 0A				cmp al,0ah 
 1239  0F 8F 1251 R			jg not_ana_exit 
 123D  A1 00C3 R			mov ax,mouse_row		;real v
				alue store in al	 
 1240  3C 32				cmp al,32h 
 1242  0F 84 124C R			je chk_ana_2_line 
 1246  3C 33				cmp al,33h 
 1248  0F 85 1251 R			jne not_ana_exit	 
					 
 124C				chk_ana_2_line:	 
					 
 124C  C6 06 00DC R 01			mov is_exit,1b 
Microsoft (R) Macro Assembler Version 5.00                  11/25/19 00:37:54
                                                             Page     1-54


 1251				not_ana_exit: 
 1251  C3				ret 
 1252				check_ana_exit endp 
				 
 1252				analog_clock proc 
 1252  B8 0012				mov ax,0012h 
 1255  CD 10				int 10h 
					 
 1257  BA 0010				mov dx,0010h 
 125A  E8 001F R			call res_cur 
				 
 125D  66| B8 0000005A			mov eax,90 
 1263  66| A3 0306 R			mov theta,eax 
					 
 1267  E8 1D2B R			call circle 
 126A  E8 1DAB R			call analog_time_num 
				 
 126D  E8 1CAF R			call sec_indicator 
 1270  E8 1C33 R			call hour_indicator	 
					 
 1273  B4 02				mov ah,02h			
					;get real time 
 1275  CD 1A				int 1ah                	;ch = hr, cl = 
				min, dh = sec 
 1277  8A D6				mov dl,dh 
 1279  E8 0026 R			call bcd2dec 
 127C  8A F2				mov dh,dl 
 127E  88 36 02DE R			mov temp_sec_ana,dh	 
 1282  C6 06 02DF R 01			mov is_sec_pass_ana,1b 
					 
 1287  C7 06 0160 R 0B23 R		mov	new_vector,offset clock_int 
 128D  C7 06 0162 R ---- R		mov	new_vector+2,seg clock_int 
					 
 1293  8D 3E 015C R			lea	di,old_vector		;di poi
				nts to vector buffer 
 1297  8D 36 0160 R			lea	si,new_vector		;si poi
				nts to new vector 
 129B  B0 1C				mov	al,1ch			
					;timer interrupt 
 129D  E8 0F78 R			call setup_int			;setup 
				new interrupt vector 
						 
 12A0  B6 19				mov dh,19h		;set row 
 12A2  B2 02				mov dl,02h		;set column 
 12A4  E8 001F R			call res_cur 
					 
 12A7  8D 16 0054 R			lea dx,back_vga_str 
 12AB  E8 0000 R			call print			 
						 
 12AE  B6 1C				mov dh,1ch		;set row 
 12B0  B2 00				mov dl,00h		;set column 
 12B2  E8 001F R			call res_cur 
					 
 12B5  8D 16 0081 R			lea dx,wait_respond_vga_str 
Microsoft (R) Macro Assembler Version 5.00                  11/25/19 00:37:54
                                                             Page     1-55


 12B9  E8 0000 R			call print	 
					 
 12BC				chk_mouse_9: 
 12BC  B8 0001				mov ax,0001h 
 12BF  CD 33				int 33h	 
 12C1  E8 10F0 R			call mouse 
					 
 12C4  E8 122E R			call check_ana_exit 
					 
 12C7  80 3E 00DC R 01			cmp is_exit,1b 
 12CC  C6 06 00DC R 00			mov is_exit,0b 
 12D1  0F 85 12D8 R			jne re_chk_press_9 
				 
 12D5  EB 03 90				jmp return_9 
					 
 12D8				re_chk_press_9: 
					;invoker alarm 
					;cmp invoker_alarm,1b 
					;jne chk_mouse_9 
					;mov invoker_alarm,0b 
					;call two_tigers 
					 
 12D8  EB E2				jmp chk_mouse_9 
				 
 12DA				return_9:	 
 12DA  B8 0002				mov ax,0002h 
 12DD  CD 33				int 33h		 
					 
					;restore old interrupt vector 
 12DF  8D 3E 0160 R			lea	di,new_vector		 
 12E3  8D 36 015C R			lea	si,old_vector	 
 12E7  B0 1C				mov	al,1ch			
					;timer interrupt 
 12E9  E8 0F78 R			call setup_int			;restor
				e old vector 
					 
					;reset to original mode 
 12EC  B4 00				mov	ah,0 
 12EE  B0 03				mov	al,3 
 12F0  CD 10				int	10h		 
				 
 12F2  C3				ret 
 12F3				analog_clock endp 
				 
 12F3				digital_clock proc 
					;set to graphics mode vga (320x200 256 
				color) 
 12F3  B4 00				mov	ah,0			
					;set console mode 
 12F5  B0 13				mov	al,13h			
					;to 320x200 256 
 12F7  CD 10				int	10h 
				 
					row_drawer 	0, 0, 32000, clock_colo
Microsoft (R) Macro Assembler Version 5.00                  11/25/19 00:37:54
                                                             Page     1-56


				r		;15h	 
 12F9  B4 0C                 1		mov	ah,0ch			
					;draw pixel 
 12FB  B7 00                 1		mov	bh,0			
					;page 
 12FD  A0 00E3 R             1		mov	al,clock_color		
					;color 
 1300  B9 0000               1		mov cx,0		;column 
 1303  BA 0000               1		mov	dx,0			
					;row 
 1306                        1		??0030 : 
 1306  CD 10                 1			int	10h		
						;draw 
 1308  41                    1			inc cx 
 1309  81 F9 7D00            1			cmp cx, 32000 
 130D  7E F7                 1			jle ??0030 
					row_drawer 	100, 0, 32000, clock_co
				lor		;320 = one whole line	 
 130F  B4 0C                 1		mov	ah,0ch			
					;draw pixel 
 1311  B7 00                 1		mov	bh,0			
					;page 
 1313  A0 00E3 R             1		mov	al,clock_color		
					;color 
 1316  B9 0000               1		mov cx,0		;column 
 1319  BA 0064               1		mov	dx,100			
					;row 
 131C                        1		??0031 : 
 131C  CD 10                 1			int	10h		
						;draw 
 131E  41                    1			inc cx 
 131F  81 F9 7D00            1			cmp cx, 32000 
 1323  7E F7                 1			jle ??0031 
					 
 1325  E8 1A85 R			call get_date 
 1328  8D 16 00F9 R			lea dx,date_buf 
 132C  E8 0000 R			call print	 
					 
 132F  E8 1A1A R			call chk_day	 
					 
					;setup interrupt procedure by 
					;placing segment:offset of clock_int in
				 new_vec 
					 
 1332  C7 06 0160 R 0B23 R		mov	new_vector,offset clock_int 
 1338  C7 06 0162 R ---- R		mov	new_vector+2,seg clock_int 
					 
 133E  8D 3E 015C R			lea	di,old_vector		;di poi
				nts to vector buffer 
 1342  8D 36 0160 R			lea	si,new_vector		;si poi
				nts to new vector 
 1346  B0 1C				mov	al,1ch			
					;timer interrupt 
 1348  E8 0F78 R			call setup_int			;setup 
Microsoft (R) Macro Assembler Version 5.00                  11/25/19 00:37:54
                                                             Page     1-57


				new interrupt vector 
					 
 134B				con3:	 
				 
 134B  B6 12				mov dh,12h		;set row 
 134D  B2 04				mov dl,04h		;set column 
 134F  E8 001F R			call res_cur 
					 
 1352  8D 16 0054 R			lea dx,back_vga_str 
 1356  E8 0000 R			call print	 
					 
 1359  B6 16				mov dh,16h		;set row 
 135B  B2 00				mov dl,00h		;set column 
 135D  E8 001F R			call res_cur 
					 
 1360  8D 16 0081 R			lea dx,wait_respond_vga_str 
 1364  E8 0000 R			call print	 
					 
 1367  B6 16				mov dh,16h		;set row 
 1369  B2 28				mov dl,28h		;set column 
 136B  E8 001F R			call res_cur 
					 
 136E				chk_mouse_4: 
 136E  B8 0001				mov ax,0001h 
 1371  CD 33				int 33h	 
 1373  E8 10F0 R			call mouse 
					 
 1376  E8 1125 R			call check_exit 
					 
 1379  80 3E 00DC R 01			cmp is_exit,1b 
 137E  C6 06 00DC R 00			mov is_exit,0b 
 1383  0F 85 138A R			jne re_chk_press_4 
				 
 1387  EB 12 90				jmp return_4 
					 
 138A				re_chk_press_4: 
					;invoker alarm 
 138A  80 3E 023C R 01			cmp invoker_alarm,1b 
 138F  75 DD				jne chk_mouse_4 
 1391  C6 06 023C R 00			mov invoker_alarm,0b 
 1396  E8 1E6F R			call two_tigers 
					 
 1399  EB D3				jmp chk_mouse_4 
				 
 139B				return_4:	 
 139B  B8 0002				mov ax,0002h 
 139E  CD 33				int 33h 
					 
					;read keyboard, return al = char 
					;mov	ah,0 
					;int	16h 
					 
					;restore old interrupt vector 
 13A0  8D 3E 0160 R			lea	di,new_vector		 
Microsoft (R) Macro Assembler Version 5.00                  11/25/19 00:37:54
                                                             Page     1-58


 13A4  8D 36 015C R			lea	si,old_vector	 
 13A8  B0 1C				mov	al,1ch			
					;timer interrupt 
 13AA  E8 0F78 R			call setup_int			;restor
				e old vector 
					 
					;reset to original mode 
 13AD  B4 00				mov	ah,0 
 13AF  B0 03				mov	al,3 
 13B1  CD 10				int	10h	 
 13B3  C3				ret 
 13B4				digital_clock endp 
				 
 13B4				chk_set_alarm proc 
 13B4  A1 00C5 R			mov ax,mouse_col		;real v
				alue store in al 
 13B7  3C 30				cmp al,30h			
					 
 13B9  0F 8C 13D1 R			jl not_set_alarm 
 13BD  3C 46				cmp al,46h 
 13BF  0F 8F 13D1 R			jg not_set_alarm 
 13C3  A1 00C3 R			mov ax,mouse_row		;real v
				alue store in al	 
 13C6  3C 0A				cmp al,0ah 
 13C8  0F 85 13D1 R			jne not_set_alarm 
 13CC  C6 06 00D9 R 01			mov is_set_alarm,1b 
 13D1				not_set_alarm: 
 13D1  C3				ret 
 13D2				chk_set_alarm endp 
				 
 13D2				get_alarm proc 
 13D2  B4 00				mov ah,0 
 13D4  A0 00AC R			mov al,input[0] 
 13D7  2C 30				sub al,30h 
 13D9  F6 26 00C0 R			mul ten 
 13DD  8A 16 00AD R			mov dl,input[1] 
 13E1  80 EA 30				sub dl,30h 
 13E4  02 C2				add al,dl 
 13E6  A2 0239 R			mov alarm_hh,al 
					 
 13E9  B4 00				mov ah,0 
 13EB  A0 00AF R			mov al,input[3] 
 13EE  2C 30				sub al,30h 
 13F0  F6 26 00C0 R			mul ten 
 13F4  8A 16 00B0 R			mov dl,input[4] 
 13F8  80 EA 30				sub dl,30h 
 13FB  02 C2				add al,dl 
 13FD  A2 023A R			mov alarm_mm,al	 
 1400  C3				ret 
 1401				get_alarm endp 
				 
 1401				set_alarm proc 
 1401  E8 000A R			call clr_src 
					 
Microsoft (R) Macro Assembler Version 5.00                  11/25/19 00:37:54
                                                             Page     1-59


 1404  80 3E 023B R 01			cmp is_alarm_set,1b 
 1409  0F 85 1433 R			jne no_alarm 
					 
 140D  B6 09				mov dh,09h		;set row 
 140F  B2 09				mov dl,09h		;set column 
 1411  E8 001F R			call res_cur	 
					 
 1414  8D 16 01E8 R			lea dx,alarm_on_str 
 1418  E8 0000 R			call print	 
 141B  8D 16 0104 R			lea dx,alarm_buf 
 141F  E8 0000 R			call print	 
				 
 1422  B6 0A				mov dh,0ah		;set row 
 1424  B2 09				mov dl,09h		;set column 
 1426  E8 001F R			call res_cur	 
					 
 1429  8D 16 0204 R			lea dx,alarm_cancel_str 
 142D  E8 0000 R			call print	 
					 
 1430  EB 0F 90				jmp alarm_menu 
					 
 1433				no_alarm:	 
 1433  B6 0A				mov dh,0ah		;set row 
 1435  B2 09				mov dl,09h		;set column 
 1437  E8 001F R			call res_cur	 
					 
 143A  8D 16 0222 R			lea dx,alarm_off_str 
 143E  E8 0000 R			call print	 
				 
 1441				alarm_menu:	 
 1441  B6 0C				mov dh,0ch		;set row 
 1443  B2 09				mov dl,09h		;set column 
 1445  E8 001F R			call res_cur	 
					 
 1448  8D 16 0164 R			lea dx,input_alarm_str 
 144C  E8 0000 R			call print	 
 144F  8D 16 00AA R			lea dx,arr 
 1453  E8 0005 R			call scan 
					 
 1456  80 3E 023B R 00			cmp is_alarm_set,0b 
 145B  0F 84 1495 R			je go_alarm 
 145F  80 3E 00AC R 2D			cmp input[0],'-' 
 1464  0F 84 146B R			je cancel_alarm 
 1468  EB 2B 90				jmp go_alarm 
					 
 146B				cancel_alarm: 
 146B  C6 06 0104 R 39			mov alarm_buf[0],'9' 
 1470  C6 06 0105 R 39			mov alarm_buf[1],'9' 
 1475  C6 06 0107 R 39			mov alarm_buf[3],'9'	 
 147A  C6 06 0108 R 39			mov alarm_buf[4],'9' 
					 
 147F  C6 06 023B R 00			mov is_alarm_set,0b 
					 
 1484  B6 0E				mov dh,0eh		;set row 
Microsoft (R) Macro Assembler Version 5.00                  11/25/19 00:37:54
                                                             Page     1-60


 1486  B2 09				mov dl,09h		;set column 
 1488  E8 001F R			call res_cur 
					 
 148B  8D 16 01CB R			lea dx,alarm_cancel_ok_str 
 148F  E8 0000 R			call print 
					 
 1492  EB 5B 90				jmp con2 
					 
 1495				go_alarm:	 
 1495  E8 13D2 R			call get_alarm 
					 
 1498  B4 2D				mov ah,2dh 
 149A  8A 2E 0239 R			mov ch,alarm_hh 
 149E  8A 0E 023A R			mov cl,alarm_mm 
 14A2  CD 21				int 21h 
					 
 14A4  80 3E 00AE R 3A			cmp input[2],':' 
 14A9  0F 85 14B3 R			jne wrong_format 
					 
 14AD  3C 00				cmp al,00h 
 14AF  0F 84 14C4 R			je alarm_ok 
					 
 14B3				wrong_format:	 
 14B3  B6 0E				mov dh,0eh		;set row 
 14B5  B2 09				mov dl,09h		;set column 
 14B7  E8 001F R			call res_cur 
					 
 14BA  8D 16 01AF R			lea dx,alarm_fail_str 
 14BE  E8 0000 R			call print	 
				 
 14C1  EB 2C 90				jmp con2 
					 
 14C4				alarm_ok: 
				 
 14C4  A0 00AC R			mov al,input[0] 
 14C7  A2 0104 R			mov alarm_buf[0],al 
 14CA  A0 00AD R			mov al,input[1] 
 14CD  A2 0105 R			mov alarm_buf[1],al 
 14D0  A0 00AF R			mov al,input[3] 
 14D3  A2 0107 R			mov alarm_buf[3],al	 
 14D6  A0 00B0 R			mov al,input[4] 
 14D9  A2 0108 R			mov alarm_buf[4],al 
					 
 14DC  C6 06 023B R 01			mov is_alarm_set,1b 
					 
 14E1  B6 0E				mov dh,0eh		;set row 
 14E3  B2 09				mov dl,09h		;set column 
 14E5  E8 001F R			call res_cur 
					 
 14E8  8D 16 0195 R			lea dx,alarm_ok_str 
 14EC  E8 0000 R			call print 
					 
 14EF				con2:	 
					 
Microsoft (R) Macro Assembler Version 5.00                  11/25/19 00:37:54
                                                             Page     1-61


 14EF  B8 0600				mov ax,0600h 
 14F2  8A 3E 00E2 R			mov bh,option_color 
 14F6  B9 1208				mov cx,1208h	;ul r:c 
 14F9  BA 1220				mov dx,1220h	;lr r:c 
 14FC  CD 10				int 10h 
					 
 14FE  B6 12				mov dh,12h		;set row 
 1500  B2 13				mov dl,13h		;set column 
 1502  E8 001F R			call res_cur 
					 
 1505  8D 16 004F R			lea dx,back_str 
 1509  E8 0000 R			call print	 
					 
 150C  B6 16				mov dh,16h		;set row 
 150E  B2 08				mov dl,08h		;set column 
 1510  E8 001F R			call res_cur 
					 
 1513  8D 16 0061 R			lea dx,wait_respond_str 
 1517  E8 0000 R			call print	 
					 
 151A  B6 16				mov dh,16h		;set row 
 151C  B2 28				mov dl,28h		;set column 
 151E  E8 001F R			call res_cur 
					 
 1521				chk_mouse_2: 
 1521  B8 0001				mov ax,0001h 
 1524  CD 33				int 33h	 
 1526  E8 10F0 R			call mouse 
					 
 1529  E8 1125 R			call check_exit 
					 
 152C  80 3E 00DC R 01			cmp is_exit,1b 
 1531  C6 06 00DC R 00			mov is_exit,0b 
 1536  0F 85 153D R			jne re_chk_press_2 
				 
 153A  EB 03 90				jmp return_2 
					 
 153D				re_chk_press_2: 
 153D  EB E2				jmp chk_mouse_2 
				 
 153F				return_2:	 
 153F  B8 0002				mov ax,0002h 
 1542  CD 33				int 33h 
 1544  C3				ret 
 1545				set_alarm endp 
				 
 1545				chk_timer proc 
 1545  A1 00C5 R			mov ax,mouse_col		;real v
				alue store in al 
 1548  3C 08				cmp al,08h			
					 
 154A  0F 8C 1562 R			jl not_timer 
 154E  3C 20				cmp al,20h 
 1550  0F 8F 1562 R			jg not_timer 
Microsoft (R) Macro Assembler Version 5.00                  11/25/19 00:37:54
                                                             Page     1-62


 1554  A1 00C3 R			mov ax,mouse_row		;real v
				alue store in al	 
 1557  3C 0E				cmp al,0eh 
 1559  0F 85 1562 R			jne not_timer 
 155D  C6 06 00DA R 01			mov is_timer,1b 
 1562				not_timer: 
 1562  C3				ret 
 1563				chk_timer endp 
				 
 1563				timer_btn proc 
 1563  A1 00C5 R			mov ax,mouse_col		;real v
				alue store in al 
 1566  3C 08				cmp al,08h			
					 
 1568  0F 8C 159E R			jl chk_stop_2 
 156C  3C 17				cmp al,17h 
 156E  0F 8F 159E R			jg chk_stop_2 
 1572  A1 00C3 R			mov ax,mouse_row		;real v
				alue store in al	 
 1575  3C 04				cmp al,04h 
 1577  0F 85 159E R			jne chk_stop_2 
 157B  80 3E 02CF R 00			cmp simulate_timer_hh,0 
 1580  0F 85 1599 R			jne not_zero 
 1584  80 3E 02D0 R 00			cmp simulate_timer_mm,0 
 1589  0F 85 1599 R			jne not_zero 
 158D  80 3E 02D1 R 00			cmp simulate_timer_ss,0 
 1592  0F 85 1599 R			jne not_zero	 
 1596  EB 06 90				jmp chk_stop_2 
 1599				not_zero:	 
 1599  C6 06 02DC R 01			mov is_timer_start,1b 
 159E				chk_stop_2: 
 159E  A1 00C5 R			mov ax,mouse_col		;real v
				alue store in al 
 15A1  3C 20				cmp al,20h			
					 
 15A3  0F 8C 15BB R			jl chk_reset_2 
 15A7  3C 2F				cmp al,2fh 
 15A9  0F 8F 15BB R			jg chk_reset_2 
 15AD  A1 00C3 R			mov ax,mouse_row		;real v
				alue store in al	 
 15B0  3C 04				cmp al,04h 
 15B2  0F 85 15BB R			jne chk_reset_2 
 15B6  C6 06 02DC R 00			mov is_timer_start,0b 
 15BB				chk_reset_2: 
 15BB  A1 00C5 R			mov ax,mouse_col		;real v
				alue store in al 
 15BE  3C 38				cmp al,38h			
					 
 15C0  0F 8C 15DD R			jl chk_edit 
 15C4  3C 45				cmp al,45h 
 15C6  0F 8F 15DD R			jg chk_edit 
 15CA  A1 00C3 R			mov ax,mouse_row		;real v
				alue store in al	 
 15CD  3C 04				cmp al,04h 
Microsoft (R) Macro Assembler Version 5.00                  11/25/19 00:37:54
                                                             Page     1-63


 15CF  0F 85 15DD R			jne chk_edit 
 15D3  C6 06 02DC R 00			mov is_timer_start,0b 
 15D8  C6 06 02DD R 01			mov is_timer_reset,1b 
 15DD				chk_edit:	 
 15DD  A1 00C5 R			mov ax,mouse_col		;real v
				alue store in al 
 15E0  3C 30				cmp al,30h			
					 
 15E2  0F 8C 15FA R			jl chk_exit 
 15E6  3C 47				cmp al,47h 
 15E8  0F 8F 15FA R			jg chk_exit 
 15EC  A1 00C3 R			mov ax,mouse_row		;real v
				alue store in al	 
 15EF  3C 12				cmp al,12h 
 15F1  0F 85 15FA R			jne chk_exit 
 15F5  C6 06 02CD R 01			mov is_edit,1b 
 15FA				chk_exit: 
 15FA  A1 00C5 R			mov ax,mouse_col		;real v
				alue store in al 
 15FD  3C 08				cmp al,08h			
					 
 15FF  0F 8C 1617 R			jl con7 
 1603  3C 20				cmp al,20h 
 1605  0F 8F 1617 R			jg con7 
 1609  A1 00C3 R			mov ax,mouse_row		;real v
				alue store in al	 
 160C  3C 12				cmp al,12h 
 160E  0F 85 1617 R			jne con7 
 1612  C6 06 02CE R 01			mov is_timer_exit,1b 
 1617				con7: 
 1617  C3				ret 
 1618				timer_btn endp 
				 
 1618				get_timer proc 
 1618  B4 00				mov ah,0 
 161A  A0 00AC R			mov al,input[0] 
 161D  2C 30				sub al,30h 
 161F  F6 26 00C0 R			mul ten 
 1623  8A 16 00AD R			mov dl,input[1] 
 1627  80 EA 30				sub dl,30h 
 162A  02 C2				add al,dl 
 162C  A2 023D R			mov timer_hh,al 
					 
 162F  B4 00				mov ah,0 
 1631  A0 00AF R			mov al,input[3] 
 1634  2C 30				sub al,30h 
 1636  F6 26 00C0 R			mul ten 
 163A  8A 16 00B0 R			mov dl,input[4] 
 163E  80 EA 30				sub dl,30h 
 1641  02 C2				add al,dl 
 1643  A2 023E R			mov timer_mm,al	 
					 
 1646  B4 00				mov ah,0 
 1648  A0 00B2 R			mov al,input[6] 
Microsoft (R) Macro Assembler Version 5.00                  11/25/19 00:37:54
                                                             Page     1-64


 164B  2C 30				sub al,30h 
 164D  F6 26 00C0 R			mul ten 
 1651  8A 16 00B3 R			mov dl,input[7] 
 1655  80 EA 30				sub dl,30h 
 1658  02 C2				add al,dl 
 165A  A2 023F R			mov timer_ss,al	 
 165D  C3				ret 
 165E				get_timer endp 
				 
 165E				timer proc 
 165E				back_timer: 
					;set to graphics mode vga (320x200 256 
				color) 
 165E  B4 00				mov	ah,0			
					;set console mode 
 1660  B0 13				mov	al,13h			
					;to 320x200 256 
 1662  CD 10				int	10h 
				 
					row_drawer 	0, 0, 32000, clock_colo
				r		;15h	 
 1664  B4 0C                 1		mov	ah,0ch			
					;draw pixel 
 1666  B7 00                 1		mov	bh,0			
					;page 
 1668  A0 00E3 R             1		mov	al,clock_color		
					;color 
 166B  B9 0000               1		mov cx,0		;column 
 166E  BA 0000               1		mov	dx,0			
					;row 
 1671                        1		??0032 : 
 1671  CD 10                 1			int	10h		
						;draw 
 1673  41                    1			inc cx 
 1674  81 F9 7D00            1			cmp cx, 32000 
 1678  7E F7                 1			jle ??0032 
					row_drawer 	100, 0, 32000, clock_co
				lor		;320 = one whole line	 
 167A  B4 0C                 1		mov	ah,0ch			
					;draw pixel 
 167C  B7 00                 1		mov	bh,0			
					;page 
 167E  A0 00E3 R             1		mov	al,clock_color		
					;color 
 1681  B9 0000               1		mov cx,0		;column 
 1684  BA 0064               1		mov	dx,100			
					;row 
 1687                        1		??0033 : 
 1687  CD 10                 1			int	10h		
						;draw 
 1689  41                    1			inc cx 
 168A  81 F9 7D00            1			cmp cx, 32000 
 168E  7E F7                 1			jle ??0033 
					 
Microsoft (R) Macro Assembler Version 5.00                  11/25/19 00:37:54
                                                             Page     1-65


 1690  E8 1A85 R			call get_date 
 1693  8D 16 00F9 R			lea dx,date_buf 
 1697  E8 0000 R			call print	 
					 
 169A  E8 1A1A R			call chk_day	 
					 
 169D  B6 04				mov dh,04h		;set row 
 169F  B2 04				mov dl,04h		;set column 
 16A1  E8 001F R			call res_cur 
					 
 16A4  8D 16 002F R			lea dx,start_vga_str 
 16A8  E8 0000 R			call print		 
					 
 16AB  B6 04				mov dh,04h		;set row 
 16AD  B2 10				mov dl,10h		;set column 
 16AF  E8 001F R			call res_cur 
					 
 16B2  8D 16 0038 R			lea dx,stop_vga_str 
 16B6  E8 0000 R			call print		 
					 
 16B9  B6 04				mov dh,04h		;set row 
 16BB  B2 1C				mov dl,1ch		;set column 
 16BD  E8 001F R			call res_cur 
					 
 16C0  8D 16 0041 R			lea dx,reset_vga_str 
 16C4  E8 0000 R			call print		 
					 
 16C7  B4 2C				mov ah,2ch 
 16C9  CD 21				int 21h	 
 16CB  88 36 02D4 R			mov temp_sec,dh 
					;setup interrupt procedure by 
					;placing segment:offset of clock_int in
				 new_vec 
					 
 16CF  C7 06 0160 R 0B23 R		mov	new_vector,offset clock_int 
 16D5  C7 06 0162 R ---- R		mov	new_vector+2,seg clock_int 
					 
 16DB  8D 3E 015C R			lea	di,old_vector		;di poi
				nts to vector buffer 
 16DF  8D 36 0160 R			lea	si,new_vector		;si poi
				nts to new vector 
 16E3  B0 1C				mov	al,1ch			
					;timer interrupt 
 16E5  E8 0F78 R			call setup_int			;setup 
				new interrupt vector 
				  
 16E8  B6 12				mov dh,12h		;set row 
 16EA  B2 04				mov dl,04h		;set column 
 16EC  E8 001F R			call res_cur 
					 
 16EF  8D 16 0054 R			lea dx,back_vga_str 
 16F3  E8 0000 R			call print	 
					 
 16F6  B6 12				mov dh,12h		;set row 
Microsoft (R) Macro Assembler Version 5.00                  11/25/19 00:37:54
                                                             Page     1-66


 16F8  B2 40				mov dl,40h		;set column 
 16FA  E8 001F R			call res_cur 
					 
 16FD  8D 16 02C0 R			lea dx,edit_vga_str 
 1701  E8 0000 R			call print	 
					 
 1704  B6 16				mov dh,16h		;set row 
 1706  B2 00				mov dl,00h		;set column 
 1708  E8 001F R			call res_cur 
					 
 170B  8D 16 0081 R			lea dx,wait_respond_vga_str 
 170F  E8 0000 R			call print	 
					 
 1712  B6 16				mov dh,16h		;set row 
 1714  B2 28				mov dl,28h		;set column 
 1716  E8 001F R			call res_cur 
					 
 1719				chk_mouse_7: 
 1719  B8 0001				mov ax,0001h 
 171C  CD 33				int 33h	 
 171E  E8 10F0 R			call mouse 
					 
 1721  E8 1563 R			call timer_btn 
					 
 1724  80 3E 02CD R 01			cmp is_edit,1b 
 1729  C6 06 02CD R 00			mov is_edit,0b 
 172E  0F 85 174B R			jne re_chk_timer_exit 
					 
					;restore old interrupt vector 
 1732  8D 3E 0160 R			lea	di,new_vector		 
 1736  8D 36 015C R			lea	si,old_vector	 
 173A  B0 1C				mov	al,1ch			
					;timer interrupt 
 173C  E8 0F78 R			call setup_int			;restor
				e old vector	 
					;reset to original mode 
 173F  B4 00				mov	ah,0 
 1741  B0 03				mov	al,3 
 1743  CD 10				int	10h	 
					 
 1745  E8 17A4 R			call edit_timer 
 1748  E9 165E R			jmp back_timer 
					 
 174B				re_chk_timer_exit: 
					 
 174B  80 3E 02CE R 01			cmp is_timer_exit,1b 
 1750  C6 06 02CE R 00			mov is_timer_exit,0b 
 1755  0F 85 175C R			jne re_chk_press_7 
				 
 1759  EB 12 90				jmp return_7 
					 
 175C				re_chk_press_7: 
					;invoker alarm 
 175C  80 3E 02D3 R 01			cmp invoke_timer_alarm,1b 
Microsoft (R) Macro Assembler Version 5.00                  11/25/19 00:37:54
                                                             Page     1-67


 1761  75 B6				jne chk_mouse_7 
 1763  C6 06 02D3 R 00			mov invoke_timer_alarm,0b 
 1768  E8 1E6F R			call two_tigers 
					 
 176B  EB AC				jmp chk_mouse_7 
				 
 176D				return_7:	 
 176D  B8 0002				mov ax,0002h 
 1770  CD 33				int 33h 
					 
					;restore old interrupt vector 
 1772  8D 3E 0160 R			lea	di,new_vector		 
 1776  8D 36 015C R			lea	si,old_vector	 
 177A  B0 1C				mov	al,1ch			
					;timer interrupt 
 177C  E8 0F78 R			call setup_int			;restor
				e old vector 
					 
					;reset to original mode 
 177F  B4 00				mov	ah,0 
 1781  B0 03				mov	al,3 
 1783  CD 10				int	10h	 
 1785  C3				ret 
 1786				timer endp 
				 
 1786				check_edit_exit proc 
 1786  A1 00C5 R			mov ax,mouse_col		;real v
				alue store in al 
 1789  3C 30				cmp al,30h			
					 
 178B  0F 8C 17A3 R			jl not_edit_exit 
 178F  3C 46				cmp al,46h 
 1791  0F 8F 17A3 R			jg not_edit_exit 
 1795  A1 00C3 R			mov ax,mouse_row		;real v
				alue store in al	 
 1798  3C 16				cmp al,16h 
 179A  0F 85 17A3 R			jne not_edit_exit 
 179E  C6 06 00DC R 01			mov is_exit,1b 
 17A3				not_edit_exit: 
 17A3  C3				ret 
 17A4				check_edit_exit endp 
				 
 17A4				edit_timer proc 
 17A4  E8 000A R			call clr_src 
					 
					;cmp is_timer_set,1b 
					;jne no_timer_set 
					 
 17A7  B6 09				mov dh,09h		;set row 
 17A9  B2 09				mov dl,09h		;set column 
 17AB  E8 001F R			call res_cur	 
					 
 17AE  8D 16 0240 R			lea dx,timer_set_str 
 17B2  E8 0000 R			call print	 
Microsoft (R) Macro Assembler Version 5.00                  11/25/19 00:37:54
                                                             Page     1-68


 17B5  8D 16 010A R			lea dx,timer_buf 
 17B9  E8 0000 R			call print	 
				 
 17BC  B6 0A				mov dh,0ah		;set row 
 17BE  B2 09				mov dl,09h		;set column 
 17C0  E8 001F R			call res_cur	 
				 
 17C3  B6 0C				mov dh,0ch		;set row 
 17C5  B2 09				mov dl,09h		;set column 
 17C7  E8 001F R			call res_cur	 
					 
 17CA  8D 16 0256 R			lea dx,input_timer_str 
 17CE  E8 0000 R			call print	 
 17D1  8D 16 00AA R			lea dx,arr 
 17D5  E8 0005 R			call scan 
					 
 17D8  E8 1618 R			call get_timer 
					 
 17DB  B4 2D				mov ah,2dh 
 17DD  8A 2E 023D R			mov ch,timer_hh 
 17E1  8A 0E 023E R			mov cl,timer_mm 
 17E5  8A 36 023F R			mov dh,timer_ss 
 17E9  CD 21				int 21h 
					 
 17EB  80 3E 00AE R 3A			cmp input[2],':' 
 17F0  0F 85 1803 R			jne wrong_format2 
 17F4  80 3E 00B1 R 3A			cmp input[5],':' 
 17F9  0F 85 1803 R			jne wrong_format2	 
					 
 17FD  3C 00				cmp al,00h 
 17FF  0F 84 1814 R			je timer_ok 
					 
 1803				wrong_format2:	 
 1803  B6 0E				mov dh,0eh		;set row 
 1805  B2 09				mov dl,09h		;set column 
 1807  E8 001F R			call res_cur 
					 
 180A  8D 16 02A4 R			lea dx,timer_fail_str 
 180E  E8 0000 R			call print	 
				 
 1811  EB 4A 90				jmp con6 
					 
 1814				timer_ok: 
 1814  C6 06 02DC R 00			mov is_timer_start,0b 
				 
 1819  A0 023F R			mov al,timer_ss 
 181C  A2 02D1 R			mov simulate_timer_ss,al 
 181F  A0 023E R			mov al,timer_mm 
 1822  A2 02D0 R			mov simulate_timer_mm,al	 
 1825  A0 023D R			mov al,timer_hh 
 1828  A2 02CF R			mov simulate_timer_hh,al 
					 
 182B  A0 00AC R			mov al,input[0] 
 182E  A2 010A R			mov timer_buf[0],al 
Microsoft (R) Macro Assembler Version 5.00                  11/25/19 00:37:54
                                                             Page     1-69


 1831  A0 00AD R			mov al,input[1] 
 1834  A2 010B R			mov timer_buf[1],al 
 1837  A0 00AF R			mov al,input[3] 
 183A  A2 010D R			mov timer_buf[3],al	 
 183D  A0 00B0 R			mov al,input[4] 
 1840  A2 010E R			mov timer_buf[4],al 
 1843  A0 00B2 R			mov al,input[6] 
 1846  A2 0110 R			mov timer_buf[6],al	 
 1849  A0 00B3 R			mov al,input[7] 
 184C  A2 0111 R			mov timer_buf[7],al	 
					 
 184F  B6 0E				mov dh,0eh		;set row 
 1851  B2 09				mov dl,09h		;set column 
 1853  E8 001F R			call res_cur 
					 
 1856  8D 16 028A R			lea dx,timer_ok_str 
 185A  E8 0000 R			call print 
					 
 185D				con6:	 
					 
 185D  B8 0600				mov ax,0600h 
 1860  8A 3E 00E2 R			mov bh,option_color 
 1864  B9 1630				mov cx,1630h	;ul r:c 
 1867  BA 1646				mov dx,1646h	;lr r:c 
 186A  CD 10				int 10h 
					 
 186C  B6 16				mov dh,16h		;set row 
 186E  B2 3A				mov dl,3ah		;set column 
 1870  E8 001F R			call res_cur 
					 
 1873  8D 16 004F R			lea dx,back_str 
 1877  E8 0000 R			call print	 
					 
 187A  B6 16				mov dh,16h		;set row 
 187C  B2 08				mov dl,08h		;set column 
 187E  E8 001F R			call res_cur 
					 
 1881  8D 16 0061 R			lea dx,wait_respond_str 
 1885  E8 0000 R			call print	 
					 
 1888  B6 16				mov dh,16h		;set row 
 188A  B2 28				mov dl,28h		;set column 
 188C  E8 001F R			call res_cur 
					 
 188F				chk_mouse_6: 
 188F  B8 0001				mov ax,0001h 
 1892  CD 33				int 33h	 
 1894  E8 10F0 R			call mouse 
					 
 1897  E8 1786 R			call check_edit_exit 
					 
 189A  80 3E 00DC R 01			cmp is_exit,1b 
 189F  C6 06 00DC R 00			mov is_exit,0b 
 18A4  0F 85 18AB R			jne re_chk_press_6 
Microsoft (R) Macro Assembler Version 5.00                  11/25/19 00:37:54
                                                             Page     1-70


				 
 18A8  EB 03 90				jmp return_6 
					 
 18AB				re_chk_press_6: 
 18AB  EB E2				jmp chk_mouse_6 
				 
 18AD				return_6:	 
 18AD  B8 0002				mov ax,0002h 
 18B0  CD 33				int 33h 
 18B2  C3				ret 
 18B3				edit_timer endp 
				 
 18B3				chk_stopwatch proc 
 18B3  A1 00C5 R			mov ax,mouse_col		;real v
				alue store in al 
 18B6  3C 30				cmp al,30h			
					 
 18B8  0F 8C 18D0 R			jl not_stopwatch 
 18BC  3C 46				cmp al,46h 
 18BE  0F 8F 18D0 R			jg not_stopwatch 
 18C2  A1 00C3 R			mov ax,mouse_row		;real v
				alue store in al	 
 18C5  3C 0E				cmp al,0eh 
 18C7  0F 85 18D0 R			jne not_stopwatch 
 18CB  C6 06 00DB R 01			mov is_stopwatch,1b 
 18D0				not_stopwatch: 
 18D0  C3				ret 
 18D1				chk_stopwatch endp 
				 
 18D1				stopwatch_btn proc 
 18D1  A1 00C5 R			mov ax,mouse_col		;real v
				alue store in al 
 18D4  3C 08				cmp al,08h			
					 
 18D6  0F 8C 18EE R			jl chk_stop 
 18DA  3C 17				cmp al,17h 
 18DC  0F 8F 18EE R			jg chk_stop 
 18E0  A1 00C3 R			mov ax,mouse_row		;real v
				alue store in al	 
 18E3  3C 04				cmp al,04h 
 18E5  0F 85 18EE R			jne chk_stop 
 18E9  C6 06 02DA R 01			mov is_start,1b 
 18EE				chk_stop: 
 18EE  A1 00C5 R			mov ax,mouse_col		;real v
				alue store in al 
 18F1  3C 20				cmp al,20h			
					 
 18F3  0F 8C 190B R			jl chk_reset 
 18F7  3C 2F				cmp al,2fh 
 18F9  0F 8F 190B R			jg chk_reset 
 18FD  A1 00C3 R			mov ax,mouse_row		;real v
				alue store in al	 
 1900  3C 04				cmp al,04h 
 1902  0F 85 190B R			jne chk_reset 
Microsoft (R) Macro Assembler Version 5.00                  11/25/19 00:37:54
                                                             Page     1-71


 1906  C6 06 02DA R 00			mov is_start,0b 
 190B				chk_reset: 
 190B  A1 00C5 R			mov ax,mouse_col		;real v
				alue store in al 
 190E  3C 38				cmp al,38h			
					 
 1910  0F 8C 1932 R			jl con5 
 1914  3C 45				cmp al,45h 
 1916  0F 8F 1932 R			jg con5 
 191A  A1 00C3 R			mov ax,mouse_row		;real v
				alue store in al	 
 191D  3C 04				cmp al,04h 
 191F  0F 85 1932 R			jne con5 
 1923  C6 06 02DA R 00			mov is_start,0b	 
 1928  C6 06 02DB R 01			mov is_reset,1b 
 192D  C6 06 02D8 R 01			mov first_sec,1b 
 1932				con5: 
 1932  C3				ret 
 1933				stopwatch_btn endp 
				 
 1933				stopwatch proc 
					;set to graphics mode vga (320x200 256 
				color) 
 1933  B4 00				mov	ah,0			
					;set console mode 
 1935  B0 13				mov	al,13h			
					;to 320x200 256 
 1937  CD 10				int	10h 
				 
					row_drawer 	0, 0, 32000, clock_colo
				r		;15h	 
 1939  B4 0C                 1		mov	ah,0ch			
					;draw pixel 
 193B  B7 00                 1		mov	bh,0			
					;page 
 193D  A0 00E3 R             1		mov	al,clock_color		
					;color 
 1940  B9 0000               1		mov cx,0		;column 
 1943  BA 0000               1		mov	dx,0			
					;row 
 1946                        1		??0034 : 
 1946  CD 10                 1			int	10h		
						;draw 
 1948  41                    1			inc cx 
 1949  81 F9 7D00            1			cmp cx, 32000 
 194D  7E F7                 1			jle ??0034 
					row_drawer 	100, 0, 32000, clock_co
				lor		;320 = one whole line	 
 194F  B4 0C                 1		mov	ah,0ch			
					;draw pixel 
 1951  B7 00                 1		mov	bh,0			
					;page 
 1953  A0 00E3 R             1		mov	al,clock_color		
					;color 
Microsoft (R) Macro Assembler Version 5.00                  11/25/19 00:37:54
                                                             Page     1-72


 1956  B9 0000               1		mov cx,0		;column 
 1959  BA 0064               1		mov	dx,100			
					;row 
 195C                        1		??0035 : 
 195C  CD 10                 1			int	10h		
						;draw 
 195E  41                    1			inc cx 
 195F  81 F9 7D00            1			cmp cx, 32000 
 1963  7E F7                 1			jle ??0035 
					 
 1965  E8 1A85 R			call get_date 
 1968  8D 16 00F9 R			lea dx,date_buf 
 196C  E8 0000 R			call print	 
					 
 196F  E8 1A1A R			call chk_day	 
					 
 1972  B6 04				mov dh,04h		;set row 
 1974  B2 04				mov dl,04h		;set column 
 1976  E8 001F R			call res_cur 
					 
 1979  8D 16 002F R			lea dx,start_vga_str 
 197D  E8 0000 R			call print		 
					 
 1980  B6 04				mov dh,04h		;set row 
 1982  B2 10				mov dl,10h		;set column 
 1984  E8 001F R			call res_cur 
					 
 1987  8D 16 0038 R			lea dx,stop_vga_str 
 198B  E8 0000 R			call print		 
					 
 198E  B6 04				mov dh,04h		;set row 
 1990  B2 1C				mov dl,1ch		;set column 
 1992  E8 001F R			call res_cur 
					 
 1995  8D 16 0041 R			lea dx,reset_vga_str 
 1999  E8 0000 R			call print		 
					 
 199C  B4 2C				mov ah,2ch 
 199E  CD 21				int 21h	 
 19A0  88 36 02D4 R			mov temp_sec,dh 
					;setup interrupt procedure by 
					;placing segment:offset of clock_int in
				 new_vec 
					 
 19A4  C7 06 0160 R 0B23 R		mov	new_vector,offset clock_int 
 19AA  C7 06 0162 R ---- R		mov	new_vector+2,seg clock_int 
					 
 19B0  8D 3E 015C R			lea	di,old_vector		;di poi
				nts to vector buffer 
 19B4  8D 36 0160 R			lea	si,new_vector		;si poi
				nts to new vector 
 19B8  B0 1C				mov	al,1ch			
					;timer interrupt 
 19BA  E8 0F78 R			call setup_int			;setup 
Microsoft (R) Macro Assembler Version 5.00                  11/25/19 00:37:54
                                                             Page     1-73


				new interrupt vector 
				  
 19BD  B6 12				mov dh,12h		;set row 
 19BF  B2 04				mov dl,04h		;set column 
 19C1  E8 001F R			call res_cur 
					 
 19C4  8D 16 0054 R			lea dx,back_vga_str 
 19C8  E8 0000 R			call print	 
					 
 19CB  B6 16				mov dh,16h		;set row 
 19CD  B2 00				mov dl,00h		;set column 
 19CF  E8 001F R			call res_cur 
					 
 19D2  8D 16 0081 R			lea dx,wait_respond_vga_str 
 19D6  E8 0000 R			call print	 
					 
 19D9  B6 16				mov dh,16h		;set row 
 19DB  B2 28				mov dl,28h		;set column 
 19DD  E8 001F R			call res_cur 
					 
 19E0				chk_mouse_5: 
 19E0  B8 0001				mov ax,0001h 
 19E3  CD 33				int 33h	 
 19E5  E8 10F0 R			call mouse 
					 
 19E8  E8 18D1 R			call stopwatch_btn 
 19EB  E8 1125 R			call check_exit 
					 
 19EE  80 3E 00DC R 01			cmp is_exit,1b 
 19F3  C6 06 00DC R 00			mov is_exit,0b 
 19F8  0F 85 19FF R			jne re_chk_press_5 
				 
 19FC  EB 03 90				jmp return_5 
					 
 19FF				re_chk_press_5: 
				 
 19FF  EB DF				jmp chk_mouse_5 
				 
 1A01				return_5:	 
 1A01  B8 0002				mov ax,0002h 
 1A04  CD 33				int 33h 
					 
					;restore old interrupt vector 
 1A06  8D 3E 0160 R			lea	di,new_vector		 
 1A0A  8D 36 015C R			lea	si,old_vector	 
 1A0E  B0 1C				mov	al,1ch			
					;timer interrupt 
 1A10  E8 0F78 R			call setup_int			;restor
				e old vector 
					 
					;reset to original mode 
 1A13  B4 00				mov	ah,0 
 1A15  B0 03				mov	al,3 
 1A17  CD 10				int	10h	 
Microsoft (R) Macro Assembler Version 5.00                  11/25/19 00:37:54
                                                             Page     1-74


 1A19  C3				ret 
 1A1A				stopwatch endp 
				 
				; check day procedure is used to compare the da
				y of the week and return its String 
 1A1A				chk_day proc 
 1A1A  A0 0113 R			mov al,day 
					 
 1A1D  3C 00				cmp al,0 
 1A1F  0F 85 1A2D R			jne mon_day 
				 
 1A23  8D 16 0152 R			lea dx,sun 
 1A27  E8 0000 R			call print	 
 1A2A  EB 58 90				jmp return_3	 
 1A2D				mon_day:	 
 1A2D  3C 01				cmp al,1 
 1A2F  0F 85 1A3D R			jne tue_day 
				 
 1A33  8D 16 0114 R			lea dx,mon 
 1A37  E8 0000 R			call print	 
 1A3A  EB 48 90				jmp return_3	 
 1A3D				tue_day:		 
 1A3D  3C 02				cmp al,2 
 1A3F  0F 85 1A4D R			jne wed_day 
				 
 1A43  8D 16 011D R			lea dx,tue 
 1A47  E8 0000 R			call print	 
 1A4A  EB 38 90				jmp return_3	 
 1A4D				wed_day:	 
 1A4D  3C 03				cmp al,3 
 1A4F  0F 85 1A5D R			jne thu_day 
					 
 1A53  8D 16 0127 R			lea dx,wed 
 1A57  E8 0000 R			call print	 
 1A5A  EB 28 90				jmp return_3 
					 
 1A5D				thu_day:	 
 1A5D  3C 04				cmp al,4 
 1A5F  0F 85 1A6D R			jne fri_day 
				 
 1A63  8D 16 0133 R			lea dx,thu 
 1A67  E8 0000 R			call print	 
 1A6A  EB 18 90				jmp return_3	 
 1A6D				fri_day:	 
 1A6D  3C 05				cmp al,5 
 1A6F  0F 85 1A7D R			jne sat_day 
				 
 1A73  8D 16 013E R			lea dx,fri 
 1A77  E8 0000 R			call print	 
 1A7A  EB 08 90				jmp return_3 
 1A7D				sat_day:	 
					 
 1A7D  8D 16 0147 R			lea dx,sat 
 1A81  E8 0000 R			call print	 
Microsoft (R) Macro Assembler Version 5.00                  11/25/19 00:37:54
                                                             Page     1-75


				 
 1A84				return_3:	 
					 
 1A84  C3				ret 
 1A85				chk_day endp 
				 
 1A85				get_date proc 
				 
					;input si as the address of date buffer
				 
 1A85  B4 2A				mov ah,2ah     			;get da
				te 
 1A87  CD 21				int 21h                 ;dh = mm, dl = 
				dd, cx = yy 
					 
 1A89  A2 0113 R			mov day,al 
					 
 1A8C  8A C2				mov al,dl 
 1A8E  E8 0939 R			call to_aschii      
						 
 1A91  A2 00F9 R			mov date_buf[0],al      
 1A94  88 26 00FA R			mov date_buf[1],ah    
					 
 1A98  8A C6				mov al,dh      
 1A9A  E8 0939 R			call to_aschii         
 1A9D  A2 00FC R			mov date_buf[3],al      
 1AA0  88 26 00FD R			mov date_buf[4],ah     
				 
 1AA4  8B C1				mov ax,cx      
 1AA6  F6 36 00C0 R			div ten 
 1AAA  A2 00C1 R			mov quotient,al 
 1AAD  80 C4 30				add ah,30h 
 1AB0  88 26 0102 R			mov date_buf[9],ah     
				 
 1AB4  B8 0000				mov ax,0 
 1AB7  A0 00C1 R			mov al,quotient 
 1ABA  F6 36 00C0 R			div ten 
 1ABE  A2 00C1 R			mov quotient,al 
 1AC1  80 C4 30				add ah,30h 
 1AC4  88 26 0101 R			mov date_buf[8],ah  
					 
 1AC8  B8 0000				mov ax,0 
 1ACB  A0 00C1 R			mov al,quotient 
 1ACE  F6 36 00C0 R			div ten 
 1AD2  A2 00C1 R			mov quotient,al 
 1AD5  80 C4 30				add ah,30h 
 1AD8  88 26 0100 R			mov date_buf[7],ah  
					 
 1ADC  B8 0000				mov ax,0 
 1ADF  A0 00C1 R			mov al,quotient 
 1AE2  F6 36 00C0 R			div ten 
 1AE6  A2 00C1 R			mov quotient,al 
 1AE9  80 C4 30				add ah,30h 
 1AEC  88 26 00FF R			mov date_buf[6],ah 		     
Microsoft (R) Macro Assembler Version 5.00                  11/25/19 00:37:54
                                                             Page     1-76


				 
 1AF0  C3				ret 
 1AF1				get_date endp 
				 
				;start analog function 
				;setup the hour hand size and draw it on screen
				 
 1AF1				hour_hand proc 
 1AF1  BF 0050				mov di,80		;length of the 
				line 
 1AF4  BE 0001				mov si,1		;number of line
				 
					 
					;midpoint = (320,245) 
 1AF7  66| B8 00000050			mov eax,80 
 1AFD  66| A3 02EE R			mov radius,eax 
 1B01  66| B8 000000F0			mov eax,240 
 1B07  66| A3 02F2 R			mov adjust_x,eax		 
 1B0B  66| B8 000000A5			mov eax,165 
 1B11  66| A3 02F6 R			mov adjust_y,eax 
					 
 1B15  9B DB E3				finit 
 1B18  DB 06 0306 R			fild theta		 
					 
 1B1C  D9 1E 0306 R			fstp theta 
 1B20				drawing_hour_hand: 
 1B20  9B DB E3			 	finit 
 1B23  D9 06 0306 R			fld theta			 
				 
 1B27  E8 0040 R			call circle_func	 
					 
 1B2A  A0 02E9 R		    mov al,hour_hand_color	;color 
 1B2D  B7 00			    mov bh,0				;page 1
				  
 1B2F  66| 8B 0E 02FA R			mov ecx,x			
					;column	= x	(max = 640) 
 1B34  66| 8B 16 02FE R			mov edx,y			
					;row	= y	(max = 480) 
 1B39  B4 0C			    mov ah,0ch  
 1B3B  CD 10			    int 10h 				 
					 
 1B3D  4E				dec si 
 1B3E  83 FE 00				cmp si,0 
 1B41  75 DD				jne drawing_hour_hand	 
 1B43  83 FF 00				cmp di,0 
 1B46  0F 84 1B5F R			je end_draw_hour_hand 
 1B4A  4F				dec di 
 1B4B  BE 0024				mov si,36 
					 
 1B4E  66| FF 0E 02EE R			dec radius 
 1B53  66| FF 06 02F2 R			inc adjust_x	 
 1B58  66| FF 06 02F6 R			inc adjust_y	 
					 
 1B5D  EB C1				jmp drawing_hour_hand 
Microsoft (R) Macro Assembler Version 5.00                  11/25/19 00:37:54
                                                             Page     1-77


					 
 1B5F				end_draw_hour_hand: 
 1B5F  C3				ret 
 1B60				hour_hand endp 
				 
				;setup the minute hand size and draw it on scre
				en 
 1B60				min_hand proc 
 1B60  BF 0078				mov di,120		;length of the 
				line 
 1B63  BE 0001				mov si,1		;number of line
				 
					 
					;midpoint = (320,245) 
 1B66  66| B8 00000078			mov eax,120 
 1B6C  66| A3 02EE R			mov radius,eax 
 1B70  66| B8 000000C8			mov eax,200 
 1B76  66| A3 02F2 R			mov adjust_x,eax		 
 1B7A  66| B8 0000007D			mov eax,125 
 1B80  66| A3 02F6 R			mov adjust_y,eax 
					 
 1B84  9B DB E3				finit 
 1B87  DB 06 0306 R			fild theta		 
					 
 1B8B  D9 1E 0306 R			fstp theta 
 1B8F				drawing_min_hand: 
 1B8F  9B DB E3			 	finit 
 1B92  D9 06 0306 R			fld theta			 
				 
 1B96  E8 0040 R			call circle_func	 
					 
 1B99  A0 02E8 R		    mov al,min_hand_color	;color 
 1B9C  B7 00			    mov bh,0				;page 1
				  
 1B9E  66| 8B 0E 02FA R			mov ecx,x			
					;column	= x	(max = 640) 
 1BA3  66| 8B 16 02FE R			mov edx,y			
					;row	= y	(max = 480) 
 1BA8  B4 0C			    mov ah,0ch  
 1BAA  CD 10			    int 10h 				 
					 
 1BAC  4E				dec si 
 1BAD  83 FE 00				cmp si,0 
 1BB0  75 DD				jne drawing_min_hand	 
 1BB2  83 FF 00				cmp di,0 
 1BB5  0F 84 1BCE R			je end_draw_min_hand 
 1BB9  4F				dec di 
 1BBA  BE 0024				mov si,36 
					 
 1BBD  66| FF 0E 02EE R			dec radius 
 1BC2  66| FF 06 02F2 R			inc adjust_x	 
 1BC7  66| FF 06 02F6 R			inc adjust_y	 
					 
 1BCC  EB C1				jmp drawing_min_hand 
Microsoft (R) Macro Assembler Version 5.00                  11/25/19 00:37:54
                                                             Page     1-78


					 
 1BCE				end_draw_min_hand: 
 1BCE  C3				ret 
 1BCF				min_hand endp 
				 
				;setup the second hand size and draw it on scre
				en 
 1BCF				sec_hand proc 
 1BCF  BF 008C				mov di,140		;length of the 
				line 
 1BD2  BE 0001				mov si,1		;number of line
				 
					 
					;midpoint = (320,245) 
 1BD5  66| B8 00000078			mov eax,120 
 1BDB  66| A3 02EE R			mov radius,eax 
 1BDF  66| B8 000000C8			mov eax,200 
 1BE5  66| A3 02F2 R			mov adjust_x,eax		 
 1BE9  66| B8 0000007D			mov eax,125 
 1BEF  66| A3 02F6 R			mov adjust_y,eax	 
					 
 1BF3				drawing_sec_hand:	 
 1BF3  9B DB E3				finit 
 1BF6  DB 06 0306 R			fild theta		 	 
				 
 1BFA  E8 0040 R			call circle_func	 
					 
 1BFD  A0 02E7 R		    mov al,sec_hand_color	;color 
 1C00  B7 00			    mov bh,0				;page 1
				  
 1C02  66| 8B 0E 02FA R			mov ecx,x			
					;column	= x	(max = 640) 
 1C07  66| 8B 16 02FE R			mov edx,y			
					;row	= y	(max = 480) 
 1C0C  B4 0C			    mov ah,0ch  
 1C0E  CD 10			    int 10h 		 
					 
 1C10  4E				dec si 
 1C11  83 FE 00				cmp si,0 
 1C14  75 DD				jne drawing_sec_hand	 
 1C16  83 FF 00				cmp di,0 
 1C19  0F 84 1C32 R			je end_draw_sec_hand 
 1C1D  4F				dec di 
 1C1E  BE 0001				mov si,1 
						 
 1C21  66| FF 0E 02EE R			dec radius 
 1C26  66| FF 06 02F2 R			inc adjust_x	 
 1C2B  66| FF 06 02F6 R			inc adjust_y 
				 
 1C30  EB C1				jmp drawing_sec_hand 
					 
 1C32				end_draw_sec_hand: 
 1C32  C3				ret 
 1C33				sec_hand endp 
Microsoft (R) Macro Assembler Version 5.00                  11/25/19 00:37:54
                                                             Page     1-79


				 
				;setup the hour indicator size and draw it on s
				creen 
 1C33				hour_indicator proc 
 1C33  BF 0016				mov di,22		;length of the 
				line 
 1C36  BE 000C				mov si,12		;number of line
				 
					;midpoint = (320,245) 
 1C39  66| B8 000000A5			mov eax,165 
 1C3F  66| A3 02EE R			mov radius,eax 
 1C43  66| B8 0000009B			mov eax,155 
 1C49  66| A3 02F2 R			mov adjust_x,eax		 
 1C4D  66| B8 00000050			mov eax,80 
 1C53  66| A3 02F6 R			mov adjust_y,eax	 
 1C57  66| B8 00000000			mov eax,0 
 1C5D  66| A3 0306 R			mov theta,eax 
					 
 1C61				drawing_hr_line:	 
 1C61  9B DB E3				finit 
 1C64  D9 06 0306 R			fld theta		 	 
				 
 1C68  E8 0040 R			call circle_func	 
					 
 1C6B  B0 0F			    mov al,15			;color 
 1C6D  B7 00			    mov bh,0			;page 1  
 1C6F  66| 8B 0E 02FA R			mov ecx,x			;column
					= x	(max = 640) 
 1C74  66| 8B 16 02FE R			mov edx,y			;row
					= y	(max = 480) 
 1C79  B4 0C			    mov ah,0ch  
 1C7B  CD 10			    int 10h 				 
					 
 1C7D  9B DB E3				finit 
 1C80  D9 06 0306 R			fld theta 
 1C84  D8 06 030E R			fadd hr_deg_step 
 1C88  D9 16 0306 R			fst theta 
				 
 1C8C  4E				dec si 
 1C8D  83 FE 00				cmp si,0 
 1C90  75 CF				jne drawing_hr_line	 
 1C92  83 FF 00				cmp di,0 
 1C95  0F 84 1CAE R			je end_draw_hr_ln 
 1C99  4F				dec di 
 1C9A  BE 000C				mov si,12 
						 
 1C9D  66| FF 0E 02EE R			dec radius 
 1CA2  66| FF 06 02F2 R			inc adjust_x	 
 1CA7  66| FF 06 02F6 R			inc adjust_y 
				 
 1CAC  EB B3				jmp drawing_hr_line 
					 
 1CAE				end_draw_hr_ln: 
 1CAE  C3				ret 
Microsoft (R) Macro Assembler Version 5.00                  11/25/19 00:37:54
                                                             Page     1-80


 1CAF				hour_indicator endp 
				 
				;setup the second indicator size and draw it on
				 screen 
 1CAF				sec_indicator proc 
 1CAF  BF 000A				mov di,10		;length of the 
				line 
 1CB2  BE 003C				mov si,60		;number of line
				 
					 
					;midpoint = (320,245) 
 1CB5  66| B8 000000A5			mov eax,165 
 1CBB  66| A3 02EE R			mov radius,eax 
 1CBF  66| B8 0000009B			mov eax,155 
 1CC5  66| A3 02F2 R			mov adjust_x,eax		 
 1CC9  66| B8 00000050			mov eax,80 
 1CCF  66| A3 02F6 R			mov adjust_y,eax	 
 1CD3  66| B8 00000000			mov eax,0 
 1CD9  66| A3 0306 R			mov theta,eax 
					 
 1CDD				drawing_sec_line:	 
 1CDD  9B DB E3				finit 
 1CE0  D9 06 0306 R			fld theta		 	 
				 
 1CE4  E8 0040 R			call circle_func	 
					 
 1CE7  B0 0B			    mov al,11			;color 
 1CE9  B7 00			    mov bh,0			;page 1  
 1CEB  66| 8B 0E 02FA R			mov ecx,x			;column
					= x	(max = 640) 
 1CF0  66| 8B 16 02FE R			mov edx,y			;row
					= y	(max = 480) 
 1CF5  B4 0C			    mov ah,0ch  
 1CF7  CD 10			    int 10h 	 
					 
 1CF9  9B DB E3				finit 
 1CFC  D9 06 0306 R			fld theta 
 1D00  D8 06 0312 R			fadd sec_deg_step 
 1D04  D9 16 0306 R			fst theta 
				 
 1D08  4E				dec si 
 1D09  83 FE 00				cmp si,0 
 1D0C  75 CF				jne drawing_sec_line	 
 1D0E  83 FF 00				cmp di,0 
 1D11  0F 84 1D2A R			je end_draw_sec_ln 
 1D15  4F				dec di 
 1D16  BE 003C				mov si,60 
						 
 1D19  66| FF 0E 02EE R			dec radius 
 1D1E  66| FF 06 02F2 R			inc adjust_x	 
 1D23  66| FF 06 02F6 R			inc adjust_y 
				 
 1D28  EB B3				jmp drawing_sec_line 
					 
Microsoft (R) Macro Assembler Version 5.00                  11/25/19 00:37:54
                                                             Page     1-81


 1D2A				end_draw_sec_ln: 
 1D2A  C3				ret 
 1D2B				sec_indicator endp 
				 
				;setup the circle size and draw it on screen 
 1D2B				circle proc       
 1D2B  BF 0001				mov di,1			;extra 
				number of circle 
 1D2E  BE 8CA0				mov si,36000		;number of dot 
					 
					;midpoint = (320,245) 
 1D31  66| B8 000000A5			mov eax,165 
 1D37  66| A3 02EE R			mov radius,eax 
 1D3B  66| B8 0000009B			mov eax,155 
 1D41  66| A3 02F2 R			mov adjust_x,eax		 
 1D45  66| B8 00000050			mov eax,80 
 1D4B  66| A3 02F6 R			mov adjust_y,eax	 
					 
 1D4F  9B DB E3				finit  
 1D52  DB 06 0306 R			fild theta 
 1D56  D9 1E 0306 R			fstp theta 
					 
 1D5A				drawing_cir: 
 1D5A  4E				dec si 
 1D5B  9B DB E3				finit 
 1D5E  D9 06 0306 R			fld theta		 	;start 
				from 90deg 
				 
 1D62  E8 0040 R			call circle_func	 
							 
 1D65  B0 0B			    mov al,11			;color 
 1D67  B7 00			    mov bh,0			;page 1  
 1D69  66| 8B 0E 02FA R			mov ecx,x			;column
					= x	(max = 640) 
 1D6E  66| 8B 16 02FE R			mov edx,y			;row
					= y	(max = 480) 
 1D73  B4 0C			    mov ah,0ch  
 1D75  CD 10			    int 10h 		 
					 
 1D77  9B DB E3				finit 
 1D7A  D9 06 0306 R			fld theta 
 1D7E  D8 06 030A R			fadd deg_step		;increase by 0.
				01deg 
 1D82  D9 16 0306 R			fst theta 
				 
 1D86  83 FE 00				cmp si,0 
 1D89  75 CF				jne drawing_cir	 
 1D8B  83 FF 00				cmp di,0 
 1D8E  0F 84 1DAA R			je end_draw_cir 
 1D92  4F				dec di 
 1D93  BE 8CA0				mov si,36000 
				 
 1D96  66| 83 2E 02EE R 0A		sub radius,10 
 1D9C  66| 83 06 02F2 R 0A		add adjust_x,10	 
Microsoft (R) Macro Assembler Version 5.00                  11/25/19 00:37:54
                                                             Page     1-82


 1DA2  66| 83 06 02F6 R 0A		add adjust_y,10 
				 
 1DA8  EB B0				jmp drawing_cir 
					 
 1DAA				end_draw_cir: 
 1DAA  C3				ret 
 1DAB				circle endp   	 
				 
				;for display the 0-12 in fixed circle position 
 1DAB				analog_time_num proc 
 1DAB  B6 08				mov dh,8 
 1DAD  B2 2F				mov dl,47 
 1DAF  E8 001F R			call res_cur 
 1DB2  B2 31				mov dl,'1' 
 1DB4  B4 02				mov ah,2 
 1DB6  CD 21				int 21h	  
						    
 1DB8  B6 0B				mov dh,11 
 1DBA  B2 35				mov dl,53 
 1DBC  E8 001F R			call res_cur 
 1DBF  B2 32				mov dl,'2' 
 1DC1  B4 02				mov ah,2 
 1DC3  CD 21				int 21h	   
				                
 1DC5  B6 0F				mov dh,15 
 1DC7  B2 38				mov dl,56 
 1DC9  E8 001F R			call res_cur 
 1DCC  B2 33				mov dl,'3' 
 1DCE  B4 02				mov ah,2 
 1DD0  CD 21				int 21h	 			    
							    
 1DD2  B6 13				mov dh,19 
 1DD4  B2 35				mov dl,53 
 1DD6  E8 001F R			call res_cur 
 1DD9  B2 34				mov dl,'4' 
 1DDB  B4 02				mov ah,2 
 1DDD  CD 21				int 21h	 			   
						    
				    
 1DDF  B6 16				mov dh,22 
 1DE1  B2 2F				mov dl,47 
 1DE3  E8 001F R			call res_cur 
 1DE6  B2 35				mov dl,'5' 
 1DE8  B4 02				mov ah,2 
 1DEA  CD 21				int 21h	     
				 
 1DEC  B6 17				mov dh,23 
 1DEE  B2 28				mov dl,40 
 1DF0  E8 001F R			call res_cur 
 1DF3  B2 36				mov dl,'6' 
 1DF5  B4 02				mov ah,2 
 1DF7  CD 21				int 21h	 
					 
 1DF9  B6 16				mov dh,22 
Microsoft (R) Macro Assembler Version 5.00                  11/25/19 00:37:54
                                                             Page     1-83


 1DFB  B2 20				mov dl,32 
 1DFD  E8 001F R			call res_cur 
 1E00  B2 37				mov dl,'7' 
 1E02  B4 02				mov ah,2 
 1E04  CD 21				int 21h	     
				    
 1E06  B6 13				mov dh,19 
 1E08  B2 1A				mov dl,26 
 1E0A  E8 001F R			call res_cur 
 1E0D  B2 38				mov dl,'8' 
 1E0F  B4 02				mov ah,2 
 1E11  CD 21				int 21h	  
				 
 1E13  B6 0F				mov dh,15 
 1E15  B2 17				mov dl,23 
 1E17  E8 001F R			call res_cur 
 1E1A  B2 39				mov dl,'9' 
 1E1C  B4 02				mov ah,2 
 1E1E  CD 21				int 21h	  
					 
 1E20  B6 0B				mov dh,11 
 1E22  B2 19				mov dl,25 
 1E24  E8 001F R			call res_cur 
 1E27  B2 31				mov dl,'1' 
 1E29  B4 02				mov ah,2 
 1E2B  CD 21				int 21h	   
				  
 1E2D  B6 0B				mov dh,11 
 1E2F  B2 1A				mov dl,26 
 1E31  E8 001F R			call res_cur 
 1E34  B2 30				mov dl,'0' 
 1E36  B4 02				mov ah,2 
 1E38  CD 21				int 21h	  
				  
 1E3A  B6 08				mov dh,8 
 1E3C  B2 1E				mov dl,30 
 1E3E  E8 001F R			call res_cur 
 1E41  B2 31				mov dl,'1' 
 1E43  B4 02				mov ah,2 
 1E45  CD 21				int 21h	   
				  
 1E47  B6 08				mov dh,8 
 1E49  B2 1F				mov dl,31 
 1E4B  E8 001F R			call res_cur 
 1E4E  B2 31				mov dl,'1' 
 1E50  B4 02				mov ah,2 
 1E52  CD 21				int 21h	  
				          
 1E54  B6 07				mov dh,7 
 1E56  B2 27				mov dl,39 
 1E58  E8 001F R			call res_cur 
 1E5B  B2 31				mov dl,'1' 
 1E5D  B4 02				mov ah,2 
 1E5F  CD 21				int 21h	 
Microsoft (R) Macro Assembler Version 5.00                  11/25/19 00:37:54
                                                             Page     1-84


					 
 1E61  B6 07				mov dh,7 
 1E63  B2 28				mov dl,40 
 1E65  E8 001F R			call res_cur 
 1E68  B2 32				mov dl,'2' 
 1E6A  B4 02				mov ah,2 
 1E6C  CD 21				int 21h	 
 1E6E  C3				ret 
 1E6F				analog_time_num endp 
				;end analog function 
				 
				;start sound 
				;two_tigers is a procedure that contains a pre-
				coded aka two tigers 
 1E6F				two_tigers proc 
					tone 523 
 1E6F  BB 020B               1		mov bx,523			;This m
				acro receives the tone 
 1E72  E8 1FB5 R             1		call horn			
					;and send to call the procedures 
					tone 587 
 1E75  BB 024B               1		mov bx,587			;This m
				acro receives the tone 
 1E78  E8 1FB5 R             1		call horn			
					;and send to call the procedures 
					tone 659 
 1E7B  BB 0293               1		mov bx,659			;This m
				acro receives the tone 
 1E7E  E8 1FB5 R             1		call horn			
					;and send to call the procedures 
					tone 523 
 1E81  BB 020B               1		mov bx,523			;This m
				acro receives the tone 
 1E84  E8 1FB5 R             1		call horn			
					;and send to call the procedures 
					tone 523 
 1E87  BB 020B               1		mov bx,523			;This m
				acro receives the tone 
 1E8A  E8 1FB5 R             1		call horn			
					;and send to call the procedures 
 1E8D  E8 1F51 R			call delay 
					tone 523 
 1E90  BB 020B               1		mov bx,523			;This m
				acro receives the tone 
 1E93  E8 1FB5 R             1		call horn			
					;and send to call the procedures 
					tone 587 
 1E96  BB 024B               1		mov bx,587			;This m
				acro receives the tone 
 1E99  E8 1FB5 R             1		call horn			
					;and send to call the procedures 
					tone 659 
 1E9C  BB 0293               1		mov bx,659			;This m
				acro receives the tone 
Microsoft (R) Macro Assembler Version 5.00                  11/25/19 00:37:54
                                                             Page     1-85


 1E9F  E8 1FB5 R             1		call horn			
					;and send to call the procedures 
					tone 523 
 1EA2  BB 020B               1		mov bx,523			;This m
				acro receives the tone 
 1EA5  E8 1FB5 R             1		call horn			
					;and send to call the procedures 
					tone 523 
 1EA8  BB 020B               1		mov bx,523			;This m
				acro receives the tone 
 1EAB  E8 1FB5 R             1		call horn			
					;and send to call the procedures 
 1EAE  E8 1F51 R			call delay 
					tone 659 
 1EB1  BB 0293               1		mov bx,659			;This m
				acro receives the tone 
 1EB4  E8 1FB5 R             1		call horn			
					;and send to call the procedures 
					tone 698 
 1EB7  BB 02BA               1		mov bx,698			;This m
				acro receives the tone 
 1EBA  E8 1FB5 R             1		call horn			
					;and send to call the procedures 
					tone 784 
 1EBD  BB 0310               1		mov bx,784			;This m
				acro receives the tone 
 1EC0  E8 1FB5 R             1		call horn			
					;and send to call the procedures 
 1EC3  E8 1F51 R			call delay 
					tone 659 
 1EC6  BB 0293               1		mov bx,659			;This m
				acro receives the tone 
 1EC9  E8 1FB5 R             1		call horn			
					;and send to call the procedures 
					tone 698 
 1ECC  BB 02BA               1		mov bx,698			;This m
				acro receives the tone 
 1ECF  E8 1FB5 R             1		call horn			
					;and send to call the procedures 
					tone 784 
 1ED2  BB 0310               1		mov bx,784			;This m
				acro receives the tone 
 1ED5  E8 1FB5 R             1		call horn			
					;and send to call the procedures 
 1ED8  E8 1F51 R			call delay 
					tone 784 
 1EDB  BB 0310               1		mov bx,784			;This m
				acro receives the tone 
 1EDE  E8 1FB5 R             1		call horn			
					;and send to call the procedures 
					tone 880 
 1EE1  BB 0370               1		mov bx,880			;This m
				acro receives the tone 
 1EE4  E8 1FB5 R             1		call horn			
Microsoft (R) Macro Assembler Version 5.00                  11/25/19 00:37:54
                                                             Page     1-86


					;and send to call the procedures 
					tone 784 
 1EE7  BB 0310               1		mov bx,784			;This m
				acro receives the tone 
 1EEA  E8 1FB5 R             1		call horn			
					;and send to call the procedures 
					tone 698 
 1EED  BB 02BA               1		mov bx,698			;This m
				acro receives the tone 
 1EF0  E8 1FB5 R             1		call horn			
					;and send to call the procedures 
					tone 659 
 1EF3  BB 0293               1		mov bx,659			;This m
				acro receives the tone 
 1EF6  E8 1FB5 R             1		call horn			
					;and send to call the procedures 
					tone 523 
 1EF9  BB 020B               1		mov bx,523			;This m
				acro receives the tone 
 1EFC  E8 1FB5 R             1		call horn			
					;and send to call the procedures 
 1EFF  E8 1F51 R			call delay 
					tone 784 
 1F02  BB 0310               1		mov bx,784			;This m
				acro receives the tone 
 1F05  E8 1FB5 R             1		call horn			
					;and send to call the procedures 
					tone 880 
 1F08  BB 0370               1		mov bx,880			;This m
				acro receives the tone 
 1F0B  E8 1FB5 R             1		call horn			
					;and send to call the procedures 
					tone 784 
 1F0E  BB 0310               1		mov bx,784			;This m
				acro receives the tone 
 1F11  E8 1FB5 R             1		call horn			
					;and send to call the procedures 
					tone 698 
 1F14  BB 02BA               1		mov bx,698			;This m
				acro receives the tone 
 1F17  E8 1FB5 R             1		call horn			
					;and send to call the procedures 
					tone 659 
 1F1A  BB 0293               1		mov bx,659			;This m
				acro receives the tone 
 1F1D  E8 1FB5 R             1		call horn			
					;and send to call the procedures 
					tone 523 
 1F20  BB 020B               1		mov bx,523			;This m
				acro receives the tone 
 1F23  E8 1FB5 R             1		call horn			
					;and send to call the procedures 
 1F26  E8 1F51 R			call delay 
					tone 523 
Microsoft (R) Macro Assembler Version 5.00                  11/25/19 00:37:54
                                                             Page     1-87


 1F29  BB 020B               1		mov bx,523			;This m
				acro receives the tone 
 1F2C  E8 1FB5 R             1		call horn			
					;and send to call the procedures 
					tone 392 
 1F2F  BB 0188               1		mov bx,392			;This m
				acro receives the tone 
 1F32  E8 1FB5 R             1		call horn			
					;and send to call the procedures 
					tone 523 
 1F35  BB 020B               1		mov bx,523			;This m
				acro receives the tone 
 1F38  E8 1FB5 R             1		call horn			
					;and send to call the procedures 
 1F3B  E8 1F51 R			call delay 
					tone 523 
 1F3E  BB 020B               1		mov bx,523			;This m
				acro receives the tone 
 1F41  E8 1FB5 R             1		call horn			
					;and send to call the procedures 
					tone 392 
 1F44  BB 0188               1		mov bx,392			;This m
				acro receives the tone 
 1F47  E8 1FB5 R             1		call horn			
					;and send to call the procedures 
					tone 523 
 1F4A  BB 020B               1		mov bx,523			;This m
				acro receives the tone 
 1F4D  E8 1FB5 R             1		call horn			
					;and send to call the procedures 
 1F50  C3				ret 
 1F51				two_tigers endp 
				;delay procedure is to delay the SYSTEM - WAIT 
				for < one seconds  
 1F51				delay proc 
 1F51  B9 0001				mov     cx, 01h 
 1F54  BA 0240				mov     dx, 240h 
 1F57  B4 86				mov     ah, 86h 
 1F59  CD 15				int     15h 
 1F5B  C3				ret 
 1F5C				delay endp 
				 
 1F5C				hornon proc                  	;activa la horn
				 
 1F5C  E4 61			    in al, 61h 
 1F5E  0C 03			    or al, 11b 
 1F60  E6 61			    out 61h, al 
 1F62  C3			    ret 
 1F63				hornon endp 
				 
 1F63				hornoff proc                 	;desactiva la h
				orn 
 1F63  E4 61			    in al, 61h				
					;read from a port 
Microsoft (R) Macro Assembler Version 5.00                  11/25/19 00:37:54
                                                             Page     1-88


 1F65  24 FC			    and al, 11111100b 
 1F67  E6 61			    out 61h, al				
					;write to a port 
 1F69  C3			    ret 
 1F6A				hornoff endp 
				 
 1F6A				adjust proc                  	;adjust the hor
				n with the given frequency 
 1F6A  55			    push bp 
 1F6B  8B EC			    mov bp,sp 
 1F6D  BA 0012			    mov dx,18       
 1F70  B8 3429			    mov ax,13353    
 1F73  8B 5E 04				mov bx,[bp + 4] 
 1F76  F7 F3				div bx 
 1F78  8B D8				mov bx,ax   
 1F7A  B0 B6				mov al,0b6h 
 1F7C  E6 43				out 43h,al 
					;send to port the frequency in two byte
				s separately. 
 1F7E  8B C3				mov ax,bx 
 1F80  E6 42				out 42h,al 			
						;send first byte. (parallel por
				t = 378h) 
 1F82  8A C4				mov al,ah 
 1F84  E6 42				out 42h,al 			
						;send second byte. (serial port
				 = 3f8h) 
 1F86  5D				pop bp 
 1F87  C3				ret 
 1F88				adjust endp 
				 
 1F88				sound proc                      ;activate the h
				orn and place the name of 
 1F88  E8 1F5C R			call hornon             	;the ke
				y. 
 1F8B  B8 0040				mov ax,40h 
 1F8E  8E C0				mov es,ax 
 1F90  26: 8B 16 006E			mov dx,es:[006eh] 
 1F95  26: A1 006C			mov ax,es:[006ch] 
 1F99  05 0007				add ax,7 
 1F9C  83 D2 00				adc dx,0            		;7 unit
				s are added to this value 
 1F9F					clic: 
 1F9F  26: 3B 16 006E				cmp dx,es:[006eh]   	;and co
				mpare until they are equal 
 1FA4  0F 82 1FB1 R				jb fini            	
					;going through a cycle, when they arriv
				e 
 1FA8  77 F5					ja clic            	
					;to be the same one leaves the cycle 
 1FAA  26: 3B 06 006C				cmp ax,es:[006ch] 
 1FAF  77 EE					ja clic 
 1FB1					fini: 
 1FB1  E8 1F63 R				call hornoff       	
Microsoft (R) Macro Assembler Version 5.00                  11/25/19 00:37:54
                                                             Page     1-89


					;the horn is disconnected and returns. 
 1FB4  C3					ret 
 1FB5				sound endp 
				 
 1FB5				horn proc                     	;this procedure
				 saves ax and bx in 
 1FB5  53				push bx              		;the pi
				le to not lose its value, with 
 1FB6  8B C3				mov ax, bx          		;this c
				alls to fit and sound 
 1FB8  50				push ax 
 1FB9  E8 1F6A R			call adjust         		;put th
				e frequency in the port. 
 1FBC  58				pop ax 
 1FBD  5B				pop bx 
 1FBE  E8 1F88 R			call sound           		;activa
				te the speaker and deactivate it. 
 1FC1  C3				ret 
 1FC2				horn endp 
				;end sound 
				 
 1FC2				end main 

Microsoft (R) Macro Assembler Version 5.00                  11/25/19 00:37:54
                                                             Symbols-1


Macros:

		N a m e			Lines

COL_DRAWER . . . . . . . . . . .  	  10
ROW_DRAWER . . . . . . . . . . .  	  10
TONE . . . . . . . . . . . . . .  	   2



                N a m e         	Size	Length	 Align	Combine Class

DGROUP . . . . . . . . . . . . .  	GROUP
  _DATA  . . . . . . . . . . . .  	16 Bit	031A	WORD	PUBLIC	'DATA'
  STACK  . . . . . . . . . . . .  	16 Bit	0040	PARA	STACK	'STACK'
_TEXT  . . . . . . . . . . . . .  	16 Bit	1FC2	WORD	PUBLIC	'CODE'

Symbols:            

                N a m e         	Type	 Value	 Attr

ACT_LENGTH . . . . . . . . . . .  	L BYTE	00AB	_DATA
ADJUST . . . . . . . . . . . . .  	N PROC	1F6A	_TEXT	Length = 001E
ADJUST_X . . . . . . . . . . . .  	L DWORD	02F2	_DATA
ADJUST_Y . . . . . . . . . . . .  	L DWORD	02F6	_DATA
ALARM_1_MINITE . . . . . . . . .  	L NEAR	0BB1	_TEXT
ALARM_BUF  . . . . . . . . . . .  	L BYTE	0104	_DATA
ALARM_CANCEL_OK_STR  . . . . . .  	L BYTE	01CB	_DATA
ALARM_CANCEL_STR . . . . . . . .  	L BYTE	0204	_DATA
ALARM_FAIL_STR . . . . . . . . .  	L BYTE	01AF	_DATA
ALARM_HH . . . . . . . . . . . .  	L BYTE	0239	_DATA
ALARM_MENU . . . . . . . . . . .  	L NEAR	1441	_TEXT
ALARM_MM . . . . . . . . . . . .  	L BYTE	023A	_DATA
ALARM_OFF_STR  . . . . . . . . .  	L BYTE	0222	_DATA
ALARM_OK . . . . . . . . . . . .  	L NEAR	14C4	_TEXT
ALARM_OK_STR . . . . . . . . . .  	L BYTE	0195	_DATA
ALARM_ON_STR . . . . . . . . . .  	L BYTE	01E8	_DATA
ANALOG_CLOCK . . . . . . . . . .  	N PROC	1252	_TEXT	Length = 00A1
ANALOG_HH  . . . . . . . . . . .  	L BYTE	02E2	_DATA
ANALOG_MM  . . . . . . . . . . .  	L BYTE	02E1	_DATA
ANALOG_SS  . . . . . . . . . . .  	L BYTE	02E0	_DATA
ANALOG_STR . . . . . . . . . . .  	L BYTE	00C7	_DATA
ANALOG_TIME_NUM  . . . . . . . .  	N PROC	1DAB	_TEXT	Length = 00C4
ARR  . . . . . . . . . . . . . .  	L BYTE	00AA	_DATA

BACK_STR . . . . . . . . . . . .  	L BYTE	004F	_DATA
BACK_TIMER . . . . . . . . . . .  	L NEAR	165E	_TEXT
BACK_VGA_STR . . . . . . . . . .  	L BYTE	0054	_DATA
BCD2DEC  . . . . . . . . . . . .  	N PROC	0026	_TEXT	Length = 001A

CALL_ANALOG_CLOCK  . . . . . . .  	L NEAR	1215	_TEXT
CALL_DIGITAL_CLOCK . . . . . . .  	L NEAR	1220	_TEXT
CALL_GET_DIG_TIME  . . . . . . .  	L NEAR	0B51	_TEXT
CALL_SET_ALARM . . . . . . . . .  	L NEAR	0FFA	_TEXT
Microsoft (R) Macro Assembler Version 5.00                  11/25/19 00:37:54
                                                             Symbols-2


CALL_SHOW_CLOCK  . . . . . . . .  	L NEAR	0FEB	_TEXT
CALL_STOPWATCH . . . . . . . . .  	L NEAR	1014	_TEXT
CALL_TIMER . . . . . . . . . . .  	L NEAR	1009	_TEXT
CANCEL_ALARM . . . . . . . . . .  	L NEAR	146B	_TEXT
CHECK_ALARM  . . . . . . . . . .  	L NEAR	0B63	_TEXT
CHECK_ANA_EXIT . . . . . . . . .  	N PROC	122E	_TEXT	Length = 0024
CHECK_EDIT_EXIT  . . . . . . . .  	N PROC	1786	_TEXT	Length = 001E
CHECK_EXIT . . . . . . . . . . .  	N PROC	1125	_TEXT	Length = 001E
CHECK_ONE_SEC  . . . . . . . . .  	N PROC	0994	_TEXT	Length = 0024
CHECK_ONE_SEC_ANA  . . . . . . .  	N PROC	0782	_TEXT	Length = 002B
CHK_ANA_2_LINE . . . . . . . . .  	L NEAR	124C	_TEXT
CHK_DAY  . . . . . . . . . . . .  	N PROC	1A1A	_TEXT	Length = 006B
CHK_EDIT . . . . . . . . . . . .  	L NEAR	15DD	_TEXT
CHK_EXIT . . . . . . . . . . . .  	L NEAR	15FA	_TEXT
CHK_HOUR_COLOR . . . . . . . . .  	L NEAR	08EF	_TEXT
CHK_MOUSE  . . . . . . . . . . .  	L NEAR	0FA2	_TEXT
CHK_MOUSE_2  . . . . . . . . . .  	L NEAR	1521	_TEXT
CHK_MOUSE_4  . . . . . . . . . .  	L NEAR	136E	_TEXT
CHK_MOUSE_5  . . . . . . . . . .  	L NEAR	19E0	_TEXT
CHK_MOUSE_6  . . . . . . . . . .  	L NEAR	188F	_TEXT
CHK_MOUSE_7  . . . . . . . . . .  	L NEAR	1719	_TEXT
CHK_MOUSE_8  . . . . . . . . . .  	L NEAR	11F6	_TEXT
CHK_MOUSE_9  . . . . . . . . . .  	L NEAR	12BC	_TEXT
CHK_PRESS  . . . . . . . . . . .  	L NEAR	10F0	_TEXT
CHK_RELEASE  . . . . . . . . . .  	L NEAR	10FC	_TEXT
CHK_RESET  . . . . . . . . . . .  	L NEAR	190B	_TEXT
CHK_RESET_2  . . . . . . . . . .  	L NEAR	15BB	_TEXT
CHK_SELECT_CLOCK . . . . . . . .  	N PROC	1161	_TEXT	Length = 003E
CHK_SET_ALARM  . . . . . . . . .  	N PROC	13B4	_TEXT	Length = 001E
CHK_SHOW_CLOCK . . . . . . . . .  	N PROC	1143	_TEXT	Length = 001E
CHK_STOP . . . . . . . . . . . .  	L NEAR	18EE	_TEXT
CHK_STOPWATCH  . . . . . . . . .  	N PROC	18B3	_TEXT	Length = 001E
CHK_STOP_2 . . . . . . . . . . .  	L NEAR	159E	_TEXT
CHK_TIMER  . . . . . . . . . . .  	N PROC	1545	_TEXT	Length = 001E
CIRCLE . . . . . . . . . . . . .  	N PROC	1D2B	_TEXT	Length = 0080
CIRCLE_FUNC  . . . . . . . . . .  	N PROC	0040	_TEXT	Length = 002F
CLIC . . . . . . . . . . . . . .  	L NEAR	1F9F	_TEXT
CLOCK_COLOR  . . . . . . . . . .  	L BYTE	00E3	_DATA
CLOCK_INT  . . . . . . . . . . .  	N PROC	0B23	_TEXT	Length = 0455
CLOCK_TITLE  . . . . . . . . . .  	L BYTE	0000	_DATA
CLR_SRC  . . . . . . . . . . . .  	N PROC	000A	_TEXT	Length = 0015
COLOR  . . . . . . . . . . . . .  	L BYTE	00E1	_DATA
COL_1  . . . . . . . . . . . . .  	L WORD	00EA	_DATA
COL_2  . . . . . . . . . . . . .  	L WORD	00EC	_DATA
COL_3  . . . . . . . . . . . . .  	L WORD	00EE	_DATA
CON2 . . . . . . . . . . . . . .  	L NEAR	14EF	_TEXT
CON3 . . . . . . . . . . . . . .  	L NEAR	134B	_TEXT
CON4 . . . . . . . . . . . . . .  	L NEAR	0A43	_TEXT
CON5 . . . . . . . . . . . . . .  	L NEAR	1932	_TEXT
CON6 . . . . . . . . . . . . . .  	L NEAR	185D	_TEXT
CON7 . . . . . . . . . . . . . .  	L NEAR	1617	_TEXT
CON8 . . . . . . . . . . . . . .  	L NEAR	0A8C	_TEXT
CON_COUNTDOWN  . . . . . . . . .  	L NEAR	0B05	_TEXT

Microsoft (R) Macro Assembler Version 5.00                  11/25/19 00:37:54
                                                             Symbols-3


DATE_BUF . . . . . . . . . . . .  	L BYTE	00F9	_DATA
DAY  . . . . . . . . . . . . . .  	L BYTE	0113	_DATA
DEG_180  . . . . . . . . . . . .  	L DWORD	0302	_DATA
DEG_STEP . . . . . . . . . . . .  	L DWORD	030A	_DATA
DELAY  . . . . . . . . . . . . .  	N PROC	1F51	_TEXT	Length = 000B
DIGITAL_CLOCK  . . . . . . . . .  	N PROC	12F3	_TEXT	Length = 00C1
DIGITAL_STR  . . . . . . . . . .  	L BYTE	00CE	_DATA
DRAWING_CIR  . . . . . . . . . .  	L NEAR	1D5A	_TEXT
DRAWING_HOUR_HAND  . . . . . . .  	L NEAR	1B20	_TEXT
DRAWING_HR_LINE  . . . . . . . .  	L NEAR	1C61	_TEXT
DRAWING_MIN_HAND . . . . . . . .  	L NEAR	1B8F	_TEXT
DRAWING_SEC_HAND . . . . . . . .  	L NEAR	1BF3	_TEXT
DRAWING_SEC_LINE . . . . . . . .  	L NEAR	1CDD	_TEXT

EDIT_TIMER . . . . . . . . . . .  	N PROC	17A4	_TEXT	Length = 010F
EDIT_VGA_STR . . . . . . . . . .  	L BYTE	02C0	_DATA
END_DRAW_CIR . . . . . . . . . .  	L NEAR	1DAA	_TEXT
END_DRAW_HOUR_HAND . . . . . . .  	L NEAR	1B5F	_TEXT
END_DRAW_HR_LN . . . . . . . . .  	L NEAR	1CAE	_TEXT
END_DRAW_MIN_HAND  . . . . . . .  	L NEAR	1BCE	_TEXT
END_DRAW_SEC_HAND  . . . . . . .  	L NEAR	1C32	_TEXT
END_DRAW_SEC_LN  . . . . . . . .  	L NEAR	1D2A	_TEXT
END_GET_TIME . . . . . . . . . .  	L NEAR	0938	_TEXT
EXIT . . . . . . . . . . . . . .  	L NEAR	101F	_TEXT

FINI . . . . . . . . . . . . . .  	L NEAR	1FB1	_TEXT
FIRST_SEC  . . . . . . . . . . .  	L BYTE	02D8	_DATA
FIRST_TIMER_SEC  . . . . . . . .  	L BYTE	02D2	_DATA
FRI  . . . . . . . . . . . . . .  	L BYTE	013E	_DATA
FRI_DAY  . . . . . . . . . . . .  	L NEAR	1A6D	_TEXT

GET_ALARM  . . . . . . . . . . .  	N PROC	13D2	_TEXT	Length = 002F
GET_ANALOG_TIME  . . . . . . . .  	N PROC	07BC	_TEXT	Length = 017D
GET_DATE . . . . . . . . . . . .  	N PROC	1A85	_TEXT	Length = 006C
GET_TIME . . . . . . . . . . . .  	N PROC	0945	_TEXT	Length = 004F
GET_TIMER  . . . . . . . . . . .  	N PROC	1618	_TEXT	Length = 0046
GO_ALARM . . . . . . . . . . . .  	L NEAR	1495	_TEXT

H1 . . . . . . . . . . . . . . .  	L NEAR	0C53	_TEXT
H10  . . . . . . . . . . . . . .  	L NEAR	0BDA	_TEXT
H11  . . . . . . . . . . . . . .  	L NEAR	0BE0	_TEXT
H12  . . . . . . . . . . . . . .  	L NEAR	0BEE	_TEXT
H13  . . . . . . . . . . . . . .  	L NEAR	0BFC	_TEXT
H14  . . . . . . . . . . . . . .  	L NEAR	0C0A	_TEXT
H15  . . . . . . . . . . . . . .  	L NEAR	0C18	_TEXT
H16  . . . . . . . . . . . . . .  	L NEAR	0C26	_TEXT
H17  . . . . . . . . . . . . . .  	L NEAR	0C34	_TEXT
H18  . . . . . . . . . . . . . .  	L NEAR	0C42	_TEXT
H19  . . . . . . . . . . . . . .  	L NEAR	0C50	_TEXT
H2 . . . . . . . . . . . . . . .  	L NEAR	0CF5	_TEXT
H20  . . . . . . . . . . . . . .  	L NEAR	0C74	_TEXT
H21  . . . . . . . . . . . . . .  	L NEAR	0C7A	_TEXT
H22  . . . . . . . . . . . . . .  	L NEAR	0C89	_TEXT
H23  . . . . . . . . . . . . . .  	L NEAR	0C98	_TEXT
Microsoft (R) Macro Assembler Version 5.00                  11/25/19 00:37:54
                                                             Symbols-4


H24  . . . . . . . . . . . . . .  	L NEAR	0CA7	_TEXT
H25  . . . . . . . . . . . . . .  	L NEAR	0CB6	_TEXT
H26  . . . . . . . . . . . . . .  	L NEAR	0CC5	_TEXT
H27  . . . . . . . . . . . . . .  	L NEAR	0CD4	_TEXT
H28  . . . . . . . . . . . . . .  	L NEAR	0CE3	_TEXT
H29  . . . . . . . . . . . . . .  	L NEAR	0CF2	_TEXT
HORN . . . . . . . . . . . . . .  	N PROC	1FB5	_TEXT	Length = 000D
HORNOFF  . . . . . . . . . . . .  	N PROC	1F63	_TEXT	Length = 0007
HORNON . . . . . . . . . . . . .  	N PROC	1F5C	_TEXT	Length = 0007
HOUR_HAND  . . . . . . . . . . .  	N PROC	1AF1	_TEXT	Length = 006F
HOUR_HAND_COLOR  . . . . . . . .  	L BYTE	02E9	_DATA
HOUR_INDICATOR . . . . . . . . .  	N PROC	1C33	_TEXT	Length = 007C
HOUR_IN_60 . . . . . . . . . . .  	L WORD	02E5	_DATA
HR_12_FORMAT . . . . . . . . . .  	L NEAR	07E9	_TEXT
HR_DEG_STEP  . . . . . . . . . .  	L DWORD	030E	_DATA

INIT_STOPWATCH . . . . . . . . .  	N PROC	09F0	_TEXT	Length = 005D
INIT_TIMER . . . . . . . . . . .  	N PROC	0AAC	_TEXT	Length = 0077
INNER_ANALOG_HH  . . . . . . . .  	L WORD	02E3	_DATA
INNER_HOUR_0 . . . . . . . . . .  	L NEAR	092D	_TEXT
INNER_HR . . . . . . . . . . . .  	N PROC	07AD	_TEXT	Length = 000F
INPUT  . . . . . . . . . . . . .  	L BYTE	00AC	_DATA	Length = 0014
INPUT_ALARM_STR  . . . . . . . .  	L BYTE	0164	_DATA
INPUT_TIMER_STR  . . . . . . . .  	L BYTE	0256	_DATA
INVOKER_ALARM  . . . . . . . . .  	L BYTE	023C	_DATA
INVOKE_TIMER_ALARM . . . . . . .  	L BYTE	02D3	_DATA
IS_24  . . . . . . . . . . . . .  	L BYTE	015B	_DATA
IS_ALARM_SET . . . . . . . . . .  	L BYTE	023B	_DATA
IS_ANALOG  . . . . . . . . . . .  	L BYTE	00D7	_DATA
IS_DIGITAL . . . . . . . . . . .  	L BYTE	00D8	_DATA
IS_EDIT  . . . . . . . . . . . .  	L BYTE	02CD	_DATA
IS_EXIT  . . . . . . . . . . . .  	L BYTE	00DC	_DATA
IS_RESET . . . . . . . . . . . .  	L BYTE	02DB	_DATA
IS_SEC_PASS  . . . . . . . . . .  	L BYTE	02D9	_DATA
IS_SEC_PASS_ANA  . . . . . . . .  	L BYTE	02DF	_DATA
IS_SET_ALARM . . . . . . . . . .  	L BYTE	00D9	_DATA
IS_SHOW_CLOCK  . . . . . . . . .  	L BYTE	00D6	_DATA
IS_START . . . . . . . . . . . .  	L BYTE	02DA	_DATA
IS_STOPWATCH . . . . . . . . . .  	L BYTE	00DB	_DATA
IS_TIMER . . . . . . . . . . . .  	L BYTE	00DA	_DATA
IS_TIMER_EXIT  . . . . . . . . .  	L BYTE	02CE	_DATA
IS_TIMER_RESET . . . . . . . . .  	L BYTE	02DD	_DATA
IS_TIMER_START . . . . . . . . .  	L BYTE	02DC	_DATA

M1 . . . . . . . . . . . . . . .  	L NEAR	0D9D	_TEXT
M11  . . . . . . . . . . . . . .  	L NEAR	0D22	_TEXT
M12  . . . . . . . . . . . . . .  	L NEAR	0D31	_TEXT
M13  . . . . . . . . . . . . . .  	L NEAR	0D40	_TEXT
M14  . . . . . . . . . . . . . .  	L NEAR	0D4F	_TEXT
M15  . . . . . . . . . . . . . .  	L NEAR	0D5E	_TEXT
M16  . . . . . . . . . . . . . .  	L NEAR	0D6D	_TEXT
M17  . . . . . . . . . . . . . .  	L NEAR	0D7C	_TEXT
M18  . . . . . . . . . . . . . .  	L NEAR	0D8B	_TEXT
M19  . . . . . . . . . . . . . .  	L NEAR	0D9A	_TEXT
Microsoft (R) Macro Assembler Version 5.00                  11/25/19 00:37:54
                                                             Symbols-5


M2 . . . . . . . . . . . . . . .  	L NEAR	0E36	_TEXT
M21  . . . . . . . . . . . . . .  	L NEAR	0DBB	_TEXT
M22  . . . . . . . . . . . . . .  	L NEAR	0DCA	_TEXT
M23  . . . . . . . . . . . . . .  	L NEAR	0DD9	_TEXT
M24  . . . . . . . . . . . . . .  	L NEAR	0DE8	_TEXT
M25  . . . . . . . . . . . . . .  	L NEAR	0DF7	_TEXT
M26  . . . . . . . . . . . . . .  	L NEAR	0E06	_TEXT
M27  . . . . . . . . . . . . . .  	L NEAR	0E15	_TEXT
M28  . . . . . . . . . . . . . .  	L NEAR	0E24	_TEXT
M29  . . . . . . . . . . . . . .  	L NEAR	0E33	_TEXT
MAIN . . . . . . . . . . . . . .  	N PROC	0F8D	_TEXT	Length = 009F
MAX_LENGTH . . . . . . . . . . .  	L BYTE	00AA	_DATA
MENU . . . . . . . . . . . . . .  	N PROC	102C	_TEXT	Length = 00C4
MIN_HAND . . . . . . . . . . . .  	N PROC	1B60	_TEXT	Length = 006F
MIN_HAND_COLOR . . . . . . . . .  	L BYTE	02E8	_DATA
MIN_HAND_START_DEG . . . . . . .  	L DWORD	02EA	_DATA
MIN_HAND_STEP  . . . . . . . . .  	L DWORD	0316	_DATA
MON  . . . . . . . . . . . . . .  	L BYTE	0114	_DATA
MON_DAY  . . . . . . . . . . . .  	L NEAR	1A2D	_TEXT
MOUSE  . . . . . . . . . . . . .  	N PROC	10F0	_TEXT	Length = 0035
MOUSE_COL  . . . . . . . . . . .  	L WORD	00C5	_DATA
MOUSE_ROW  . . . . . . . . . . .  	L WORD	00C3	_DATA

NEW_VECTOR . . . . . . . . . . .  	L WORD	0160	_DATA
NOT_ANALOG . . . . . . . . . . .  	L NEAR	1181	_TEXT
NOT_ANA_EXIT . . . . . . . . . .  	L NEAR	1251	_TEXT
NOT_DIGITAL  . . . . . . . . . .  	L NEAR	119E	_TEXT
NOT_EDIT_EXIT  . . . . . . . . .  	L NEAR	17A3	_TEXT
NOT_EXIT . . . . . . . . . . . .  	L NEAR	1142	_TEXT
NOT_FIRST_SEC  . . . . . . . . .  	L NEAR	09CB	_TEXT
NOT_FIRST_TIMER_SEC  . . . . . .  	L NEAR	0A60	_TEXT
NOT_RESET  . . . . . . . . . . .  	L NEAR	0A12	_TEXT
NOT_RESET2 . . . . . . . . . . .  	L NEAR	0AD1	_TEXT
NOT_SET_ALARM  . . . . . . . . .  	L NEAR	13D1	_TEXT
NOT_SHOW_CLOCK . . . . . . . . .  	L NEAR	1160	_TEXT
NOT_STOPWATCH  . . . . . . . . .  	L NEAR	18D0	_TEXT
NOT_TIMER  . . . . . . . . . . .  	L NEAR	1562	_TEXT
NOT_YET_SEC  . . . . . . . . . .  	L NEAR	09B7	_TEXT
NOT_YET_SEC2 . . . . . . . . . .  	L NEAR	09EF	_TEXT
NOT_YET_SEC3 . . . . . . . . . .  	L NEAR	0AAB	_TEXT
NOT_YET_SEC_ANA  . . . . . . . .  	L NEAR	07AC	_TEXT
NOT_YET_START  . . . . . . . . .  	L NEAR	0A21	_TEXT
NOT_YET_START2 . . . . . . . . .  	L NEAR	0B08	_TEXT
NOT_ZERO . . . . . . . . . . . .  	L NEAR	1599	_TEXT
NO_ALARM . . . . . . . . . . . .  	L NEAR	1433	_TEXT
NO_ALARM_INVOKE  . . . . . . . .  	L NEAR	0BAC	_TEXT
NO_ANA_ALARM . . . . . . . . . .  	L NEAR	0F77	_TEXT
NO_RESET_SEC . . . . . . . . . .  	L NEAR	09DD	_TEXT
NO_RESET_SEC2  . . . . . . . . .  	L NEAR	0A99	_TEXT
NO_RESET_SEC_ANA . . . . . . . .  	L NEAR	0790	_TEXT
NO_RESET_SEC_COUNTER . . . . . .  	L NEAR	09A2	_TEXT

OLD_VECTOR . . . . . . . . . . .  	L WORD	015C	_DATA
OPTION_COLOR . . . . . . . . . .  	L BYTE	00E2	_DATA
Microsoft (R) Macro Assembler Version 5.00                  11/25/19 00:37:54
                                                             Symbols-6



PRINT  . . . . . . . . . . . . .  	N PROC	0000	_TEXT	Length = 0005
PRINT_0  . . . . . . . . . . . .  	N PROC	013D	_TEXT	Length = 008F
PRINT_1  . . . . . . . . . . . .  	N PROC	01CC	_TEXT	Length = 005F
PRINT_2  . . . . . . . . . . . .  	N PROC	022B	_TEXT	Length = 00B1
PRINT_3  . . . . . . . . . . . .  	N PROC	02DC	_TEXT	Length = 0099
PRINT_4  . . . . . . . . . . . .  	N PROC	0375	_TEXT	Length = 008B
PRINT_5  . . . . . . . . . . . .  	N PROC	0400	_TEXT	Length = 00B1
PRINT_6  . . . . . . . . . . . .  	N PROC	04B1	_TEXT	Length = 00B1
PRINT_7  . . . . . . . . . . . .  	N PROC	0562	_TEXT	Length = 005F
PRINT_8  . . . . . . . . . . . .  	N PROC	05C1	_TEXT	Length = 00B1
PRINT_9  . . . . . . . . . . . .  	N PROC	0672	_TEXT	Length = 00B1
PRINT_SEPERATOR  . . . . . . . .  	N PROC	0723	_TEXT	Length = 005F

QUIT_STR . . . . . . . . . . . .  	L BYTE	0049	_DATA
QUOTIENT . . . . . . . . . . . .  	L BYTE	00C1	_DATA

RADIUS . . . . . . . . . . . . .  	L DWORD	02EE	_DATA
REMAINDER  . . . . . . . . . . .  	L BYTE	00C2	_DATA
RESETED_HR_HAND  . . . . . . . .  	L NEAR	0931	_TEXT
RESET_COLOR_0  . . . . . . . . .  	L NEAR	086D	_TEXT
RESET_COLOR_1  . . . . . . . . .  	L NEAR	0906	_TEXT
RESET_HOUR_HAND  . . . . . . . .  	L NEAR	090B	_TEXT
RESET_MIN_HAND . . . . . . . . .  	L NEAR	0872	_TEXT
RESET_PRINT  . . . . . . . . . .  	N PROC	006F	_TEXT	Length = 00CE
RESET_VGA_STR  . . . . . . . . .  	L BYTE	0041	_DATA
RES_CUR  . . . . . . . . . . . .  	N PROC	001F	_TEXT	Length = 0007
RETURN_2 . . . . . . . . . . . .  	L NEAR	153F	_TEXT
RETURN_3 . . . . . . . . . . . .  	L NEAR	1A84	_TEXT
RETURN_4 . . . . . . . . . . . .  	L NEAR	139B	_TEXT
RETURN_5 . . . . . . . . . . . .  	L NEAR	1A01	_TEXT
RETURN_6 . . . . . . . . . . . .  	L NEAR	18AD	_TEXT
RETURN_7 . . . . . . . . . . . .  	L NEAR	176D	_TEXT
RETURN_8 . . . . . . . . . . . .  	L NEAR	1228	_TEXT
RETURN_9 . . . . . . . . . . . .  	L NEAR	12DA	_TEXT
RE_CHK_PRESS . . . . . . . . . .  	L NEAR	0FE9	_TEXT
RE_CHK_PRESS_2 . . . . . . . . .  	L NEAR	153D	_TEXT
RE_CHK_PRESS_4 . . . . . . . . .  	L NEAR	138A	_TEXT
RE_CHK_PRESS_5 . . . . . . . . .  	L NEAR	19FF	_TEXT
RE_CHK_PRESS_6 . . . . . . . . .  	L NEAR	18AB	_TEXT
RE_CHK_PRESS_7 . . . . . . . . .  	L NEAR	175C	_TEXT
RE_CHK_PRESS_8 . . . . . . . . .  	L NEAR	1213	_TEXT
RE_CHK_PRESS_9 . . . . . . . . .  	L NEAR	12D8	_TEXT
RE_CHK_TIMER_EXIT  . . . . . . .  	L NEAR	174B	_TEXT
ROW_1  . . . . . . . . . . . . .  	L WORD	00E4	_DATA
ROW_2  . . . . . . . . . . . . .  	L WORD	00E6	_DATA
ROW_3  . . . . . . . . . . . . .  	L WORD	00E8	_DATA
RUN_GET_TIME . . . . . . . . . .  	L NEAR	0B42	_TEXT
RUN_INIT_STOPWATCH . . . . . . .  	L NEAR	0B57	_TEXT
RUN_INIT_TIMER . . . . . . . . .  	L NEAR	0B5D	_TEXT

S1 . . . . . . . . . . . . . . .  	L NEAR	0EDE	_TEXT
S11  . . . . . . . . . . . . . .  	L NEAR	0E63	_TEXT
S12  . . . . . . . . . . . . . .  	L NEAR	0E72	_TEXT
Microsoft (R) Macro Assembler Version 5.00                  11/25/19 00:37:54
                                                             Symbols-7


S13  . . . . . . . . . . . . . .  	L NEAR	0E81	_TEXT
S14  . . . . . . . . . . . . . .  	L NEAR	0E90	_TEXT
S15  . . . . . . . . . . . . . .  	L NEAR	0E9F	_TEXT
S16  . . . . . . . . . . . . . .  	L NEAR	0EAE	_TEXT
S17  . . . . . . . . . . . . . .  	L NEAR	0EBD	_TEXT
S18  . . . . . . . . . . . . . .  	L NEAR	0ECC	_TEXT
S19  . . . . . . . . . . . . . .  	L NEAR	0EDB	_TEXT
S2 . . . . . . . . . . . . . . .  	L NEAR	0F77	_TEXT
S21  . . . . . . . . . . . . . .  	L NEAR	0EFC	_TEXT
S22  . . . . . . . . . . . . . .  	L NEAR	0F0B	_TEXT
S23  . . . . . . . . . . . . . .  	L NEAR	0F1A	_TEXT
S24  . . . . . . . . . . . . . .  	L NEAR	0F29	_TEXT
S25  . . . . . . . . . . . . . .  	L NEAR	0F38	_TEXT
S26  . . . . . . . . . . . . . .  	L NEAR	0F47	_TEXT
S27  . . . . . . . . . . . . . .  	L NEAR	0F56	_TEXT
S28  . . . . . . . . . . . . . .  	L NEAR	0F65	_TEXT
S29  . . . . . . . . . . . . . .  	L NEAR	0F74	_TEXT
SAT  . . . . . . . . . . . . . .  	L BYTE	0147	_DATA
SAT_DAY  . . . . . . . . . . . .  	L NEAR	1A7D	_TEXT
SCAN . . . . . . . . . . . . . .  	N PROC	0005	_TEXT	Length = 0005
SEC_DEG_STEP . . . . . . . . . .  	L DWORD	0312	_DATA
SEC_HAND . . . . . . . . . . . .  	N PROC	1BCF	_TEXT	Length = 0064
SEC_HAND_COLOR . . . . . . . . .  	L BYTE	02E7	_DATA
SEC_INDICATOR  . . . . . . . . .  	N PROC	1CAF	_TEXT	Length = 007C
SELECT_CLOCK . . . . . . . . . .  	N PROC	119F	_TEXT	Length = 008F
SETUP_INT  . . . . . . . . . . .  	N PROC	0F78	_TEXT	Length = 0015
SET_ALARM  . . . . . . . . . . .  	N PROC	1401	_TEXT	Length = 0144
SET_ALARM_STR  . . . . . . . . .  	L BYTE	0015	_DATA
SHOW_CLOCK_STR . . . . . . . . .  	L BYTE	000A	_DATA
SHOW_MENU  . . . . . . . . . . .  	L NEAR	0F92	_TEXT
SIMULATE_MILISEC . . . . . . . .  	L BYTE	02D7	_DATA
SIMULATE_MINUTE  . . . . . . . .  	L BYTE	02D5	_DATA
SIMULATE_SEC . . . . . . . . . .  	L BYTE	02D6	_DATA
SIMULATE_TIME  . . . . . . . . .  	N PROC	09B8	_TEXT	Length = 0038
SIMULATE_TIMER_HH  . . . . . . .  	L BYTE	02CF	_DATA
SIMULATE_TIMER_MM  . . . . . . .  	L BYTE	02D0	_DATA
SIMULATE_TIMER_SS  . . . . . . .  	L BYTE	02D1	_DATA
SIMULATE_TIMER_TIME  . . . . . .  	N PROC	0A4D	_TEXT	Length = 005F
SOUND  . . . . . . . . . . . . .  	N PROC	1F88	_TEXT	Length = 002D
START_COL  . . . . . . . . . . .  	L WORD	00DF	_DATA
START_ROW  . . . . . . . . . . .  	L WORD	00DD	_DATA
START_VGA_STR  . . . . . . . . .  	L BYTE	002F	_DATA
STOPWATCH  . . . . . . . . . . .  	N PROC	1933	_TEXT	Length = 00E7
STOPWATCH_BTN  . . . . . . . . .  	N PROC	18D1	_TEXT	Length = 0062
STOPWATCH_STR  . . . . . . . . .  	L BYTE	0025	_DATA
STOP_COUNTDOWN . . . . . . . . .  	L NEAR	0B08	_TEXT
STOP_VGA_STR . . . . . . . . . .  	L BYTE	0038	_DATA
STORE  . . . . . . . . . . . . .  	L NEAR	0964	_TEXT
SUN  . . . . . . . . . . . . . .  	L BYTE	0152	_DATA

TEMP_SEC . . . . . . . . . . . .  	L BYTE	02D4	_DATA
TEMP_SEC_ANA . . . . . . . . . .  	L BYTE	02DE	_DATA
TEN  . . . . . . . . . . . . . .  	L BYTE	00C0	_DATA
THETA  . . . . . . . . . . . . .  	L DWORD	0306	_DATA
Microsoft (R) Macro Assembler Version 5.00                  11/25/19 00:37:54
                                                             Symbols-8


THU  . . . . . . . . . . . . . .  	L BYTE	0133	_DATA
THU_DAY  . . . . . . . . . . . .  	L NEAR	1A5D	_TEXT
TIMER  . . . . . . . . . . . . .  	N PROC	165E	_TEXT	Length = 0128
TIMER_BTN  . . . . . . . . . . .  	N PROC	1563	_TEXT	Length = 00B5
TIMER_BUF  . . . . . . . . . . .  	L BYTE	010A	_DATA
TIMER_FAIL_STR . . . . . . . . .  	L BYTE	02A4	_DATA
TIMER_HH . . . . . . . . . . . .  	L BYTE	023D	_DATA
TIMER_MM . . . . . . . . . . . .  	L BYTE	023E	_DATA
TIMER_OK . . . . . . . . . . . .  	L NEAR	1814	_TEXT
TIMER_OK_STR . . . . . . . . . .  	L BYTE	028A	_DATA
TIMER_SET_STR  . . . . . . . . .  	L BYTE	0240	_DATA
TIMER_SS . . . . . . . . . . . .  	L BYTE	023F	_DATA
TIMER_STR  . . . . . . . . . . .  	L BYTE	001F	_DATA
TIME_BUF . . . . . . . . . . . .  	L BYTE	00F0	_DATA
TO_ASCHII  . . . . . . . . . . .  	N PROC	0939	_TEXT	Length = 000C
TUE  . . . . . . . . . . . . . .  	L BYTE	011D	_DATA
TUE_DAY  . . . . . . . . . . . .  	L NEAR	1A3D	_TEXT
TWO_TIGERS . . . . . . . . . . .  	N PROC	1E6F	_TEXT	Length = 00E2

WAIT_RESPOND_STR . . . . . . . .  	L BYTE	0061	_DATA
WAIT_RESPOND_VGA_STR . . . . . .  	L BYTE	0081	_DATA
WED  . . . . . . . . . . . . . .  	L BYTE	0127	_DATA
WED_DAY  . . . . . . . . . . . .  	L NEAR	1A4D	_TEXT
WRONG_FORMAT . . . . . . . . . .  	L NEAR	14B3	_TEXT
WRONG_FORMAT2  . . . . . . . . .  	L NEAR	1803	_TEXT

X  . . . . . . . . . . . . . . .  	L DWORD	02FA	_DATA

Y  . . . . . . . . . . . . . . .  	L DWORD	02FE	_DATA

??0000 . . . . . . . . . . . . .  	L NEAR	00B6	_TEXT
??0001 . . . . . . . . . . . . .  	L NEAR	00CE	_TEXT
??0002 . . . . . . . . . . . . .  	L NEAR	00E6	_TEXT
??0003 . . . . . . . . . . . . .  	L NEAR	00FE	_TEXT
??0004 . . . . . . . . . . . . .  	L NEAR	0116	_TEXT
??0005 . . . . . . . . . . . . .  	L NEAR	0133	_TEXT
??0006 . . . . . . . . . . . . .  	L NEAR	017A	_TEXT
??0007 . . . . . . . . . . . . .  	L NEAR	0192	_TEXT
??0008 . . . . . . . . . . . . .  	L NEAR	01AA	_TEXT
??0009 . . . . . . . . . . . . .  	L NEAR	01C2	_TEXT
??000A . . . . . . . . . . . . .  	L NEAR	0209	_TEXT
??000B . . . . . . . . . . . . .  	L NEAR	0221	_TEXT
??000C . . . . . . . . . . . . .  	L NEAR	0272	_TEXT
??000D . . . . . . . . . . . . .  	L NEAR	028A	_TEXT
??000E . . . . . . . . . . . . .  	L NEAR	02A2	_TEXT
??000F . . . . . . . . . . . . .  	L NEAR	02BA	_TEXT
??0010 . . . . . . . . . . . . .  	L NEAR	02D2	_TEXT
??0011 . . . . . . . . . . . . .  	L NEAR	0323	_TEXT
??0012 . . . . . . . . . . . . .  	L NEAR	033B	_TEXT
??0013 . . . . . . . . . . . . .  	L NEAR	0353	_TEXT
??0014 . . . . . . . . . . . . .  	L NEAR	036B	_TEXT
??0015 . . . . . . . . . . . . .  	L NEAR	03BC	_TEXT
??0016 . . . . . . . . . . . . .  	L NEAR	03D9	_TEXT
??0017 . . . . . . . . . . . . .  	L NEAR	03F6	_TEXT
Microsoft (R) Macro Assembler Version 5.00                  11/25/19 00:37:54
                                                             Symbols-9


??0018 . . . . . . . . . . . . .  	L NEAR	0447	_TEXT
??0019 . . . . . . . . . . . . .  	L NEAR	045F	_TEXT
??001A . . . . . . . . . . . . .  	L NEAR	0477	_TEXT
??001B . . . . . . . . . . . . .  	L NEAR	048F	_TEXT
??001C . . . . . . . . . . . . .  	L NEAR	04A7	_TEXT
??001D . . . . . . . . . . . . .  	L NEAR	04F8	_TEXT
??001E . . . . . . . . . . . . .  	L NEAR	0510	_TEXT
??001F . . . . . . . . . . . . .  	L NEAR	0528	_TEXT
??0020 . . . . . . . . . . . . .  	L NEAR	0540	_TEXT
??0021 . . . . . . . . . . . . .  	L NEAR	0558	_TEXT
??0022 . . . . . . . . . . . . .  	L NEAR	059F	_TEXT
??0023 . . . . . . . . . . . . .  	L NEAR	05B7	_TEXT
??0024 . . . . . . . . . . . . .  	L NEAR	0608	_TEXT
??0025 . . . . . . . . . . . . .  	L NEAR	0620	_TEXT
??0026 . . . . . . . . . . . . .  	L NEAR	0638	_TEXT
??0027 . . . . . . . . . . . . .  	L NEAR	0650	_TEXT
??0028 . . . . . . . . . . . . .  	L NEAR	0668	_TEXT
??0029 . . . . . . . . . . . . .  	L NEAR	06B9	_TEXT
??002A . . . . . . . . . . . . .  	L NEAR	06D1	_TEXT
??002B . . . . . . . . . . . . .  	L NEAR	06E9	_TEXT
??002C . . . . . . . . . . . . .  	L NEAR	0701	_TEXT
??002D . . . . . . . . . . . . .  	L NEAR	0719	_TEXT
??002E . . . . . . . . . . . . .  	L NEAR	0760	_TEXT
??002F . . . . . . . . . . . . .  	L NEAR	0778	_TEXT
??0030 . . . . . . . . . . . . .  	L NEAR	1306	_TEXT
??0031 . . . . . . . . . . . . .  	L NEAR	131C	_TEXT
??0032 . . . . . . . . . . . . .  	L NEAR	1671	_TEXT
??0033 . . . . . . . . . . . . .  	L NEAR	1687	_TEXT
??0034 . . . . . . . . . . . . .  	L NEAR	1946	_TEXT
??0035 . . . . . . . . . . . . .  	L NEAR	195C	_TEXT
@CODE  . . . . . . . . . . . . .  	TEXT  _TEXT		
@CODESIZE  . . . . . . . . . . .  	TEXT  0		
@DATASIZE  . . . . . . . . . . .  	TEXT  0		
@FILENAME  . . . . . . . . . . .  	TEXT  main		


   3409 Source  Lines
   4021 Total   Lines
    438 Symbols

  51012 + 399980 Bytes symbol space free

      0 Warning Errors
      0 Severe  Errors
