.MODEL SMALL
.STACK 64
.DATA
 LOGO_NAME1 DB 3,196,196,196,196,196,196,196,196,196,196,196,196,196,196,196,196,196,196,196,196,196,196,196,196,196,196,196,196,3,10,13,"$"
 LOGO_NAME2 DB 179,"  Go Green Vegetable Store  ",179,10,13,"$"
 LOGO_NAME3 DB 3,196,196,196,196,196,196,196,196,196,196,196,196,196,196,196,196,196,196,196,196,196,196,196,196,196,196,196,196,3,10,13,"$"
 
 PROMPT_LOGIN DB 31,"       LOGIN IN PAGE       ",31,10,13,"$"
 PROMPT_ID 		 DB 16," Staff ID : ","$"
 PROMPT_PASSWORD DB 16," Password : $"
 
 INVALID_MSG1 DB "Invalid Staff ID or Password,",10,13,"$"
 INVALID_MSG2 DB "Please try again!",10,13,"$"
 
 SEPARATOR DB "____________________________","$"
 STR_SELECTION DB "Enter Your Selection : ","$"  
 STR_RETURN DB "0. Return","$"
 
 STR1_MAIN_MENU DB "MAIN MENU","$"
 STR2_MAIN_MENU DB "1. Sale","$"
 STR3_MAIN_MENU DB "2. Make Payment","$"
 STR4_MAIN_MENU DB "3. Stock In or Stock Out","$"
 STR5_MAIN_MENU DB "4. Daily Sales","$"
 STR6_MAIN_MENU DB "5. Reset","$" 
 STR8_MAIN_MENU DB "6. FORECAST SALES","$"
 STR7_MAIN_MENU DB "0. Exit","$" 
 IS_MAIN_MENU DB 0B
 
 VEGETABL1_FIXED_COST DW 3			;RM 0.03 PER 100g
 VEGETABL2_FIXED_COST DW 8			;RM 0.08 PER 100g				
 VEGETABL3_FIXED_COST DW 5			;RM 0.05 PER 100g
 VEGETABL1_FIXED_PRICE DW 10		;RM 0.10 PER 100g
 VEGETABL2_FIXED_PRICE DW 15		;RM 0.15 PER 100g
 VEGETABL3_FIXED_PRICE DW 11		;RM 0.11 PER 100g
 
 
 IS_DISPLAY_INTEGER_ONLY DB 0B
 RESET_VEGE1_TOTAL_WEIGHT_WHEN_ERROR DW 0
 VEGETABLE1_TOTAL_WEIGHT DW 0
  RESET_VEGE1_TOTAL_SALES_WHEN_ERROR DW 0
 VEGETABLE1_TOTAL_SALES DW 0
 IS_VEGETABLE1 DB 0B
  RESET_VEGE2_TOTAL_WEIGHT_WHEN_ERROR DW 0
 VEGETABLE2_TOTAL_WEIGHT DW 0
   RESET_VEGE2_TOTAL_SALES_WHEN_ERROR DW 0
 VEGETABLE2_TOTAL_SALES DW 0 
 IS_VEGETABLE2 DB 0B
  RESET_VEGE3_TOTAL_WEIGHT_WHEN_ERROR DW 0
 VEGETABLE3_TOTAL_WEIGHT DW 0
   RESET_VEGE3_TOTAL_SALES_WHEN_ERROR DW 0
 VEGETABLE3_TOTAL_SALES DW 0 
 IS_VEGETABLE3 DB 0B
 PAYMENT_TOTAL_PRICE DW 0
 PAYMENT_TOTAL_GST DW 0
  RESET_PAYMENT_TOTAL_PRICE DW 0
 RESET_PAYMENT_TOTAL_GST DW 0
 
 STR1_SALES DB "Vegetable List","$"
 STR2_SALES DB "  Vegtable	   Price/100g","$"
 STR3_SALES DB "1. Tomato	      RM 0.10","$"
 STR4_SALES DB "2. Lettuce	      RM 0.15","$"
 STR5_SALES DB "3. Cucumber	      RM 0.11","$"
 IS_SALES DB 0B 
 
 STR_AFTER_ENTER_WEIGHT DB "Your item already added to shopping cart","$"
 STR_NO_PAYMENT DB "No item is added to shopping cart","$"

  
 INPUT LABEL BYTE
 MAX_LEN DB 20
 ACT_LEN DB ?
 INPUT_DATA DB 20 DUP ('$')
 
 DEFAULT_ID DB "nbuser", 14 DUP('$')
 DEFAULT_PASSWORD DB "nbuser", 14 DUP('$')
 
 IS_VALID_ID DB 0B
 IS_VALID_PASS DB 0B
 
 ID DB 20 DUP ('$')
 PASSWORD DB 20 DUP ('$') 
 
 STR_DISPLAY_PAYMENT_DATE DB "Payment Date : ","$"
 STR_DISPLAY_PAYMENT_HEADER DB "Vegetable         Weight(g)        Price(RM)","$"
 STR_DISPLAY_PAYMENT_VEGE1 DB "Tomato","$"
 STR_DISPLAY_PAYMENT_VEGE1_RM DB "RM ","$"
 STR_DISPLAY_PAYMENT_VEGE2 DB "Lettuce","$"
  STR_DISPLAY_PAYMENT_VEGE2_RM DB "RM ","$"
 STR_DISPLAY_PAYMENT_VEGE3 DB "Cucumber","$"
  STR_DISPLAY_PAYMENT_VEGE3_RM DB "RM ","$"
 STR_DISPLAY_PAYMENT_FOOTER DB "Subtotal                           RM ","$" 
 STR_DISPLAY_PAYMENT_GST DB "Gst (6%)                           RM ","$"  
 STR_DISPLAY_PAYMENT_CHANGE DB "Change   		              RM ","$"
 
;;;///////////////////////////////////////////////////////////CALCULATION .DATA

PROMPT_VALUE DB "Enter the Weigth (g) (0 to Return) : ","$"
STR_TOTAL_PAYMENT_VALUE DB "Grand Total                        RM ","$"
PROMPT_PAYMENT_VALUE DB "Enter Payment Amount (0 to Exit) : RM ","$"
STR_CHANGE DB 10,13,"Change : RM ","$"
STR_VALUE_NOT_IN_RANGE_ERROR DB "Math error, The value is too large.","$"
STR_INVALID_VALUE_ERROR DB "Invalid input, Please try again.","$"
STR_NULL_VALUE_ERROR DB "Null value detected, Please try again.","$" 
STR_INSUFFICIENT_VALUE_ERROR DB "Insufficient Payment, Please try again.","$" 

 INPUT_VALUE LABEL BYTE
 V_MAX_LEN DB 6
 V_ACT_LEN DB ?
 INPUT_VALUE_DATA DB 6 DUP (0)
 
 VALUE DB 8 DUP (?)

DEC_ACT_LEN DB ?
 
R_INTEGER DW 0			;; = R_WEIGHT
TOTAL_INTEGER DW 0
TOTAL_WEIGHT DW 0
RESET_TOTAL_WEIGHT_WHEN_ERROR DW 0
ROUNDOFF_DECIMAL DW 0
TOTAL_DECIMAL DW 0

TEMP_TOTAL_INTEGER DW 0
TEMP_TOTAL_DECIMAL DW 0

TEN_THOUSAND DW 10000
THOUSAND DW 1000
HUNDRED DB 100
TEN DB 10
TWO DW 2

ADDER DW 0
SUMMAND DW 0
SUBTRACTOR DW 0
MINUEND DW 0
MULTIPLICANT DW 0
MULTIPLIER DW 0
DIVIDENT DW 0
DIVISOR DW 1	;;;CANNOT BE ZERO

FIXED_UNIT_COST DW 0
R_UNIT_COST DW 0
TOTAL_COST DW 0
RESET_TOTAL_COST_WHEN_ERROR DW 0
COSTING DB 0B

FIXED_PRICE_COST DW 0
R_UNIT_PRICE DW 0
TOTAL_PRICE DW 0
RESET_TOTAL_PRICE_WHEN_ERROR DW 0
PRICING DB 0B

TOTAL_GST DW 0
RESET_TOTAL_GST_WHEN_ERROR DW 0
HOLD_GST DW 0
HOLD_SALE_PRICE_DECIMAL DW 0
GST DW 6			;6%
R_SALE_PRICE DW 0
TOTAL_SALE DW 0
RESET_TOTAL_SALE_WHEN_ERROR DW 0
SALE_ING1 DB 0B
SALE_ING2 DB 0B
SALE_ING3 DB 0B
SALE_ING4 DB 0B

R_UNIT_PROFIT DW 0
TOTAL_PROFIT DW 0
RESET_TOTAL_PROFIT_WHEN_ERROR DW 0
PROFITING DB 0B

PAYMENT_AMOUNT DW 0
CHANGE_INTEGER_AMOUNT DW 0
CHANGE_DECIMAL_AMOUNT DW 0
IS_PAYMENT DB 0B
IS_CHANGE DB 0B

OPERATION_MOVER DW 0

MAX_VALUE DW 65535

NEWLINE DB 10,13,"$"

IS_TO_PRICE DB 0B
IS_TO_PRICE_DECIMAL DB 0B
IS_SUBTOTAL DB 0B
IS_GST DB 0
ENTER_ANYKEY DB "Press any key to continue . . . ","$"

STR_DAILY_SALES_TITLE DB "Go Green Daily Sales Report of ","$"

STR_DAILY_SALES_HEADER DB "Vegetable     Weight(g)     Cost(RM)     Revenue(RM)     Profit(RM)","$"
STR_DAILY_SALES_VEGE1 DB "Tomato","$"
STR_DAILY_SALES_VEGE2 DB "Lettuce","$"
STR_DAILY_SALES_VEGE3 DB "Cucumber","$"
STR_DAILY_SALES_TOTAL DB "Total","$"
STR_RM DB "RM ","$"
REPORT_TOTAL_WEIGHT_VEGE1 DW 0
REPORT_TOTAL_WEIGHT_VEGE2 DW 0
REPORT_TOTAL_WEIGHT_VEGE3 DW 0
RESET_REPORT_TOTAL_WEIGHT_VEGE1 DW 0
RESET_REPORT_TOTAL_WEIGHT_VEGE2 DW 0
RESET_REPORT_TOTAL_WEIGHT_VEGE3 DW 0
DISPLAY_REPORT_WEIGHT_VEGE1 DB 0B
DISPLAY_REPORT_WEIGHT_VEGE2 DB 0B
DISPLAY_REPORT_WEIGHT_VEGE3 DB 0B
REPORT_IS_VEGE1 DB 0B
REPORT_IS_VEGE2 DB 0B
REPORT_IS_VEGE3 DB 0B

REPORT_TOTAL_COST_VEGE1 DW 0
REPORT_TOTAL_COST_VEGE2 DW 0
REPORT_TOTAL_COST_VEGE3 DW 0
DISPLAY_REPORT_COST_VEGE1 DB 0B
DISPLAY_REPORT_COST_VEGE2 DB 0B
DISPLAY_REPORT_COST_VEGE3 DB 0B

REPORT_TOTAL_REVENUE_VEGE1 DW 0
REPORT_TOTAL_REVENUE_VEGE2 DW 0
REPORT_TOTAL_REVENUE_VEGE3 DW 0
DISPLAY_REPORT_REVENUE_VEGE1 DB 0B
DISPLAY_REPORT_REVENUE_VEGE2 DB 0B
DISPLAY_REPORT_REVENUE_VEGE3 DB 0B

REPORT_TOTAL_PROFIT_VEGE1 DW 0
REPORT_TOTAL_PROFIT_VEGE2 DW 0
REPORT_TOTAL_PROFIT_VEGE3 DW 0
DISPLAY_REPORT_PROFIT_VEGE1 DB 0B
DISPLAY_REPORT_PROFIT_VEGE2 DB 0B
DISPLAY_REPORT_PROFIT_VEGE3 DB 0B

DISPLAY_TOTAL_WEIGHT DB 0B
DISPLAY_TOTAL_COST DB 0B
DISPLAY_TOTAL_REVNUE DB 0B
DISPLAY_TOTAL_PROFIT DB 0B

RESET_REPORT_TOTAL_COST_VEGE1 DW 0
RESET_REPORT_TOTAL_COST_VEGE2 DW 0
RESET_REPORT_TOTAL_COST_VEGE3 DW 0
RESET_REPORT_REVENUE_VEGE1 DW 0
RESET_REPORT_REVENUE_VEGE2 DW 0
RESET_REPORT_REVENUE_VEGE3 DW 0
RESET_REPORT_TOTAL_PROFIT_VEGE1 DW 0
RESET_REPORT_TOTAL_PROFIT_VEGE2 DW 0
RESET_REPORT_TOTAL_PROFIT_VEGE3 DW 0

IS_TO_PRICE2 DB 0B
IS_TO_PRICE_DECIMAL2 DB 0B
STR_GO_TO_RESET DB "Total revenue is too high, reset is required","$" 
IS_RESET_REQUIRED DB 0B
STR_RESETED DB "The system has been reset successfully","$" 
STR_NO_RECORD DB "No record","$"

RESET_VEGE1_TOTAL_WEIGHT_ERROR2 DW 0

RESET_VEGE2_TOTAL_WEIGHT_ERROR2 DW 0

RESET_VEGE3_TOTAL_WEIGHT_ERROR2 DW 0
RESET_REPORT_WEIGHT_VEGE12 DW 0
RESET_REPORT_WEIGHT_VEGE22 DW 0
RESET_REPORT_WEIGHT_VEGE32 DW 0
RESET_TOTAL_WEIGHT_WHEN_ERROR2 DW 0
STR_THANK_YOU DB "Thank You, Please come again.                                         ","$"



MENU_TITLE DB " WELCOME TO STOCK IN AND STOCK OUT FUNCTION ", "$"
MENU_LIST1 DB " 1. STOCK IN ", "$"
MENU_LIST2 DB " 2. STOCK OUT " , "$"
MENU_LIST3 DB " 3. DISPLAY STOCK  ", "$"
MENU_LIST4 DB " 4. EXIT      ", "$"
ASK_USERINPUT_MENU DB " PLEASE MAKE YOUR CHOICE ( 1-STOCKIN | 2-STOCKOUT |3-DISPLAY | 4-EXIT ) > ", "$"
ERR_MSG_MENUINPUT DB " ! INVALID INPUT ! ONLY ( 1 - 4 ) IS ACCEPTED. PLEASE ENTER AGAIN. ", "$"
STOCKIN_MENU DB " ** STOCK IN ** $ ", "$"
STOCKOUT_MENU DB " ** STOCK OUT ** $ ", "$"
DISPLAY_MENU DB " ** DISPLAY STOCK ** $ ", "$"
VEGE_1 DB " 1. TOMATO    ", "$"
VEGE_2 DB " 2. LETTUCE  ", "$"
VEGE_3 DB " 3. CUCUMBER   ", "$"
VEGE_4 DB " 4. BACK   ", "$"
ASK_USERINPUT_VEGE DB "** PLEASE MAKE YOUR CHOICE (1-TOMATO | 2-LETTUCE | 3-CUCUMBER | 4-BACK ) > " , "$"
ASK_USERINPUT_STOCKIN DB " ENTER AMOUNT OF STOCK IN ( IN GRAM , CANNOT MORE THAN 65535 ) -> ", "$"
ASK_USERINPUT_STOCKOUT DB " ENTER AMOUNT OF STOCK OUT ( IN GRAM , CANNOT MORE THAN 65535 ) -> ", "$"
ERR_MSG_INPUTMORE DB " ! ERROR ! USER CANNOT ENTER MORE THAN 65535 ! PLEASE ENTER AGAIN. ", "$"
ERR_MSG_EXCEED DB " ! ERROR ! TOTAL STOCK CANNOT EXCEED 65535 ! PLEASE ENTER AGAIN.", "$"
ERR_MSG_BELOW DB " ! ERROR ! TOTAL STOCK CANNOT BELOW 0 ! PLEASE ENTER AGAIN. ", "$"
MSG_TOTALSTOCK_TOMATO DB " ** CURRENT STOCK OF TOMATO   ( GRAM )   --- >  ", "$"
MSG_TOTALSTOCK_LETTUCE DB " ** CURRENT STOCK OF LETTUCE  ( GRAM )   --- >  ", "$"
MSG_TOTALSTOCK_CUCUMBER DB " ** CURRENT STOCK OF CUCUMBER ( GRAM )   --- >  ", "$"
MSG_CONTINUEADD DB " ** DO YOU WANT TO CONTINUE STOCK IN ? ( 1 - YES | 0 - NO ) >  ", "$"
MSG_CONTINUEMINUS DB " ** DO YOU WANT TO CONTINUE STOCK OUT ? ( 1 - YES | 0 - NO ) >  ", "$"
ERR_MSG_CONTINUE DB " ! INVALID INPUT ! ONLY ( 1 / 0 ) IS ACCEPTED. PLEASE ENTER AGAIN.  ", "$"
MSG_UPDATED DB " STOCK HAS BEEN UPDATED SUCCESSFULLY !                                       ", "$"
ANYKEY DB " PRESS ANYKEY TO CONTINUE...  ", "$"

USERINPUT_MENU DB 0
USERINPUT_VEGE DB 0
USERINPUT_CONTINUE DB 0

STOCKINARRAY LABEL BYTE
STOCKINMAX DB 6
STOCKINACT DB ?
STOCKINARRAY_DATA DB 6 DUP ("$")

STOCKOUTARRAY LABEL BYTE
STOCKOUTMAX DB 6
STOCKOUTACT DB ?
STOCKOUTARRAY_DATA DB 6 DUP ("$")

ONE DW 1
TEN_STOCK DW 10
QUOTIENT DW 0

TOTAL_INPUT_STOCKIN DW 0 
TOTAL_INPUT_STOCKOUT DW 0

TOTAL_TOMATO_INSTOCK DW 10000
TOMATOINSTOCK_ARRAY DB 6 DUP ("$")
INITIALTOMATO_ARRAY DB 6 DUP ("$")

TOTAL_LETTUCE_INSTOCK DW 10000
LETTUCEINSTOCK_ARRAY DB 6 DUP ("$")
INITIALLETTUCE_ARRAY DB 6 DUP ("$")

TOTAL_CUCUMBER_INSTOCK DW 10000
CUCUMBERINSTOCK_ARRAY DB 6 DUP ("$")
INITIALCUCUMBER_ARRAY DB 6 DUP ("$")
;-----------------------------------------------------------

 TITLE_MENU DB "WELCOME TO FORECAST UNIT SALES","$"
 BELOW_TITLE DB "--------------------------------","$"
 STR1_MENU DB "1.TOMATO","$"
 STR2_MENU DB "2.LETTUCE $"
 STR3_MENU DB "3.CUCUMBER","$"
 STR4_MENU DB "4.BACK TO MAIN MENU","$"
 STR5_MENU DB "CHOOSE THE ITEM FOR THE FORECAST UNIT SALES : ","$"
 DISPLAY_ERROR_MESSAGE DB "Invalid Input, Please Try Again ","$"
 
 TITLE_FORECAST DB "FORECAST SALES","$"
 DISPLAY_SALES   DB "Vegetable       Current Stock(gram)    Price/100g", "$"
 DISPLAY_SALES_TOMATO1 DB "1. Tomato                                 RM 0.10", "$"
 DISPLAY_SALES_TOMATO2 DB "Forecast unit sales of tomato is RM ", "$"
 
 DISPLAY_SALES_LETTUCE1 DB "2. Lettuce                               RM 0.11", "$" 
 DISPLAY_SALES_LETTUCE2 DB "Forecast unit sales of lettuce is RM ", "$"

 DISPLAY_SALES_CUCUMBER1 DB "3.Cucumber                               RM 0.15", "$" 
 DISPLAY_SALES_CUCUMBER2 DB "Forecast unit sales of cucumber is RM ", "$"
 
 DISPLAY_HOLD DB "Press Any Key To Continue","$"
 
 
CUR_LETT DW 0
CUR_CUCU DW 0
 CUR_TOMATO_DISPLAY DB 5 DUP ("$")
 CUR_LETTUCE_DISPLAY DB 5 DUP ("$")
 CUR_CUCUMBER_DISPLAY DB 5 DUP ("$")


 THOUSAND_KH DW 1000
 TEN_KH DW 10
 TEN_THOU_KH DW 10000
 TWO_KH DW 2
 
 QUOTIENT_KH DW 0
 REMAINDER DW 0 
 
 R_TOMATO DW 0
 Q_TOMATO DW 0
 TOMA1 DB 2 DUP ("$")
 TOMA2 DB 4 DUP ("$")

 R_LETT DW 0
 Q_LETT DW 0
 LETT1 DB 2 DUP ("$")
 LETT2 DB 4 DUP ("$")
 
 R_CUCU DW 0
 Q_CUCU DW 0
 CUCU1 DB 2 DUP ("$")
 CUCU2 DB 4 DUP ("$")


 INPUT_KH DB 0
 ;-----------------------------------------------
.CODE
MAIN PROC
 MOV AX,@DATA
 MOV DS,AX
 
 CALL CLEAR_SCREEN
 
 CALL LOGO
 
 CALL LOGIN

 
CALL EXIT
MAIN ENDP
 ;Function
 
 ;CLEAR SCREEN
 CLEAR_SCREEN PROC

 MOV AX,0600H
 MOV BH,7FH
 MOV CX,0000H
 MOV DX,184FH
 INT 10H
 
 ;Restore cursor
 MOV AH,02H    
 MOV BH,0
 MOV DH,0   
 MOV DL,25    
 INT 10H  
 
 RET
 
 ;LOGO
 LOGO PROC
 ;BLING BLING
 MOV AX,0600H
 MOV BH,11111111B
 MOV CX,0119H
 MOV DX,0119H
 INT 10H
 
 MOV AX,0600H
 MOV BH,11111111B
 MOV CX,0136H
 MOV DX,0136H
 INT 10H
 
 MOV AX,0600H
 MOV BH,11111111B
 MOV CX,0319H
 MOV DX,0319H
 INT 10H
 
 MOV AX,0600H
 MOV BH,11111111B
 MOV CX,0336H
 MOV DX,0336H
 INT 10H
 
 ;Restore cursor
 MOV AH,02H    
 MOV BH,0
 MOV DH,01  
 MOV DL,25    
 INT 10H 
 
 MOV AH,09H
 LEA DX,LOGO_NAME1
 INT 21H
 ;Restore cursor
 MOV AH,02H    
 MOV BH,0
 MOV DH,02  
 MOV DL,25    
 INT 10H  
 
 MOV AH,09H
 LEA DX,LOGO_NAME2
 INT 21H
 ;Restore cursor
 MOV AH,02H    
 MOV BH,0
 MOV DH,03   
 MOV DL,25    
 INT 10H  
 
 MOV AH,09H
 LEA DX,LOGO_NAME3
 INT 21H
 RET

 ;LOGIN
 LOGIN PROC
 ;Restore cursor
 MOV AH,02H    
 MOV BH,0
 MOV DH,08
 MOV DL,25    
 INT 10H  
 
 MOV AH,09H
 LEA DX,PROMPT_LOGIN
 INT 21H
 
 ;Restore cursor
 MOV AH,02H    
 MOV BH,0
 MOV DH,10 
 MOV DL,25    
 INT 10H  
 
 MOV AH,09H
 LEA DX,PROMPT_ID
 INT 21H
 
 MOV CX,0
 MOV CL,MAX_LEN
 MOV SI,0
CLEARING:
 MOV ID[SI],24H
 INC SI
LOOP CLEARING

 MOV AH,0AH
 LEA DX,INPUT
 INT 21H
 
 CMP ACT_LEN,0
 JE NULL_INPUT_U_P
 JNE CON_GET_PASS

NULL_INPUT_U_P:
CALL INVALID_USER_PASS_FUNC
CON_GET_PASS: 
 
 MOV CX,0 ;!IMPORTANT
 MOV CL,ACT_LEN
 MOV SI,0
LOOP1:
 MOV AL,INPUT_DATA[SI]
 MOV ID[SI],AL
 ;Flushing
 MOV AL,24H
 MOV INPUT_DATA[SI],AL
 INC SI
LOOP LOOP1

 ;Restore cursor
 MOV AH,02H    
 MOV BH,0
 MOV DH,12 
 MOV DL,25    
 INT 10H  
 
 MOV AH,09H
 LEA DX,PROMPT_PASSWORD
 INT 21H
 
 ;READ PASSWORD

 MOV SI,0

GET_PASS:
 CMP SI,0
 JL RETURN_POSITION

 MOV AH,07H
 INT 21H
 
 CMP AL,08H
 JE BACKSPACE
 
 CMP AL,13 ;Compare with enter key
 JE VERIFY_USER
 
 MOV PASSWORD[SI],AL
 
 MOV AH,02H
 MOV DL,"*"
 INT 21H
    
 INC SI
 MOV PASSWORD[SI],"$"

JMP GET_PASS

VERIFY_USER:
 CALL VERIFY_USER_FUNC

RETURN_POSITION:
 MOV AH,02H
 MOV DL,20H
 INT 21H
 
 INC SI
 JMP GET_PASS

BACKSPACE:

 MOV AH,02H
 MOV DL,08H
 INT 21H
 MOV AH,02H
 MOV DL,20H
 INT 21H 
 MOV AH,02H
 MOV DL,08H
 INT 21H
 DEC SI

 JMP GET_PASS
 
 RET
 
VERIFY_USER_FUNC PROC

 MOV CX,20
 MOV SI,0
LOOP_ID:
 MOV AL,DEFAULT_ID[SI]
 CMP ID[SI],AL
 JE IS_VALID_ID_CHK
 JNE ERROR_MSG

CON1:
 INC SI
LOOP LOOP_ID

 MOV CX,6
 MOV SI,0
LOOP_PASS:
 MOV AL,DEFAULT_PASSWORD[SI]
 CMP PASSWORD[SI],AL
 JE IS_VALID_PASS_CHK
 JNE ERROR_MSG
 
CON2:
 INC SI
LOOP LOOP_PASS
GO_TO_MENU:
 CMP IS_VALID_PASS,1B
 JE CALL_MAIN
 
IS_VALID_ID_CHK:
 MOV IS_VALID_ID,1B
 JMP CON1
 
IS_VALID_PASS_CHK:
 MOV IS_VALID_PASS,1B
 JMP CON2
 
ERROR_MSG:
CALL INVALID_USER_PASS_FUNC
 
 
EXIT_1:
 CALL EXIT

 
CALL_MAIN:
 CALL CLEAR_SCREEN
 CALL MAIN_MENU 
RET
MAIN_MENU PROC
 MOV IS_MAIN_MENU,1B
 MOV IS_SALES,0B
 CALL LOGO

 MOV AH,02H    
 MOV BH,0
 MOV DH,7		
 MOV DL,35   
 INT 10H  
 MOV AH,09H
 LEA DX,STR1_MAIN_MENU
 INT 21H
 MOV AH,02H    
 MOV BH,0
 MOV DH,8		
 MOV DL,26  
 INT 10H  
 MOV AH,09H
 LEA DX,SEPARATOR
 INT 21H 
 MOV AH,02H    
 MOV BH,0
 MOV DH,10		
 MOV DL,26  
 INT 10H  
 MOV AH,09H
 LEA DX,STR2_MAIN_MENU
 INT 21H  
 MOV AH,02H    
 MOV BH,0
 MOV DH,11		
 MOV DL,26  
 INT 10H  
 MOV AH,09H
 LEA DX,STR3_MAIN_MENU
 INT 21H  
 MOV AH,02H    
 MOV BH,0
 MOV DH,12		
 MOV DL,26  
 INT 10H  
 MOV AH,09H
 LEA DX,STR4_MAIN_MENU
 INT 21H  
 MOV AH,02H    
 MOV BH,0
 MOV DH,13		
 MOV DL,26  
 INT 10H  
 MOV AH,09H
 LEA DX,STR5_MAIN_MENU
 INT 21H  
 MOV AH,02H    
 MOV BH,0
 MOV DH,14		
 MOV DL,26  
 INT 10H  
 MOV AH,09H
 LEA DX,STR6_MAIN_MENU
 INT 21H  
 
 MOV AH,02H    
 MOV BH,0
 MOV DH,15		
 MOV DL,26  
 INT 10H  
 
 MOV AH,09H
 LEA DX,STR8_MAIN_MENU
 INT 21H   
 
 MOV AH,02H    
 MOV BH,0
 MOV DH,16		
 MOV DL,26  
 INT 10H  
 
 MOV AH,09H
 LEA DX,STR7_MAIN_MENU
 INT 21H   
 
 MOV AH,02H
 MOV BH,0
 MOV DH,18	
 MOV DL,26
 INT 10H

 MOV AH,09H
 LEA DX,STR_SELECTION
 INT 21H  
 
 MOV AH,01H
 INT 21H


 CMP AL,31H
 JE CALL_MAINMENU_SELECTION_1

 CMP AL,32H
 JE CALL_MAINMENU_SELECTION_2
; CMP AL,33H							STOCK IN STOCK OUT

 CMP AL, 33H
 JE CALL_MAINMENU_SELECTION_3
 
 CMP AL,34H
 JE CALL_MAINMENU_SELECTION_4
 
 CMP AL,35H
 JE CALL_MAINMENU_SELECTION_5
 
 CMP AL,36H
 JE CALL_MAINMENU_SELECTION_6
 
 CMP AL,30H 
 JE CALL_EXIT1
 JNE CALL_INVALID_SELECTION 

 CALL_EXIT1:
 CALL EXIT
 CALL_INVALID_SELECTION:
CALL INVALID_SELECTION_ERROR_FUNC

CALL_MAINMENU_SELECTION_1:
CALL CLEAR_SCREEN
CALL SALES_FUNC

CALL_MAINMENU_SELECTION_2:
CMP PAYMENT_AMOUNT,0
JE DISPLAY_NO_PAYMENT
JNE CALL_DISPLAY_PAYMENT_AMOUNT1

 CALL_MAINMENU_SELECTION_3:
CALL STOCKINOUT_FUNCTION

 CALL_MAINMENU_SELECTION_6:
 CALL MENU_ITEM

CALL_DISPLAY_PAYMENT_AMOUNT1:
CALL CLEAR_SCREEN
CALL LOGO
CALL DISPLAY_PAYMENT_AMOUNT

DISPLAY_NO_PAYMENT:
CALL CLEAR_SCREEN
 ;Restore cursor
 MOV AH,02H    
 MOV BH,0
 MOV DH,5
 MOV DL,24
 INT 10H  
MOV AH,09H
LEA DX,STR_NO_PAYMENT
INT 21H
CALL MAIN_MENU

CALL_MAINMENU_SELECTION_4:
CMP IS_CHANGE,1B
JE CALL_DISPLAY_DAILY_SALE
JNE DISPLAY_NO_RECORD

CALL_DISPLAY_DAILY_SALE:
MOV IS_CHANGE,0B
CALL CLEAR_SCREEN
CALL LOGO
CALL DAILY_SALES_RECORD

DISPLAY_NO_RECORD:
CALL CLEAR_SCREEN
 ;Restore cursor
 MOV AH,02H    
 MOV BH,0
 MOV DH,5
 MOV DL,35
 INT 10H  
MOV AH,09H
LEA DX,STR_NO_RECORD
INT 21H
CALL MAIN_MENU

CALL_MAINMENU_SELECTION_5:
CALL RESET_SYSTEM_FUNC
 CALL CLEAR_SCREEN
 MOV AH,02H    
 MOV BH,0
 MOV DH,5		
 MOV DL,21
 INT 10H  
 MOV AH,09H
 LEA DX,STR_RESETED
 INT 21H
CALL MAIN_MENU
 

 
 

RET
RESET_SYSTEM_FUNC PROC
MOV IS_DISPLAY_INTEGER_ONLY,0B
MOV RESET_VEGE1_TOTAL_WEIGHT_WHEN_ERROR,0
MOV VEGETABLE1_TOTAL_WEIGHT,0
MOV RESET_VEGE1_TOTAL_SALES_WHEN_ERROR,0
MOV VEGETABLE1_TOTAL_SALES,0
MOV IS_VEGETABLE1,0B
MOV RESET_VEGE2_TOTAL_WEIGHT_WHEN_ERROR,0
MOV VEGETABLE2_TOTAL_WEIGHT,0
MOV RESET_VEGE2_TOTAL_SALES_WHEN_ERROR,0
MOV VEGETABLE2_TOTAL_SALES,0 
MOV IS_VEGETABLE2,0B
MOV RESET_VEGE3_TOTAL_WEIGHT_WHEN_ERROR,0
MOV VEGETABLE3_TOTAL_WEIGHT,0
MOV RESET_VEGE3_TOTAL_SALES_WHEN_ERROR,0
MOV VEGETABLE3_TOTAL_SALES,0 
MOV IS_VEGETABLE3,0B
MOV PAYMENT_TOTAL_PRICE,0
MOV PAYMENT_TOTAL_GST,0
MOV RESET_PAYMENT_TOTAL_PRICE,0
MOV RESET_PAYMENT_TOTAL_GST,0
 
MOV IS_SALES,0B 
 
MOV CX,6
MOV SI,0
LOOP_RESET3:
 MOV AL,0
 MOV INPUT_VALUE_DATA[SI],AL
INC SI
LOOP LOOP_RESET3

MOV CX,8
MOV SI,0
LOOP_RESET03:
 MOV AL,0
 MOV VALUE[SI],AL
INC SI
LOOP LOOP_RESET03

MOV DEC_ACT_LEN,0
MOV R_INTEGER,0			;; = R_WEIGHT
MOV TOTAL_INTEGER,0
MOV TOTAL_WEIGHT,0
MOV RESET_TOTAL_WEIGHT_WHEN_ERROR,0
MOV ROUNDOFF_DECIMAL,0
MOV TOTAL_DECIMAL,0

MOV TEMP_TOTAL_INTEGER,0
MOV TEMP_TOTAL_DECIMAL,0

MOV ADDER,0
MOV SUMMAND,0
MOV SUBTRACTOR,0
MOV MINUEND,0
MOV MULTIPLICANT,0
MOV MULTIPLIER,0
MOV DIVIDENT,0
MOV DIVISOR,1	;;;CANNOT BE ZERO

MOV FIXED_UNIT_COST,0
MOV R_UNIT_COST,0
MOV TOTAL_COST,0
MOV RESET_TOTAL_COST_WHEN_ERROR,0
MOV COSTING,0B

MOV FIXED_PRICE_COST,0
MOV R_UNIT_PRICE,0
MOV TOTAL_PRICE,0
MOV RESET_TOTAL_PRICE_WHEN_ERROR,0
MOV PRICING,0B

MOV TOTAL_GST,0
MOV RESET_TOTAL_GST_WHEN_ERROR,0
MOV HOLD_GST,0
MOV HOLD_SALE_PRICE_DECIMAL,0

MOV R_SALE_PRICE,0
MOV TOTAL_SALE,0
MOV RESET_TOTAL_SALE_WHEN_ERROR,0
MOV SALE_ING1,0B
MOV SALE_ING2,0B
MOV SALE_ING3,0B
MOV SALE_ING4,0B

MOV R_UNIT_PROFIT,0
MOV TOTAL_PROFIT,0
MOV RESET_TOTAL_PROFIT_WHEN_ERROR,0
MOV PROFITING,0B

MOV PAYMENT_AMOUNT,0
MOV CHANGE_INTEGER_AMOUNT,0
MOV CHANGE_DECIMAL_AMOUNT,0
MOV IS_PAYMENT,0B
MOV IS_CHANGE,0B

MOV OPERATION_MOVER,0

MOV IS_TO_PRICE,0B
MOV IS_TO_PRICE_DECIMAL,0B
MOV IS_SUBTOTAL,0B
MOV IS_GST,0

MOV REPORT_TOTAL_WEIGHT_VEGE1,0
MOV REPORT_TOTAL_WEIGHT_VEGE2,0
MOV REPORT_TOTAL_WEIGHT_VEGE3,0
MOV RESET_REPORT_TOTAL_WEIGHT_VEGE1,0
MOV RESET_REPORT_TOTAL_WEIGHT_VEGE2,0
MOV RESET_REPORT_TOTAL_WEIGHT_VEGE3,0
MOV DISPLAY_REPORT_WEIGHT_VEGE1,0B
MOV DISPLAY_REPORT_WEIGHT_VEGE2,0B
MOV DISPLAY_REPORT_WEIGHT_VEGE3,0B
MOV REPORT_IS_VEGE1,0B
MOV REPORT_IS_VEGE2,0B
MOV REPORT_IS_VEGE3,0B

MOV REPORT_TOTAL_COST_VEGE1,0
MOV REPORT_TOTAL_COST_VEGE2,0
MOV REPORT_TOTAL_COST_VEGE3,0
MOV DISPLAY_REPORT_COST_VEGE1,0B
MOV DISPLAY_REPORT_COST_VEGE2,0B
MOV DISPLAY_REPORT_COST_VEGE3,0B

MOV REPORT_TOTAL_REVENUE_VEGE1,0
MOV REPORT_TOTAL_REVENUE_VEGE2,0
MOV REPORT_TOTAL_REVENUE_VEGE3,0
MOV DISPLAY_REPORT_REVENUE_VEGE1,0B
MOV DISPLAY_REPORT_REVENUE_VEGE2,0B
MOV DISPLAY_REPORT_REVENUE_VEGE3,0B

MOV REPORT_TOTAL_PROFIT_VEGE1,0
MOV REPORT_TOTAL_PROFIT_VEGE2,0
MOV REPORT_TOTAL_PROFIT_VEGE3,0
MOV DISPLAY_REPORT_PROFIT_VEGE1,0B
MOV DISPLAY_REPORT_PROFIT_VEGE2,0B
MOV DISPLAY_REPORT_PROFIT_VEGE3,0B

MOV DISPLAY_TOTAL_WEIGHT,0B
MOV DISPLAY_TOTAL_COST,0B
MOV DISPLAY_TOTAL_REVNUE,0B
MOV DISPLAY_TOTAL_PROFIT,0B

MOV RESET_REPORT_TOTAL_COST_VEGE1,0
MOV RESET_REPORT_TOTAL_COST_VEGE2,0
MOV RESET_REPORT_TOTAL_COST_VEGE3,0
MOV RESET_REPORT_REVENUE_VEGE1,0
MOV RESET_REPORT_REVENUE_VEGE2,0
MOV RESET_REPORT_REVENUE_VEGE3,0
MOV RESET_REPORT_TOTAL_PROFIT_VEGE1,0
MOV RESET_REPORT_TOTAL_PROFIT_VEGE2,0
MOV RESET_REPORT_TOTAL_PROFIT_VEGE3,0

MOV IS_TO_PRICE2,0B
MOV IS_TO_PRICE_DECIMAL2,0B
MOV AX,0
MOV BX,0
MOV CX,0
MOV DX,0
MOV SI,0
MOV DI,0
RET

SALES_FUNC PROC
 MOV IS_MAIN_MENU,0B
 MOV IS_SALES,1B
 CALL LOGO

 MOV AH,02H    
 MOV BH,0
 MOV DH,7		
 MOV DL,33  
 INT 10H  
 MOV AH,09H
 LEA DX,STR1_SALES
 INT 21H
 MOV AH,02H    
 MOV BH,0
 MOV DH,9		
 MOV DL,26  
 INT 10H  
 MOV AH,09H
 LEA DX,STR2_SALES
 INT 21H  
 MOV AH,02H    
 MOV BH,0
 MOV DH,10		
 MOV DL,26  
 INT 10H  
 MOV AH,09H
 LEA DX,SEPARATOR
 INT 21H 

  MOV AH,02H    
 MOV BH,0
 MOV DH,12		
 MOV DL,26  
 INT 10H  
 MOV AH,09H
 LEA DX,STR3_SALES
 INT 21H 
  MOV AH,02H    
 MOV BH,0
 MOV DH,13		
 MOV DL,26  
 INT 10H  
 MOV AH,09H
 LEA DX,STR4_SALES
 INT 21H 
   MOV AH,02H    
 MOV BH,0
 MOV DH,14		
 MOV DL,26  
 INT 10H  
 MOV AH,09H
 LEA DX,STR5_SALES
 INT 21H 
  MOV AH,02H    
 MOV BH,0
 MOV DH,15		
 MOV DL,26  
 INT 10H  
 MOV AH,09H
 LEA DX,STR_RETURN
 INT 21H 
   MOV AH,02H    
 MOV BH,0
 MOV DH,17		
 MOV DL,26  
 INT 10H  
 MOV AH,09H
 LEA DX,STR_SELECTION
 INT 21H 
 
 MOV AH,01H
 INT 21H
;////////////////////////////////////////////////////////////////////////////CURRENT POINTER///////////////////////////////////////////////////

 CMP AL,31H
 JE CALL_SALES_SELECTION_1
 CMP AL,32H
 JE CALL_SALES_SELECTION_2
 CMP AL,33H
 JE CALL_SALES_SELECTION_3

 CMP AL,30H 
 JE CALL_RETURN_MENU1
 JNE CALL_INVALID_SELECTION_SALES 
 
   CALL_RETURN_MENU1:
 CALL CLEAR_SCREEN
 CALL MAIN_MENU
 
 CALL_INVALID_SELECTION_SALES:
CALL INVALID_SELECTION_ERROR_FUNC
 
CALL_SALES_SELECTION_1:
 MOV IS_VEGETABLE1,1B
  MOV IS_VEGETABLE2,0B
   MOV IS_VEGETABLE3,0B
 MOV REPORT_IS_VEGE1,1B
 MOV AX,VEGETABL1_FIXED_COST
 MOV FIXED_UNIT_COST,AX
 MOV AX,VEGETABL1_FIXED_PRICE
 MOV FIXED_PRICE_COST,AX
 MOV AX,0
 JMP JMP_TO_PROMPT_VALUE
 
CALL_SALES_SELECTION_2:
 MOV IS_VEGETABLE1,0B
  MOV IS_VEGETABLE2,1B
   MOV IS_VEGETABLE3,0B
  MOV REPORT_IS_VEGE2,1B
 MOV AX,VEGETABL2_FIXED_COST
 MOV FIXED_UNIT_COST,AX
 MOV AX,VEGETABL2_FIXED_PRICE
 MOV FIXED_PRICE_COST,AX
 MOV AX,0
 JMP JMP_TO_PROMPT_VALUE
 
CALL_SALES_SELECTION_3:
 MOV IS_VEGETABLE1,0B
  MOV IS_VEGETABLE2,0B
   MOV IS_VEGETABLE3,1B
  MOV REPORT_IS_VEGE3,1B
 MOV AX,VEGETABL3_FIXED_COST
 MOV FIXED_UNIT_COST,AX
 MOV AX,VEGETABL3_FIXED_PRICE
 MOV FIXED_PRICE_COST,AX
 MOV AX,0
 JMP JMP_TO_PROMPT_VALUE
 

JMP_TO_PROMPT_VALUE:
 CALL CLEAR_SCREEN
 CALL LOGO
 CALL PROMPT_VALUE_FUNCTION

RET



INVALID_SELECTION_ERROR_FUNC PROC
 CALL CLEAR_SCREEN
 MOV AH,02H    
 MOV BH,0
 MOV DH,5		
 MOV DL,25
 INT 10H  
 MOV AH,09H
 LEA DX,STR_INVALID_VALUE_ERROR
 INT 21H
 CMP IS_MAIN_MENU,1B
 JE GO_BACK_MAIN_MENU 
 CMP IS_SALES,1B
 JE GO_BACK_SALES
 
GO_BACK_MAIN_MENU:
 CALL MAIN_MENU
GO_BACK_SALES:
 CALL SALES_FUNC
RET


INVALID_USER_PASS_FUNC PROC
 CALL CLEAR_SCREEN

 ;Restore cursor
 MOV AH,02H    
 MOV BH,0
 MOV DH,5
 MOV DL,25    
 INT 10H  
 
 MOV AH,09H
 LEA DX,INVALID_MSG1
 INT 21H
 
  ;Restore cursor
 MOV AH,02H    
 MOV BH,0
 MOV DH,6
 MOV DL,25    
 INT 10H  
 
 MOV AH,09H
 LEA DX,INVALID_MSG2
 INT 21H
 
 ;Restore cursor
 MOV AH,02H    
 MOV BH,0
 MOV DH,0		;;GO TO THE SPECIFIC LINE START FROM 0
 MOV DL,25    
 INT 10H  

 CALL LOGO
 
 CALL LOGIN
RET


;////////////////////////////////////////////// CALCULATION .CODE Function ;;;////////////////////////////////////////////////////
 PROMPT_VALUE_FUNCTION PROC
 MOV TOTAL_INTEGER,0 ;;;;;;;;;;;;;;;;;;;;;;;;;RESET;;;;!
 
 CMP IS_PAYMENT,1B
 JE CALL_PAYMENT_FUNC
 JNE CALL_OPERATION_FUNC
 
CALL_PAYMENT_FUNC:
 MOV AH,02H    
 MOV BH,0
 MOV DH,19		
 MOV DL,19
 INT 10H  
MOV AH,09H
LEA DX,PROMPT_PAYMENT_VALUE
INT 21H
JMP CONTINUE_GET

CALL_OPERATION_FUNC:
 MOV AH,02H    
 MOV BH,0
 MOV DH,8	
 MOV DL,25
 INT 10H  
MOV AH,09H
LEA DX,STR2_SALES
INT 21H 

 CMP IS_VEGETABLE1,1B
 JE DISPLAY_STR_VEGE1
 CMP IS_VEGETABLE2,1B
 JE DISPLAY_STR_VEGE2
 CMP IS_VEGETABLE3,1B
 JE DISPLAY_STR_VEGE3

 DISPLAY_STR_VEGE1:
 MOV AH,02H    
 MOV BH,0
 MOV DH,10	
 MOV DL,25
 INT 10H  
MOV AH,09H
LEA DX,STR3_SALES
INT 21H 
JMP TO_PROMPT_VALUE
 DISPLAY_STR_VEGE2:
 MOV AH,02H    
 MOV BH,0
 MOV DH,10	
 MOV DL,25
 INT 10H  
MOV AH,09H
LEA DX,STR4_SALES
INT 21H 
JMP TO_PROMPT_VALUE
 DISPLAY_STR_VEGE3:
 MOV AH,02H    
 MOV BH,0
 MOV DH,10	
 MOV DL,25
 INT 10H  
MOV AH,09H
LEA DX,STR5_SALES
INT 21H 
JMP TO_PROMPT_VALUE

TO_PROMPT_VALUE:
 MOV AH,02H    
 MOV BH,0
 MOV DH,12		
 MOV DL,23
 INT 10H  

MOV AH,09H
LEA DX,PROMPT_VALUE
INT 21H

CONTINUE_GET:
 MOV AH,0AH
 LEA DX,INPUT_VALUE
 INT 21H
 
 MOV AH,09H
 LEA DX,NEWLINE
 INT 21H
 
 CMP V_ACT_LEN,0
 JE NULL_VALUE
 JNE CHECK_RETURN
 
NULL_VALUE:
CALL STR_NULL_VALUE_ERROR_FUNC

CHECK_RETURN:
 MOV AL,INPUT_VALUE_DATA[0]
 CMP AL,30H
 JE CHECK_RETURN_MENU
 JNE CHK_INPUT
 
CHECK_RETURN_MENU:
CMP IS_PAYMENT,1B
JE RETURN_MAIN_MENU
JNE RETURN_SALE_MENU
 
RETURN_MAIN_MENU:
  MOV IS_PAYMENT,0B
CALL CLEAR_SCREEN
CALL MAIN_MENU

RETURN_SALE_MENU:
MOV IS_VEGETABLE1,0B
MOV IS_VEGETABLE2,0B
MOV IS_VEGETABLE3,0B
 MOV REPORT_IS_VEGE1,0B
  MOV REPORT_IS_VEGE2,0B
   MOV REPORT_IS_VEGE3,0B
CALL CLEAR_SCREEN
 CALL SALES_FUNC
 
CHK_INPUT:
 MOV CX,0
 MOV CL,V_ACT_LEN
 MOV SI,0
CHK_INVALID_INPUT:
 MOV AL,INPUT_VALUE_DATA[SI]
 CMP AL,30H
 JB INVALID_VALUE_ERROR
 CMP AL,39H
 JA INVALID_VALUE_ERROR
 
INC SI
LOOP CHK_INVALID_INPUT
JMP VALID_INPUT

 INVALID_VALUE_ERROR:
 CALL INVALID_VALUE_ERROR_FUNC

VALID_INPUT:
 MOV AL,V_ACT_LEN
 MOV DEC_ACT_LEN,AL
 
MOV CX,0
MOV CL,DEC_ACT_LEN
MOV SI,0

LOOP_ADD_INTEGER:
 MOV AL,INPUT_VALUE_DATA[SI]
 SUB AL,30H

 CMP DEC_ACT_LEN,5
 JE CALL_START_TEN_THOUSAND
 
 CMP DEC_ACT_LEN,4
 JE CALL_THOUSAND
 
 CMP DEC_ACT_LEN,3
 JE CALL_HUNDRED
 
 CMP DEC_ACT_LEN,2
 JE CALL_TEN
 
 CMP DEC_ACT_LEN,1
 JE CALL_DIGIT
 
CALL_START_TEN_THOUSAND:
CALL START_TEN_THOUSAND

CALL_THOUSAND:
CALL CONTINUE_THOUDSAND

CALL_HUNDRED:
CALL CONTINUE_HUNDRED

CALL_TEN:
CALL CONTINUE_TEN

CALL_DIGIT:
CALL CONTINUE_DIGIT

CONTINUE_ADD_INTEGER:
INC SI
LOOP LOOP_ADD_INTEGER
 
RET

;//START STORE INPUT IN AN INTEGER
START_TEN_THOUSAND PROC

 MOV AH,0
 MOV R_INTEGER,AX
 
 MOV AX,R_INTEGER
 MUL TEN_THOUSAND
 JC CALL_ERROR_VALUE1
 JNC CALL_PROPER_VALUE1
 
CALL_PROPER_VALUE1:
 MOV R_INTEGER,AX
 ADD TOTAL_INTEGER,AX

 DEC DEC_ACT_LEN
  MOV AX,TOTAL_INTEGER
 ;LIMIT INPUT 6000G
CMP AX,6000
JG CALL_ERROR_VALUE1
 MOV AX,R_INTEGER
CALL CONTINUE_ADD_INTEGER

CALL_ERROR_VALUE1:
   MOV AX,TOTAL_SALE
 MOV RESET_TOTAL_SALE_WHEN_ERROR,AX
 MOV AX,PAYMENT_TOTAL_PRICE
MOV RESET_PAYMENT_TOTAL_PRICE,AX 
MOV AX,PAYMENT_TOTAL_GST
MOV RESET_PAYMENT_TOTAL_GST,AX
MOV AX,REPORT_TOTAL_COST_VEGE1
MOV RESET_REPORT_TOTAL_COST_VEGE1,AX
MOV AX,REPORT_TOTAL_COST_VEGE2
MOV RESET_REPORT_TOTAL_COST_VEGE2,AX 
MOV AX,REPORT_TOTAL_COST_VEGE3
MOV RESET_REPORT_TOTAL_COST_VEGE3,AX

MOV AX,REPORT_TOTAL_REVENUE_VEGE1
MOV RESET_REPORT_REVENUE_VEGE1,AX
MOV AX,REPORT_TOTAL_REVENUE_VEGE2
MOV RESET_REPORT_REVENUE_VEGE2,AX 
MOV AX,REPORT_TOTAL_REVENUE_VEGE3
MOV RESET_REPORT_REVENUE_VEGE3,AX

MOV AX,REPORT_TOTAL_PROFIT_VEGE1
MOV RESET_REPORT_TOTAL_PROFIT_VEGE1,AX
MOV AX,REPORT_TOTAL_PROFIT_VEGE2
MOV RESET_REPORT_TOTAL_PROFIT_VEGE2,AX
MOV AX,REPORT_TOTAL_PROFIT_VEGE3
MOV RESET_REPORT_TOTAL_PROFIT_VEGE3,AX
MOV AX,TOTAL_COST
MOV RESET_TOTAL_COST_WHEN_ERROR,AX

MOV AX,TOTAL_PROFIT
MOV RESET_TOTAL_PROFIT_WHEN_ERROR,AX
CMP IS_VEGETABLE1,1B
JE CHK1
CMP IS_VEGETABLE2,1B
JE CHK2
CMP IS_VEGETABLE3,1B
JE CHK3

CHK1:
MOV AX,RESET_VEGE1_TOTAL_SALES_WHEN_ERROR
MOV VEGETABLE1_TOTAL_SALES,AX
MOV AX,VEGETABLE2_TOTAL_SALES
MOV RESET_VEGE2_TOTAL_SALES_WHEN_ERROR,AX
MOV AX,VEGETABLE3_TOTAL_SALES
MOV RESET_VEGE3_TOTAL_SALES_WHEN_ERROR,AX
JMP TRY_CON
CHK2:
MOV AX,VEGETABLE1_TOTAL_SALES
MOV RESET_VEGE1_TOTAL_SALES_WHEN_ERROR,AX
MOV AX,RESET_VEGE2_TOTAL_SALES_WHEN_ERROR
MOV VEGETABLE2_TOTAL_SALES,AX
MOV AX,VEGETABLE3_TOTAL_SALES
MOV RESET_VEGE3_TOTAL_SALES_WHEN_ERROR,AX
JMP TRY_CON
CHK3:
MOV AX,VEGETABLE1_TOTAL_SALES
MOV RESET_VEGE1_TOTAL_SALES_WHEN_ERROR,AX
MOV AX,VEGETABLE2_TOTAL_SALES
MOV RESET_VEGE2_TOTAL_SALES_WHEN_ERROR,AX
MOV AX,RESET_VEGE3_TOTAL_SALES_WHEN_ERROR
MOV VEGETABLE3_TOTAL_SALES,AX
JMP TRY_CON

TRY_CON:
MOV R_INTEGER,0
MOV TOTAL_INTEGER,0
 CALL VALUE_NOT_IN_RANGE_ERROR_FUNC

RET

CONTINUE_THOUDSAND PROC

 MOV AH,0
 MOV R_INTEGER,AX
 
 MOV AX,R_INTEGER
 MUL THOUSAND
 MOV R_INTEGER,AX
 ADD TOTAL_INTEGER,AX
 JC CALL_ERROR_VALUE2

 DEC DEC_ACT_LEN
 
CALL CONTINUE_ADD_INTEGER

CALL_ERROR_VALUE2:
MOV R_INTEGER,0
MOV TOTAL_INTEGER,0
 CALL VALUE_NOT_IN_RANGE_ERROR_FUNC
 RET


CONTINUE_HUNDRED  PROC
 MOV AH,0
 MOV R_INTEGER,AX
 
 MOV AX,R_INTEGER
 MUL HUNDRED
 MOV R_INTEGER,AX
 ADD TOTAL_INTEGER,AX
 JC CALL_ERROR_VALUE3

 DEC DEC_ACT_LEN
 
CALL CONTINUE_ADD_INTEGER

CALL_ERROR_VALUE3:
MOV R_INTEGER,0
MOV TOTAL_INTEGER,0
 CALL VALUE_NOT_IN_RANGE_ERROR_FUNC
RET

CONTINUE_TEN PROC
 MOV AH,0
 MOV R_INTEGER,AX
 
 MOV AX,R_INTEGER
 MUL TEN
 MOV R_INTEGER,AX
 ADD TOTAL_INTEGER,AX
 JC CALL_ERROR_VALUE4

 DEC DEC_ACT_LEN
 
CALL CONTINUE_ADD_INTEGER

CALL_ERROR_VALUE4:
MOV R_INTEGER,0
MOV TOTAL_INTEGER,0
 CALL VALUE_NOT_IN_RANGE_ERROR_FUNC
 RET
 
CONTINUE_DIGIT PROC
 MOV AH,0
 MOV R_INTEGER,AX
 
 MOV AX,R_INTEGER
 MOV R_INTEGER,AX
 ADD TOTAL_INTEGER,AX
 JC CALL_ERROR_VALUE5
 DEC DEC_ACT_LEN
 MOV AX,TOTAL_INTEGER
 ;LIMIT INPUT 6000G
CMP AX,6000
JA CALL_ERROR_VALUE5
 MOV R_INTEGER,AX


 JMP JUMP_IF_NO_ERROR
 
CALL_ERROR_VALUE5:
   MOV AX,TOTAL_SALE
 MOV RESET_TOTAL_SALE_WHEN_ERROR,AX
 MOV AX,PAYMENT_TOTAL_PRICE
MOV RESET_PAYMENT_TOTAL_PRICE,AX 
MOV AX,PAYMENT_TOTAL_GST
MOV RESET_PAYMENT_TOTAL_GST,AX
MOV AX,REPORT_TOTAL_COST_VEGE1
MOV RESET_REPORT_TOTAL_COST_VEGE1,AX
MOV AX,REPORT_TOTAL_COST_VEGE2
MOV RESET_REPORT_TOTAL_COST_VEGE2,AX 
MOV AX,REPORT_TOTAL_COST_VEGE3
MOV RESET_REPORT_TOTAL_COST_VEGE3,AX

MOV AX,REPORT_TOTAL_REVENUE_VEGE1
MOV RESET_REPORT_REVENUE_VEGE1,AX
MOV AX,REPORT_TOTAL_REVENUE_VEGE2
MOV RESET_REPORT_REVENUE_VEGE2,AX 
MOV AX,REPORT_TOTAL_REVENUE_VEGE3
MOV RESET_REPORT_REVENUE_VEGE3,AX

MOV AX,REPORT_TOTAL_PROFIT_VEGE1
MOV RESET_REPORT_TOTAL_PROFIT_VEGE1,AX
MOV AX,REPORT_TOTAL_PROFIT_VEGE2
MOV RESET_REPORT_TOTAL_PROFIT_VEGE2,AX
MOV AX,REPORT_TOTAL_PROFIT_VEGE3
MOV RESET_REPORT_TOTAL_PROFIT_VEGE3,AX
MOV AX,TOTAL_COST
MOV RESET_TOTAL_COST_WHEN_ERROR,AX

MOV AX,TOTAL_PROFIT
MOV RESET_TOTAL_PROFIT_WHEN_ERROR,AX
CMP IS_VEGETABLE1,1B
JE CHK12
CMP IS_VEGETABLE2,1B
JE CHK22
CMP IS_VEGETABLE3,1B
JE CHK32

CHK12:
MOV AX,RESET_VEGE1_TOTAL_SALES_WHEN_ERROR
MOV VEGETABLE1_TOTAL_SALES,AX
MOV AX,VEGETABLE2_TOTAL_SALES
MOV RESET_VEGE2_TOTAL_SALES_WHEN_ERROR,AX
MOV AX,VEGETABLE3_TOTAL_SALES
MOV RESET_VEGE3_TOTAL_SALES_WHEN_ERROR,AX
JMP TRY_CON2
CHK22:
MOV AX,VEGETABLE1_TOTAL_SALES
MOV RESET_VEGE1_TOTAL_SALES_WHEN_ERROR,AX
MOV AX,RESET_VEGE2_TOTAL_SALES_WHEN_ERROR
MOV VEGETABLE2_TOTAL_SALES,AX
MOV AX,VEGETABLE3_TOTAL_SALES
MOV RESET_VEGE3_TOTAL_SALES_WHEN_ERROR,AX
JMP TRY_CON2
CHK32:
MOV AX,VEGETABLE1_TOTAL_SALES
MOV RESET_VEGE1_TOTAL_SALES_WHEN_ERROR,AX
MOV AX,VEGETABLE2_TOTAL_SALES
MOV RESET_VEGE2_TOTAL_SALES_WHEN_ERROR,AX
MOV AX,RESET_VEGE3_TOTAL_SALES_WHEN_ERROR
MOV VEGETABLE3_TOTAL_SALES,AX
JMP TRY_CON2
TRY_CON2:
 CALL VALUE_NOT_IN_RANGE_ERROR_FUNC
 
JUMP_IF_NO_ERROR:
CMP IS_PAYMENT,1B
JE CHECK_OTHER
 CMP IS_VEGETABLE1,1B
 JE CAL_TOTAL_WEIGHT_VEGE1
 CMP IS_VEGETABLE2,1B
 JE CAL_TOTAL_WEIGHT_VEGE2
 CMP IS_VEGETABLE3,1B
 JE CAL_TOTAL_WEIGHT_VEGE3


 CAL_TOTAL_WEIGHT_VEGE1:
  MOV AX,VEGETABLE1_TOTAL_WEIGHT
  MOV RESET_VEGE1_TOTAL_WEIGHT_ERROR2,AX
  MOV AX,R_INTEGER
  ADD VEGETABLE1_TOTAL_WEIGHT,AX
  
  MOV AX,REPORT_TOTAL_WEIGHT_VEGE1
MOV RESET_REPORT_WEIGHT_VEGE12,AX
    MOV AX,R_INTEGER
	
  ADD REPORT_TOTAL_WEIGHT_VEGE1,AX
  JMP CHECK_OTHER
  CAL_TOTAL_WEIGHT_VEGE2:
    MOV AX,VEGETABLE2_TOTAL_WEIGHT
  MOV RESET_VEGE2_TOTAL_WEIGHT_ERROR2,AX
  MOV AX,R_INTEGER
  ADD VEGETABLE2_TOTAL_WEIGHT,AX
    MOV AX,REPORT_TOTAL_WEIGHT_VEGE2
MOV RESET_REPORT_WEIGHT_VEGE22,AX
    MOV AX,R_INTEGER
  ADD REPORT_TOTAL_WEIGHT_VEGE2,AX
   JMP CHECK_OTHER
  CAL_TOTAL_WEIGHT_VEGE3:
    MOV AX,VEGETABLE3_TOTAL_WEIGHT
  MOV RESET_VEGE3_TOTAL_WEIGHT_ERROR2,AX
  MOV AX,R_INTEGER
  ADD VEGETABLE3_TOTAL_WEIGHT,AX
    MOV AX,REPORT_TOTAL_WEIGHT_VEGE3
MOV RESET_REPORT_WEIGHT_VEGE32,AX
    MOV AX,R_INTEGER
  ADD REPORT_TOTAL_WEIGHT_VEGE3,AX
   JMP CHECK_OTHER
CHECK_OTHER:
 CMP IS_PAYMENT,1B
 JE CALL_PAYMENT_FUNC2
 JNE CALL_OPERATION_FUNC2
 
CALL_PAYMENT_FUNC2:
MOV IS_PAYMENT,0B 		;//////////////
CALL MAKE_PAYMENT_CALCULATOR
 
CALL_OPERATION_FUNC2:
MOV AX,TOTAL_WEIGHT
MOV RESET_TOTAL_WEIGHT_WHEN_ERROR2,AX
MOV AX,R_INTEGER
 ADD TOTAL_WEIGHT,AX
MOV AX,VEGETABLE1_TOTAL_WEIGHT
MOV RESET_VEGE1_TOTAL_WEIGHT_WHEN_ERROR,AX
MOV AX,VEGETABLE2_TOTAL_WEIGHT
MOV RESET_VEGE2_TOTAL_WEIGHT_WHEN_ERROR,AX
MOV AX,VEGETABLE3_TOTAL_WEIGHT
MOV RESET_VEGE3_TOTAL_WEIGHT_WHEN_ERROR,AX

MOV AX,REPORT_TOTAL_WEIGHT_VEGE1
MOV RESET_REPORT_TOTAL_WEIGHT_VEGE1,AX
MOV AX,REPORT_TOTAL_WEIGHT_VEGE2
MOV RESET_REPORT_TOTAL_WEIGHT_VEGE2,AX
MOV AX,REPORT_TOTAL_WEIGHT_VEGE3
MOV RESET_REPORT_TOTAL_WEIGHT_VEGE3,AX

MOV AX,REPORT_TOTAL_COST_VEGE1
MOV RESET_REPORT_TOTAL_COST_VEGE1,AX
MOV AX,REPORT_TOTAL_COST_VEGE2
MOV RESET_REPORT_TOTAL_COST_VEGE2,AX
MOV AX,REPORT_TOTAL_COST_VEGE3
MOV RESET_REPORT_TOTAL_COST_VEGE3,AX

MOV AX,REPORT_TOTAL_REVENUE_VEGE1
MOV RESET_REPORT_REVENUE_VEGE1,AX
MOV AX,REPORT_TOTAL_REVENUE_VEGE2
MOV RESET_REPORT_REVENUE_VEGE2,AX
MOV AX,REPORT_TOTAL_REVENUE_VEGE3
MOV RESET_REPORT_REVENUE_VEGE3,AX

MOV AX,REPORT_TOTAL_PROFIT_VEGE1
MOV RESET_REPORT_TOTAL_PROFIT_VEGE1,AX
MOV AX,REPORT_TOTAL_PROFIT_VEGE2
MOV RESET_REPORT_TOTAL_PROFIT_VEGE2,AX
MOV AX,REPORT_TOTAL_PROFIT_VEGE3
MOV RESET_REPORT_TOTAL_PROFIT_VEGE3,AX

MOV AX,VEGETABLE1_TOTAL_SALES
MOV RESET_VEGE1_TOTAL_SALES_WHEN_ERROR,AX
MOV AX,VEGETABLE2_TOTAL_SALES
MOV RESET_VEGE2_TOTAL_SALES_WHEN_ERROR,AX
MOV AX,VEGETABLE3_TOTAL_SALES
MOV RESET_VEGE3_TOTAL_SALES_WHEN_ERROR,AX

MOV AX,PAYMENT_TOTAL_PRICE
MOV RESET_PAYMENT_TOTAL_PRICE,AX
MOV AX,PAYMENT_TOTAL_GST
MOV RESET_PAYMENT_TOTAL_GST,AX

MOV AX,TOTAL_WEIGHT
MOV RESET_TOTAL_WEIGHT_WHEN_ERROR,AX
MOV AX,TOTAL_COST
MOV RESET_TOTAL_COST_WHEN_ERROR,AX
MOV AX,TOTAL_PRICE
MOV RESET_TOTAL_PRICE_WHEN_ERROR,AX
MOV AX,TOTAL_SALE
MOV RESET_TOTAL_SALE_WHEN_ERROR,AX
MOV AX,TOTAL_GST
MOV RESET_TOTAL_GST_WHEN_ERROR,AX
MOV AX,TOTAL_PROFIT
MOV RESET_TOTAL_PROFIT_WHEN_ERROR,AX

MOV IS_CHANGE,0B
CALL COST_CALCULATOR					;;;OPERATION


 RET
;//END STORE INPUT IN AN INTEGER


;//START CALCULATION
ADD_FUNCTION PROC
;MOV ADDER,2
MOV DX,0
MOV AX,SUMMAND
ADD ADDER,AX
JC CALL_VALUE_NOT_IN_RANGE_ERROR1
JNC CALL_CONTINUE_CAL_OR_DISPLAY1

CALL_CONTINUE_CAL_OR_DISPLAY1:
 CMP SALE_ING3,1B
 JE CALCULATE_TOTAL_R_SALE3
 CMP SALE_ING4,1B
 JE CALCULATE_TOTAL_R_SALE4
 
CALCULATE_TOTAL_R_SALE3:
 MOV AX,ADDER 
 MOV R_SALE_PRICE,AX
 MOV HOLD_GST,AX
 ADD TOTAL_GST,AX
 ADD PAYMENT_TOTAL_GST,AX
 CALL SALE_PRICE_CALCULATOR4
 
CALCULATE_TOTAL_R_SALE4:
 MOV AX,ADDER 
 MOV R_SALE_PRICE,AX
   MOV AX,TOTAL_SALE
 MOV RESET_TOTAL_SALE_WHEN_ERROR,AX
 MOV AX,R_SALE_PRICE
 ADD TOTAL_SALE,AX
 JC CALL_VALUE_NOT_IN_RANGE_ERROR1
 MOV AX,TOTAL_SALE
 CMP AX,MAX_VALUE
 JAE CALL_VALUE_NOT_IN_RANGE_ERROR1
 JB JUMP_GO_ON
 
 CALL_VALUE_NOT_IN_RANGE_ERROR1:
MOV AX,RESET_TOTAL_WEIGHT_WHEN_ERROR2
MOV RESET_TOTAL_WEIGHT_WHEN_ERROR,AX
 MOV IS_RESET_REQUIRED,1B
 CMP IS_VEGETABLE1,1B
JE SET_VEGETABLE1
CMP IS_VEGETABLE2,1B
JE SET_VEGETABLE2
CMP IS_VEGETABLE3,1B
JE SET_VEGETABLE3
SET_VEGETABLE1:
 MOV AX,RESET_VEGE1_TOTAL_WEIGHT_ERROR2
MOV RESET_VEGE1_TOTAL_WEIGHT_WHEN_ERROR,AX

 MOV AX,RESET_REPORT_WEIGHT_VEGE12
MOV RESET_REPORT_TOTAL_WEIGHT_VEGE1,AX

MOV IS_VEGETABLE2,0B
MOV IS_VEGETABLE3,0B
JMP JUMP_TO_ERROR
SET_VEGETABLE2:

MOV AX,RESET_VEGE2_TOTAL_WEIGHT_ERROR2
MOV RESET_VEGE2_TOTAL_WEIGHT_WHEN_ERROR,AX
 MOV AX,RESET_REPORT_WEIGHT_VEGE22
MOV RESET_REPORT_TOTAL_WEIGHT_VEGE2,AX

MOV IS_VEGETABLE1,0B
MOV IS_VEGETABLE3,0B
JMP JUMP_TO_ERROR
SET_VEGETABLE3:

MOV AX,RESET_VEGE3_TOTAL_WEIGHT_ERROR2
MOV RESET_VEGE3_TOTAL_WEIGHT_WHEN_ERROR,AX
 MOV AX,RESET_REPORT_WEIGHT_VEGE32
MOV RESET_REPORT_TOTAL_WEIGHT_VEGE3,AX
MOV IS_VEGETABLE1,0B
MOV IS_VEGETABLE2,0B
JMP JUMP_TO_ERROR
JUMP_TO_ERROR:
 CALL VALUE_NOT_IN_RANGE_ERROR_FUNC
 
JUMP_GO_ON:
 MOV AX,R_SALE_PRICE
 ADD PAYMENT_AMOUNT,AX
 CMP REPORT_IS_VEGE1,1B
JE GET_REPORT_TOTAL_REVENUE_VEGE1
CMP REPORT_IS_VEGE2,1B
JE GET_REPORT_TOTAL_REVENUE_VEGE2 
CMP REPORT_IS_VEGE3,1B
JE GET_REPORT_TOTAL_REVENUE_VEGE3 

GET_REPORT_TOTAL_REVENUE_VEGE1:
ADD REPORT_TOTAL_REVENUE_VEGE1,AX
JMP CALL_PROFIT_FUNC
GET_REPORT_TOTAL_REVENUE_VEGE2:
ADD REPORT_TOTAL_REVENUE_VEGE2,AX
JMP CALL_PROFIT_FUNC
GET_REPORT_TOTAL_REVENUE_VEGE3:
ADD REPORT_TOTAL_REVENUE_VEGE3,AX
JMP CALL_PROFIT_FUNC

CALL_PROFIT_FUNC: 

 CALL PROFIT_CALCULATOR

 
RET

SUB_FUNCTION PROC

;MOV MINUEND,99
MOV DX,0
MOV AX,SUBTRACTOR
SUB AX,MINUEND
JC CALL_VALUE_NOT_IN_RANGE_ERROR2
JNC CALL_CONTINUE_CAL_OR_DISPLAY2

CALL_CONTINUE_CAL_OR_DISPLAY2:
 CMP PROFITING,1B
 JE CALCULATE_TOTAL_PROFIT

CALCULATE_TOTAL_PROFIT:
 MOV R_UNIT_PROFIT,AX
 ADD TOTAL_PROFIT,AX
 
  CMP REPORT_IS_VEGE1,1B
JE GET_REPORT_TOTAL_PROFIT_VEGE1
CMP REPORT_IS_VEGE2,1B
JE GET_REPORT_TOTAL_PROFIT_VEGE2 
CMP REPORT_IS_VEGE3,1B
JE GET_REPORT_TOTAL_PROFIT_VEGE3 

GET_REPORT_TOTAL_PROFIT_VEGE1:
ADD REPORT_TOTAL_PROFIT_VEGE1,AX
JMP CALL_OUT_JUMP
GET_REPORT_TOTAL_PROFIT_VEGE2:
ADD REPORT_TOTAL_PROFIT_VEGE2,AX
JMP CALL_OUT_JUMP
GET_REPORT_TOTAL_PROFIT_VEGE3:
ADD REPORT_TOTAL_PROFIT_VEGE3,AX
JMP CALL_OUT_JUMP

CALL_OUT_JUMP: 
MOV REPORT_IS_VEGE1,0B
MOV REPORT_IS_VEGE2,0B
MOV REPORT_IS_VEGE3,0B
 
; MOV AX,R_UNIT_PROFIT
; MOV OPERATION_MOVER,AX
; CALL DISPLAY_PAYMENT_AMOUNT;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
CALL CLEAR_SCREEN
 ;Restore cursor
 MOV AH,02H    
 MOV BH,0
 MOV DH,5
 MOV DL,20
 INT 10H  
MOV AH,09H
LEA DX,STR_AFTER_ENTER_WEIGHT
INT 21H
CALL MAIN_MENU

 
CALL_VALUE_NOT_IN_RANGE_ERROR2:
 CALL VALUE_NOT_IN_RANGE_ERROR_FUNC
 
RET

;;START STEP 1

MUL_FUNCTION PROC
; MOV MULTIPLIER,2
 MOV DX,0
 MOV AX,MULTIPLICANT
 MUL MULTIPLIER
 JC CALL_VALUE_NOT_IN_RANGE_ERROR3
 JNC CALL_CONTINUE_CAL_OR_DISPLAY3
 
 CALL_VALUE_NOT_IN_RANGE_ERROR3:
 CALL VALUE_NOT_IN_RANGE_ERROR_FUNC
 
CALL_CONTINUE_CAL_OR_DISPLAY3:
 CMP COSTING,1B
 JE CALCULATE_TOTAL_COST
 CMP PRICING,1B
 JE CALCULATE_TOTAL_PRICE

CALCULATE_TOTAL_COST:
 MOV R_UNIT_COST,AX
 ADD TOTAL_COST,AX
 
CMP REPORT_IS_VEGE1,1B
JE GET_REPORT_TOTAL_COST_VEGE1
CMP REPORT_IS_VEGE2,1B
JE GET_REPORT_TOTAL_COST_VEGE2 
CMP REPORT_IS_VEGE3,1B
JE GET_REPORT_TOTAL_COST_VEGE3  

GET_REPORT_TOTAL_COST_VEGE1:
ADD REPORT_TOTAL_COST_VEGE1,AX
JMP CALL_PRICE_FUNC
GET_REPORT_TOTAL_COST_VEGE2:
ADD REPORT_TOTAL_COST_VEGE2,AX
JMP CALL_PRICE_FUNC
GET_REPORT_TOTAL_COST_VEGE3:
ADD REPORT_TOTAL_COST_VEGE3,AX
JMP CALL_PRICE_FUNC

CALL_PRICE_FUNC: 
 
 CALL PRICE_CALCULATOR
 
CALCULATE_TOTAL_PRICE:
 MOV R_UNIT_PRICE,AX
 ADD TOTAL_PRICE,AX
 ADD PAYMENT_TOTAL_PRICE,AX
 
CMP IS_VEGETABLE1,1B
JE GET_VEGETABLE1_TOTAL_SALES 
CMP IS_VEGETABLE2,1B
JE GET_VEGETABLE2_TOTAL_SALES 
CMP IS_VEGETABLE3,1B
JE GET_VEGETABLE3_TOTAL_SALES 

GET_VEGETABLE1_TOTAL_SALES:
;MOV IS_VEGETABLE1,0B
ADD VEGETABLE1_TOTAL_SALES,AX
JMP CALL_SALE_FUNC
GET_VEGETABLE2_TOTAL_SALES:
;MOV IS_VEGETABLE2,0B
ADD VEGETABLE2_TOTAL_SALES,AX
JMP CALL_SALE_FUNC
GET_VEGETABLE3_TOTAL_SALES:
;MOV IS_VEGETABLE3,0B
ADD VEGETABLE3_TOTAL_SALES,AX
JMP CALL_SALE_FUNC

CALL_SALE_FUNC: 

 CALL SALE_PRICE_CALCULATOR1

RET
;;END STEP 1



DIV_FUNCTION PROC
; MOV DIVISOR,1
 MOV DX,0
 MOV AX,DIVIDENT
 DIV DIVISOR
; JC CALL_VALUE_NOT_IN_RANGE_ERROR4				;/its there
; JNC CALL_CONTINUE_CAL_OR_DISPLAY4
 
CALL_CONTINUE_CAL_OR_DISPLAY4:
 CMP SALE_ING1,1B
 JE CALCULATE_TOTAL_R_SALE1
 CMP SALE_ING2,1B
 JE CALCULATE_TOTAL_R_SALE2
 CMP IS_TO_PRICE,1B
 JE CHANGE_TO_ACTUAL_PRICE
 CMP IS_TO_PRICE_DECIMAL,1B
 JE CHANGE_TO_ACTUAL_DECIMAL_PRICE

CALCULATE_TOTAL_R_SALE1:
 MOV R_SALE_PRICE,AX 
 MOV HOLD_GST,DX
 CALL SALE_PRICE_CALCULATOR2
 
CALCULATE_TOTAL_R_SALE2:
 MOV HOLD_GST,AX 
 MOV HOLD_SALE_PRICE_DECIMAL,DX
 CALL SALE_PRICE_CALCULATOR3

CHANGE_TO_ACTUAL_PRICE:
 MOV TOTAL_INTEGER,AX
 MOV TEMP_TOTAL_INTEGER,AX
 MOV TOTAL_DECIMAL,DX
 CALL GET_ACTUAL_DECIMAL_PRICE
 
CHANGE_TO_ACTUAL_DECIMAL_PRICE:
 CMP DX,50
 JAE ROUNDOFF_FOR_ACT_DEC
 JB NO_ROUNDOFF_DETECTED
 
ROUNDOFF_FOR_ACT_DEC:
 ADD AX,1
 
NO_ROUNDOFF_DETECTED:
 MOV TOTAL_DECIMAL,AX 
 MOV TEMP_TOTAL_DECIMAL,AX
 
 CALL CHECK_TO_DISPLAY
 ;MOV IS_PAYMENT,
 CMP IS_PAYMENT,1B
 JE CALCULATING_PAYMENT
 JNE NOT_CALCULATING_PAYMENT


 CALCULATING_PAYMENT:
 CALL EXIT
NOT_CALCULATING_PAYMENT:
 CMP IS_VEGETABLE1,1B
 JE CHECK_DISPLAY_VEGE1
 CMP IS_VEGETABLE2,1B
 JE CHECK_DISPLAY_VEGE2
 CMP IS_VEGETABLE3,1B
 JE CHECK_DISPLAY_VEGE3
 CMP IS_SUBTOTAL,1B
 JE CHECK_DISPLAY_SUBTOTAL
 CMP IS_GST,1B
 JE CHECK_DISPLAY_GST

CHECK_DISPLAY_VEGE1:
MOV IS_VEGETABLE1,0B
JMP JUMP_VEGE1 
CHECK_DISPLAY_VEGE2:
MOV IS_VEGETABLE2,0B
JMP JUMP_VEGE2
CHECK_DISPLAY_VEGE3:
MOV IS_VEGETABLE3,0B
JMP JUMP_VEGE3 
CHECK_DISPLAY_SUBTOTAL:
MOV IS_SUBTOTAL,0B
JMP JUMP_SUBTOTAL
CHECK_DISPLAY_GST:
MOV IS_GST,0B
JMP JUMP_GST
 
CALL_VALUE_NOT_IN_RANGE_ERROR4:
 CALL VALUE_NOT_IN_RANGE_ERROR_FUNC

RET

COST_CALCULATOR PROC
 MOV COSTING,1B
 MOV PRICING,0B

 MOV AX,TOTAL_INTEGER
 MOV MULTIPLICANT,AX

; MOV FIXED_UNIT_COST,3
 MOV AX,FIXED_UNIT_COST
 MOV MULTIPLIER,AX
 
 CALL MUL_FUNCTION

RET

PRICE_CALCULATOR PROC
 MOV COSTING,0B
 MOV PRICING,1B

 MOV AX,TOTAL_INTEGER
 MOV MULTIPLICANT,AX

; MOV FIXED_PRICE_COST,10
 MOV AX,FIXED_PRICE_COST
 MOV MULTIPLIER,AX
 
 CALL MUL_FUNCTION

RET

SALE_PRICE_CALCULATOR1 PROC
 MOV SALE_ING1,1B
 MOV SALE_ING2,0B
 MOV IS_TO_PRICE,0B
 
 MOV DX,0
 MOV AX,R_UNIT_PRICE
 MOV DIVIDENT,AX
 MOV DIVISOR,100

 CALL DIV_FUNCTION
 
RET
SALE_PRICE_CALCULATOR2 PROC
 MOV SALE_ING1,0B
 MOV SALE_ING2,1B
 MOV IS_TO_PRICE,0B
 
 MOV AX,R_SALE_PRICE
 MUL GST
 MOV R_SALE_PRICE,AX

 MOV AX,HOLD_GST
 MUL GST
 MOV HOLD_GST,AX
 
 MOV DIVIDENT,AX
 MOV DIVISOR,100
 
 CALL DIV_FUNCTION

RET

SALE_PRICE_CALCULATOR3 PROC
 MOV SALE_ING3,1B
 MOV SALE_ING4,0B
 
 MOV AX,R_SALE_PRICE
 MOV ADDER,AX
 MOV AX,HOLD_GST
 MOV SUMMAND,AX

 CALL ADD_FUNCTION

RET
SALE_PRICE_CALCULATOR4 PROC
 MOV SALE_ING3,0B
 MOV SALE_ING4,1B
 
 MOV AX,R_UNIT_PRICE
 MOV ADDER,AX
 MOV AX,R_SALE_PRICE
 MOV SUMMAND,AX

 CALL ADD_FUNCTION

RET


PROFIT_CALCULATOR PROC
 MOV PROFITING,1B
 MOV AX,R_SALE_PRICE
 MOV SUBTRACTOR,AX
 
 MOV AX,R_UNIT_COST
 MOV MINUEND,AX
 
 CALL SUB_FUNCTION

RET

DISPLAY_PAYMENT_AMOUNT PROC
;CALL LOGO

 MOV AH,02H    
 MOV BH,0
 MOV DH,7	
 MOV DL,19
 INT 10H  
 
 MOV AH,09H
 LEA DX,STR_DISPLAY_PAYMENT_DATE
 INT 21H
 CALL DAY
  CALL MONTH
   CALL YEAR
 MOV AH,02H    
 MOV BH,0
 MOV DH,9	
 MOV DL,19
 INT 10H  
 
 MOV AH,09H
 LEA DX,STR_DISPLAY_PAYMENT_HEADER
 INT 21H
 MOV AH,02H    
 MOV BH,0
 MOV DH,11	
 MOV DL,19
 INT 10H  
 
 MOV AH,09H
 LEA DX,STR_DISPLAY_PAYMENT_VEGE1
 INT 21H
 MOV AH,02H    
 MOV BH,0
 MOV DH,11
 MOV DL,37
 INT 10H  
 MOV IS_VEGETABLE1,1B
 MOV AX,VEGETABLE1_TOTAL_WEIGHT
 MOV TOTAL_INTEGER,AX
 MOV IS_DISPLAY_INTEGER_ONLY,1B
 CALL CHECK_TO_DISPLAY
 MOV AH,02H    
 MOV BH,0
 MOV DH,11
 MOV DL,54
 INT 10H  
 
 MOV AH,09H
 LEA DX,STR_DISPLAY_PAYMENT_VEGE1_RM
 INT 21H
 
 MOV AX,VEGETABLE1_TOTAL_SALES
 MOV OPERATION_MOVER,AX
 
 CALL OPERATION 

 JUMP_VEGE1:
 MOV IS_VEGETABLE2,1B
 MOV AH,02H    
 MOV BH,0
 MOV DH,12
 MOV DL,19
 INT 10H  

 MOV AH,09H
 LEA DX,STR_DISPLAY_PAYMENT_VEGE2
 INT 21H
 
 MOV AH,02H    
 MOV BH,0
 MOV DH,12
 MOV DL,37
 INT 10H  
 
 MOV AX,VEGETABLE2_TOTAL_WEIGHT
 MOV TOTAL_INTEGER,AX
 MOV IS_DISPLAY_INTEGER_ONLY,1B
 CALL CHECK_TO_DISPLAY

 MOV AH,02H    
 MOV BH,0
 MOV DH,12
 MOV DL,54
 INT 10H  
 MOV AH,09H
 LEA DX,STR_DISPLAY_PAYMENT_VEGE2_RM
 INT 21H
 
 MOV AX,VEGETABLE2_TOTAL_SALES
 MOV OPERATION_MOVER,AX
 
 CALL OPERATION 

 JUMP_VEGE2:
  MOV IS_VEGETABLE3,1B
 MOV AH,02H    
 MOV BH,0
 MOV DH,13	
 MOV DL,19
 INT 10H  
 
 MOV AH,09H
 LEA DX,STR_DISPLAY_PAYMENT_VEGE3
 INT 21H 
  MOV AH,02H    
 MOV BH,0
 MOV DH,13
 MOV DL,37
 INT 10H  
 MOV AX,VEGETABLE3_TOTAL_WEIGHT
 MOV TOTAL_INTEGER,AX
 MOV IS_DISPLAY_INTEGER_ONLY,1B
 CALL CHECK_TO_DISPLAY
 MOV AH,02H    
 MOV BH,0
 MOV DH,13
 MOV DL,54
 INT 10H  
 
 MOV AH,09H
 LEA DX,STR_DISPLAY_PAYMENT_VEGE3_RM
 INT 21H
 
 MOV AX,VEGETABLE3_TOTAL_SALES
 MOV OPERATION_MOVER,AX
 
 CALL OPERATION 

 JUMP_VEGE3: 
   MOV IS_SUBTOTAL,1B
 MOV AH,02H    
 MOV BH,0
 MOV DH,15	
 MOV DL,19
 INT 10H  
 
 MOV AH,09H
 LEA DX,STR_DISPLAY_PAYMENT_FOOTER
 INT 21H 
 
 MOV AX,PAYMENT_TOTAL_PRICE
 MOV OPERATION_MOVER,AX
 
 CALL OPERATION 

 JUMP_SUBTOTAL: 
 MOV IS_GST,1B
 MOV AH,02H    
 MOV BH,0
 MOV DH,16	
 MOV DL,19
 INT 10H  
 
 MOV AH,09H
 LEA DX,STR_DISPLAY_PAYMENT_GST
 INT 21H 

  MOV AX,PAYMENT_TOTAL_GST
 MOV OPERATION_MOVER,AX
 
 CALL OPERATION 

 JUMP_GST: 
 
 MOV AH,02H    
 MOV BH,0
 MOV DH,17
 MOV DL,19
 INT 10H  
 

 MOV AH,09H
 LEA DX,STR_TOTAL_PAYMENT_VALUE
 INT 21H
 
 MOV IS_PAYMENT,1B 
 MOV AX,PAYMENT_AMOUNT

 MOV OPERATION_MOVER,AX
 CALL OPERATION

RET


MAKE_PAYMENT_CALCULATOR PROC

 MOV AX,TEMP_TOTAL_INTEGER ;;CORRECT

 CMP TOTAL_INTEGER,AX
 JA CALCULATE_CHANGE
 JBE CALL_STR_INSUFFICIENT_VALUE_ERROR

CALL_STR_INSUFFICIENT_VALUE_ERROR:
CALL STR_INSUFFICIENT_VALUE_ERROR_FUNC

CALCULATE_CHANGE:
 MOV IS_CHANGE,1B
 
 MOV AX,TOTAL_INTEGER
 SUB AX,1
 SUB AX,TEMP_TOTAL_INTEGER
 MOV CHANGE_INTEGER_AMOUNT,AX
 MOV TOTAL_INTEGER,AX
 MOV AX,100
 SUB AX,TEMP_TOTAL_DECIMAL
 MOV CHANGE_DECIMAL_AMOUNT,AX
 MOV TOTAL_DECIMAL,AX
 
 MOV PAYMENT_AMOUNT,0			;PAID
 MOV AH,02H    
 MOV BH,0
 MOV DH,20
 MOV DL,19
 INT 10H 
 
 MOV AH,09H
 LEA DX,STR_DISPLAY_PAYMENT_CHANGE
 INT 21H
 CALL CHECK_TO_DISPLAY

 
RET

TO_PROPER_PRICE PROC

 MOV SALE_ING1,0B
 MOV SALE_ING2,0B
 MOV IS_TO_PRICE,1B
 MOV IS_TO_PRICE_DECIMAL,0B
 
; MOV AX,XXXXXXX
; MOV DIVIDENT,AX

 MOV DX,10000

 MOV DIVISOR,DX
 CALL DIV_FUNCTION
 
RET
GET_ACTUAL_DECIMAL_PRICE PROC
 MOV SALE_ING1,0B
 MOV SALE_ING2,0B
 MOV IS_TO_PRICE,0B
 MOV IS_TO_PRICE_DECIMAL,1B
 
 MOV AX,TOTAL_DECIMAL
 MOV DIVIDENT,AX
 MOV DIVISOR,100
 CALL DIV_FUNCTION
 
RET

OPERATION PROC

 MOV AX,OPERATION_MOVER
 MOV DIVIDENT,AX

 CALL TO_PROPER_PRICE

RET


;//END CALCULATION

 TO_PROPER_PRICE2 PROC
 MOV IS_TO_PRICE2,1B
 MOV IS_TO_PRICE_DECIMAL2,0B
 
; MOV AX,XXXXXXX
; MOV DIVIDENT,AX

 MOV DX,10000

 MOV DIVISOR,DX
 CALL DIV_FUNCTION2
 
RET
GET_ACTUAL_DECIMAL_PRICE2 PROC
 MOV IS_TO_PRICE2,0B
 MOV IS_TO_PRICE_DECIMAL2,1B
 
 MOV AX,TOTAL_DECIMAL
 MOV DIVIDENT,AX
 MOV DIVISOR,100
 CALL DIV_FUNCTION2
 
RET

OPERATION2 PROC

 MOV AX,OPERATION_MOVER
 MOV DIVIDENT,AX

 CALL TO_PROPER_PRICE2

RET



DIV_FUNCTION2 PROC

 MOV DX,0
 MOV AX,DIVIDENT
 DIV DIVISOR
 
 CMP IS_TO_PRICE2,1B
 JE CHANGE_TO_ACTUAL_PRICE2
 CMP IS_TO_PRICE_DECIMAL2,1B
 JE CHANGE_TO_ACTUAL_DECIMAL_PRICE2

CHANGE_TO_ACTUAL_PRICE2:
 MOV TOTAL_INTEGER,AX
 MOV TOTAL_DECIMAL,DX
 CALL GET_ACTUAL_DECIMAL_PRICE2
 
CHANGE_TO_ACTUAL_DECIMAL_PRICE2:
 CMP DX,50
 JAE ROUNDOFF_FOR_ACT_DEC2
 JB NO_ROUNDOFF_DETECTED2
 
ROUNDOFF_FOR_ACT_DEC2:
 ADD AX,1
 
NO_ROUNDOFF_DETECTED2:
 MOV TOTAL_DECIMAL,AX 
 
 CALL CHECK_TO_DISPLAY

 
  CMP DISPLAY_REPORT_COST_VEGE1,1B
 JE CHECK_REPORT_COST_VEGE1
 CMP DISPLAY_REPORT_COST_VEGE2,1B
 JE CHECK_REPORT_COST_VEGE2
 CMP DISPLAY_REPORT_COST_VEGE3,1B
 JE CHECK_REPORT_COST_VEGE3
 
  CMP DISPLAY_REPORT_REVENUE_VEGE1,1B
 JE CHECK_REPORT_REVENUE_VEGE1
 CMP DISPLAY_REPORT_REVENUE_VEGE2,1B
 JE CHECK_REPORT_REVENUE_VEGE2
 CMP DISPLAY_REPORT_REVENUE_VEGE3,1B
 JE CHECK_REPORT_REVENUE_VEGE3
 
  CMP DISPLAY_REPORT_PROFIT_VEGE1,1B
 JE CHECK_REPORT_PROFIT_VEGE1
 CMP DISPLAY_REPORT_PROFIT_VEGE2,1B
 JE CHECK_REPORT_PROFIT_VEGE2
 CMP DISPLAY_REPORT_PROFIT_VEGE3,1B
 JE CHECK_REPORT_PROFIT_VEGE3

 CMP DISPLAY_TOTAL_COST,1B
 JE CHECK_TOTAL_COST
 CMP DISPLAY_TOTAL_REVNUE,1B
 JE CHECK_TOTAL_REVNUE
 CMP DISPLAY_TOTAL_PROFIT,1B
 JE CHECK_TOTAL_PROFIT
 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


CHECK_REPORT_COST_VEGE1:
MOV DISPLAY_REPORT_COST_VEGE1,0B
JMP JUMP_REPORT_COST_VEGE1
CHECK_REPORT_COST_VEGE2:
MOV DISPLAY_REPORT_COST_VEGE2,0B
JMP JUMP_REPORT_COST_VEGE2
CHECK_REPORT_COST_VEGE3:
MOV DISPLAY_REPORT_COST_VEGE3,0B
JMP JUMP_REPORT_COST_VEGE3

CHECK_REPORT_REVENUE_VEGE1:
MOV DISPLAY_REPORT_REVENUE_VEGE1,0B
JMP JUMP_REPORT_REVENUE_VEGE1
CHECK_REPORT_REVENUE_VEGE2:
MOV DISPLAY_REPORT_REVENUE_VEGE2,0B
JMP JUMP_REPORT_REVENUE_VEGE2
CHECK_REPORT_REVENUE_VEGE3:
MOV DISPLAY_REPORT_REVENUE_VEGE3,0B
JMP JUMP_REPORT_REVENUE_VEGE3

CHECK_REPORT_PROFIT_VEGE1:
MOV DISPLAY_REPORT_PROFIT_VEGE1,0B
JMP JUMP_REPORT_PROFIT_VEGE1
CHECK_REPORT_PROFIT_VEGE2:
MOV DISPLAY_REPORT_PROFIT_VEGE2,0B
JMP JUMP_REPORT_PROFIT_VEGE2
CHECK_REPORT_PROFIT_VEGE3:
MOV DISPLAY_REPORT_PROFIT_VEGE3,0B
JMP JUMP_REPORT_PROFIT_VEGE3

CHECK_TOTAL_COST:
MOV DISPLAY_TOTAL_COST,0B
JMP JUMP_TOTAL_COST
CHECK_TOTAL_REVNUE:
MOV DISPLAY_TOTAL_REVNUE,0B
JMP JUMP_TOTAL_REVNUE
CHECK_TOTAL_PROFIT:
MOV DISPLAY_TOTAL_PROFIT,0B
JMP JUMP_TOTAL_PROFIT

;CALL_VALUE_NOT_IN_RANGE_ERROR99:
; CALL VALUE_NOT_IN_RANGE_ERROR_FUNC

RET
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Report
DAILY_SALES_RECORD PROC
 MOV AH,02H    
 MOV BH,0
 MOV DH,5	
 MOV DL,20
 INT 10H  
 
 MOV AH,09H
 LEA DX,STR_DAILY_SALES_TITLE
 INT 21H
 CALL DAY
  CALL MONTH
   CALL YEAR
 MOV AH,02H    
 MOV BH,0
 MOV DH,8	
 MOV DL,6
 INT 10H  
 
 MOV AH,09H
 LEA DX,STR_DAILY_SALES_HEADER
 INT 21H
  MOV AH,02H    
 MOV BH,0
 MOV DH,10	
 MOV DL,6
 INT 10H  
 
 MOV AH,09H
 LEA DX,STR_DAILY_SALES_VEGE1
 INT 21H
 
 MOV AH,02H    
 MOV BH,0
 MOV DH,10
 MOV DL,20
 INT 10H  
 MOV AX,REPORT_TOTAL_WEIGHT_VEGE1
 MOV TOTAL_INTEGER,AX
 MOV IS_DISPLAY_INTEGER_ONLY,1B
 CALL CHECK_TO_DISPLAY
  MOV AH,02H    
 MOV BH,0
 MOV DH,10
 MOV DL,34
 INT 10H  
  MOV AH,09H
 LEA DX,STR_RM		;;COST
 INT 21H
   MOV DISPLAY_REPORT_COST_VEGE1,1B
  MOV AX,REPORT_TOTAL_COST_VEGE1
 MOV OPERATION_MOVER,AX
 
 CALL OPERATION2 

 JUMP_REPORT_COST_VEGE1:

 
   MOV AH,02H    
 MOV BH,0
 MOV DH,10
 MOV DL,47
 INT 10H  
  MOV AH,09H
 LEA DX,STR_RM		;;REVENUE
 INT 21H
    MOV DISPLAY_REPORT_REVENUE_VEGE1,1B
  MOV AX,REPORT_TOTAL_REVENUE_VEGE1
 MOV OPERATION_MOVER,AX
 
 CALL OPERATION2 

 JUMP_REPORT_REVENUE_VEGE1:
 
   MOV AH,02H    
 MOV BH,0
 MOV DH,10
 MOV DL,63
 INT 10H  
  MOV AH,09H
 LEA DX,STR_RM		;;PROFIT
 INT 21H
     MOV DISPLAY_REPORT_PROFIT_VEGE1,1B
  MOV AX,REPORT_TOTAL_PROFIT_VEGE1
 MOV OPERATION_MOVER,AX
 
 CALL OPERATION2 

 JUMP_REPORT_PROFIT_VEGE1:
  MOV AH,02H    
 MOV BH,0
 MOV DH,11	
 MOV DL,6
 INT 10H  
 
 MOV AH,09H
 LEA DX,STR_DAILY_SALES_VEGE2
 INT 21H
 
  MOV AH,02H    
 MOV BH,0
 MOV DH,11
 MOV DL,20
 INT 10H  
 MOV AX,REPORT_TOTAL_WEIGHT_VEGE2
 MOV TOTAL_INTEGER,AX
 MOV IS_DISPLAY_INTEGER_ONLY,1B
 CALL CHECK_TO_DISPLAY
  MOV AH,02H    
 MOV BH,0
 MOV DH,11
 MOV DL,34
 INT 10H  
  MOV AH,09H
 LEA DX,STR_RM		;;COST
 INT 21H
      MOV DISPLAY_REPORT_COST_VEGE2,1B
  MOV AX,REPORT_TOTAL_COST_VEGE2
 MOV OPERATION_MOVER,AX
 
 CALL OPERATION2 

 JUMP_REPORT_COST_VEGE2:
   MOV AH,02H    
 MOV BH,0
 MOV DH,11
 MOV DL,47
 INT 10H  
  MOV AH,09H
 LEA DX,STR_RM		;;REVENUE
 INT 21H
       MOV DISPLAY_REPORT_REVENUE_VEGE2,1B
  MOV AX,REPORT_TOTAL_REVENUE_VEGE2
 MOV OPERATION_MOVER,AX
 
 CALL OPERATION2 

 JUMP_REPORT_REVENUE_VEGE2:
 
   MOV AH,02H    
 MOV BH,0
 MOV DH,11
 MOV DL,63
 INT 10H  
  MOV AH,09H
 LEA DX,STR_RM		;;PROFIT
 INT 21H
        MOV DISPLAY_REPORT_PROFIT_VEGE2,1B
  MOV AX,REPORT_TOTAL_PROFIT_VEGE2
 MOV OPERATION_MOVER,AX
 
 CALL OPERATION2 

 JUMP_REPORT_PROFIT_VEGE2:
  MOV AH,02H    
 MOV BH,0
 MOV DH,12	
 MOV DL,6
 INT 10H  
 
 MOV AH,09H
 LEA DX,STR_DAILY_SALES_VEGE3
 INT 21H
 
   MOV AH,02H    
 MOV BH,0
 MOV DH,12
 MOV DL,20
 INT 10H  
 MOV AX,REPORT_TOTAL_WEIGHT_VEGE3
 MOV TOTAL_INTEGER,AX
 MOV IS_DISPLAY_INTEGER_ONLY,1B
 CALL CHECK_TO_DISPLAY
  MOV AH,02H    
 MOV BH,0
 MOV DH,12
 MOV DL,34
 INT 10H  
  MOV AH,09H
 LEA DX,STR_RM		;;COST
 INT 21H
         MOV DISPLAY_REPORT_COST_VEGE3,1B
  MOV AX,REPORT_TOTAL_COST_VEGE3
 MOV OPERATION_MOVER,AX
 
 CALL OPERATION2 

 JUMP_REPORT_COST_VEGE3:
   MOV AH,02H    
 MOV BH,0
 MOV DH,12
 MOV DL,47
 INT 10H  
  MOV AH,09H
 LEA DX,STR_RM		;;REVENUE
 INT 21H
          MOV DISPLAY_REPORT_REVENUE_VEGE3,1B
  MOV AX,REPORT_TOTAL_REVENUE_VEGE3
 MOV OPERATION_MOVER,AX
 
 CALL OPERATION2 

 JUMP_REPORT_REVENUE_VEGE3:
 
   MOV AH,02H    
 MOV BH,0
 MOV DH,12
 MOV DL,63
 INT 10H  
  MOV AH,09H
 LEA DX,STR_RM		;;PROFIT
 INT 21H
           MOV DISPLAY_REPORT_PROFIT_VEGE3,1B
  MOV AX,REPORT_TOTAL_PROFIT_VEGE3
 MOV OPERATION_MOVER,AX
 
 CALL OPERATION2 

 JUMP_REPORT_PROFIT_VEGE3:
   MOV AH,02H    
 MOV BH,0
 MOV DH,14	
 MOV DL,6
 INT 10H  
 
 MOV AH,09H
 LEA DX,STR_DAILY_SALES_TOTAL
 INT 21H
    MOV AH,02H    
 MOV BH,0
 MOV DH,14
 MOV DL,20
 INT 10H  
 MOV AX,TOTAL_WEIGHT
 MOV TOTAL_INTEGER,AX
 MOV IS_DISPLAY_INTEGER_ONLY,1B
 CALL CHECK_TO_DISPLAY
  MOV AH,02H    
 MOV BH,0
 MOV DH,14
 MOV DL,34
 INT 10H  
  MOV AH,09H
 LEA DX,STR_RM		;;COST
 INT 21H
            MOV DISPLAY_TOTAL_COST,1B
  MOV AX,TOTAL_COST
 MOV OPERATION_MOVER,AX
 
 CALL OPERATION2 

 JUMP_TOTAL_COST:
   MOV AH,02H    
 MOV BH,0
 MOV DH,14
 MOV DL,47
 INT 10H  
  MOV AH,09H
 LEA DX,STR_RM		;;REVENUE
 INT 21H
             MOV DISPLAY_TOTAL_REVNUE,1B
  MOV AX,TOTAL_SALE
 MOV OPERATION_MOVER,AX
 
 CALL OPERATION2 

 JUMP_TOTAL_REVNUE:
 
   MOV AH,02H    
 MOV BH,0
 MOV DH,14
 MOV DL,63
 INT 10H  
  MOV AH,09H
 LEA DX,STR_RM		;;PROFIT
 INT 21H
             MOV DISPLAY_TOTAL_PROFIT,1B
  MOV AX,TOTAL_PROFIT
 MOV OPERATION_MOVER,AX
 
 CALL OPERATION2 

 JUMP_TOTAL_PROFIT:
 

;MOV AX,0
;CALL CLEARING
;CALL MAIN_MENU
;;///RESETTING CERTAIN VALUE
MOV CX,6
MOV SI,0
LOOP_RESET0:
 MOV AL,0
 MOV INPUT_VALUE_DATA[SI],AL

INC SI
LOOP LOOP_RESET0

MOV CX,8
MOV SI,0
LOOP_RESET02:
 MOV AL,0
 MOV VALUE[SI],AL

INC SI
LOOP LOOP_RESET02

MOV R_INTEGER,0		
MOV TOTAL_INTEGER,0
MOV ROUNDOFF_DECIMAL,0
MOV TOTAL_DECIMAL,0

MOV OPERATION_MOVER,0

MOV IS_TO_PRICE2,0B
MOV IS_TO_PRICE_DECIMAL2,0B

 MOV AH,02H    
 MOV BH,0
 MOV DH,18
 MOV DL,6
 INT 10H 
MOV AH,09H
LEA DX,ENTER_ANYKEY
INT 21H
MOV AH,01H
INT 21H
MOV IS_CHANGE,1B
CALL CLEAR_SCREEN
CALL MAIN_MENU
RET








CHECK_TO_DISPLAY PROC 
 MOV BX,0
 MOV AX,TEN_THOUSAND
 CMP TOTAL_INTEGER,AX
 JAE CALL_DISPLAY_TEN_THOUSAND_VALUE

 MOV AX,THOUSAND 
 CMP TOTAL_INTEGER,AX
 JAE CALL_DISPLAY_THOUSAND_VALUE

 MOV AH,0
 MOV AL,HUNDRED 
 CMP TOTAL_INTEGER,AX
 JAE CALL_DISPLAY_HUNDRED_VALUE
 
 MOV AH,0
 MOV AL,TEN
 CMP TOTAL_INTEGER,AX
 JAE CALL_DISPLAY_TEN_VALUE
 JB CALL_DISPLAY_DIGIT_VALUE

 CALL_DISPLAY_TEN_THOUSAND_VALUE:
 CALL DISPLAY_TEN_THOUSAND_FUNC
 
 CALL_DISPLAY_THOUSAND_VALUE:
 CALL DISPLAY_THOUSAND_FUNC
 
 CALL_DISPLAY_HUNDRED_VALUE:
 CALL DISPLAY_HUNDRED_FUNC
 
 CALL_DISPLAY_TEN_VALUE:
 CALL DISPLAY_TEN_FUNC
 
 CALL_DISPLAY_DIGIT_VALUE:
 CALL DISPLAY_DIGIT_FUNC
 
 CMP IS_DISPLAY_INTEGER_ONLY,1B
 JE PROCESS_DISPLAY_INTEGER
 JNE CALL_DISPLAY_DECIMAL_FUNC
 
CALL_DISPLAY_DECIMAL_FUNC:

 CALL DISPLAY_DECIMAL_FUNC
 
JMP FINISHED_DISPLAY_INTEGER
 
 
PROCESS_DISPLAY_INTEGER:
 MOV IS_DISPLAY_INTEGER_ONLY,0B
 INC BX 
 MOV VALUE[BX],'g'
 INC BX 
 MOV VALUE[BX],'$'
 
 MOV AH,09H
 LEA DX,VALUE
 INT 21H  

 FINISHED_DISPLAY_INTEGER:
  MOV IS_DISPLAY_INTEGER_ONLY,0B
 RET


DISPLAY_TEN_THOUSAND_FUNC PROC

 MOV DX,0
 MOV AX,TOTAL_INTEGER
 DIV TEN_THOUSAND
 MOV TOTAL_INTEGER,DX

 ADD AL,30H
 MOV VALUE[BX],AL
 INC BX

RET

DISPLAY_THOUSAND_FUNC PROC

 MOV DX,0
 MOV AX,TOTAL_INTEGER
 DIV THOUSAND
 MOV TOTAL_INTEGER,DX

 ADD AL,30H
 MOV VALUE[BX],AL
 INC BX 

RET

DISPLAY_HUNDRED_FUNC PROC

 MOV DX,0
 MOV AX,TOTAL_INTEGER
 DIV HUNDRED

 ADD AL,30H
 MOV VALUE[BX],AL
 INC BX 
 MOV AL,AH
 MOV AH,0
 MOV TOTAL_INTEGER,AX
 
RET

DISPLAY_TEN_FUNC PROC

 MOV DX,0
 MOV AX,TOTAL_INTEGER
 DIV TEN

 ADD AL,30H
 MOV VALUE[BX],AL
 INC BX
 
 MOV AL,AH
 MOV AH,0
 MOV TOTAL_INTEGER,AX

RET

DISPLAY_DIGIT_FUNC PROC
 MOV AX,TOTAL_INTEGER
 
 ADD AL,30H
 MOV VALUE[BX],AL



RET

DISPLAY_DECIMAL_FUNC PROC

 INC BX
 MOV VALUE[BX],2EH

 MOV AX,TOTAL_DECIMAL
 MUL HUNDRED 
 MOV TOTAL_DECIMAL,AX
 
 MOV DX,0
 MOV AX,TOTAL_DECIMAL
 DIV DIVISOR
 MOV ROUNDOFF_DECIMAL,DX
 
 CMP ROUNDOFF_DECIMAL,500
 JAE ROUNDOFF_FOR_DEC
 JB NO_ROUNDOFF_IMPLEMENTED
 
ROUNDOFF_FOR_DEC:
 ADD AX,1
 
NO_ROUNDOFF_IMPLEMENTED:
 MOV TOTAL_DECIMAL,AX
 MOV DX,0
 MOV AX,TOTAL_DECIMAL
 DIV TEN

 INC BX 
 ADD AL,30H
 MOV VALUE[BX],AL
 
 INC BX
 ADD AH,30H
 MOV VALUE[BX],AH

 
 INC BX 
 MOV VALUE[BX],'$'
 
 MOV AH,09H
 LEA DX,VALUE
 INT 21H
 
 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;END OF DISPLAY

 CMP IS_PAYMENT,1B
 JE CALL_PAYMENT_FUNC_AFTER
 CMP IS_CHANGE,1B
 JE CALL_DISPLAY_CHANGE
 JNE CALL_BACK
 
CALL_PAYMENT_FUNC_AFTER:
CALL PROMPT_VALUE_FUNCTION

CALL_DISPLAY_CHANGE:
CALL DISPLAY_CHANGE
CALL CLEAR_SCREEN
CALL MAIN_MENU
 
CALL_BACK:
;CALL EXIT

RET
DISPLAY_CHANGE PROC
;;///RESETTING CERTAIN VALUE
MOV CX,6
MOV SI,0
LOOP_RESET1:
 MOV AL,0
 MOV INPUT_VALUE_DATA[SI],AL

INC SI
LOOP LOOP_RESET1

MOV CX,8
MOV SI,0
LOOP_RESET2:
 MOV AL,0
 MOV VALUE[SI],AL

INC SI
LOOP LOOP_RESET2

MOV R_INTEGER,0		
MOV TOTAL_INTEGER,0
MOV ROUNDOFF_DECIMAL,0
MOV TOTAL_DECIMAL,0

MOV ADDER,0
MOV SUMMAND,0
MOV SUBTRACTOR,0
MOV MINUEND,0
MOV MULTIPLICANT,0
MOV MULTIPLIER,0
MOV DIVIDENT,0
MOV DIVISOR,1	

MOV R_UNIT_COST,0
MOV COSTING,0B

MOV R_UNIT_PRICE,0
MOV PRICING,0B

MOV HOLD_GST,0
MOV HOLD_SALE_PRICE_DECIMAL,0

MOV R_SALE_PRICE,0

MOV SALE_ING1,0B
MOV SALE_ING2,0B
MOV SALE_ING3,0B
MOV SALE_ING4,0B

MOV R_UNIT_PROFIT,0
MOV PROFITING,0B

 
 MOV TEMP_TOTAL_INTEGER,0
 MOV CHANGE_INTEGER_AMOUNT,0

 MOV TEMP_TOTAL_DECIMAL,0
 MOV CHANGE_DECIMAL_AMOUNT,0


;// RESET AMOUNT AFTER PAYMENT IS MADE
MOV PAYMENT_AMOUNT,0
MOV VEGETABLE1_TOTAL_WEIGHT,0
MOV VEGETABLE1_TOTAL_SALES,0
MOV VEGETABLE2_TOTAL_WEIGHT,0
MOV VEGETABLE2_TOTAL_SALES,0
MOV VEGETABLE3_TOTAL_WEIGHT,0
MOV VEGETABLE3_TOTAL_SALES,0

MOV PAYMENT_TOTAL_GST,0
MOV PAYMENT_TOTAL_PRICE,0

MOV IS_PAYMENT,0B
;MOV IS_CHANGE,0B

MOV OPERATION_MOVER,0

MOV IS_TO_PRICE,0B
MOV IS_TO_PRICE_DECIMAL,0B

 MOV AH,02H    
 MOV BH,0
 MOV DH,5
 MOV DL,19
 INT 10H 
MOV AH,09H
LEA DX,STR_THANK_YOU
INT 21H

 MOV AH,02H    
 MOV BH,0
 MOV DH,22
 MOV DL,19
 INT 10H 
MOV AH,09H
LEA DX,ENTER_ANYKEY
INT 21H
MOV AH,01H
INT 21H
MOV AX,0


RET


VALUE_NOT_IN_RANGE_ERROR_FUNC PROC
;GET THE PREVIOUS VALUE WHEN ERROR OCCUR
MOV AX,RESET_VEGE1_TOTAL_WEIGHT_WHEN_ERROR
MOV VEGETABLE1_TOTAL_WEIGHT,AX
MOV AX,RESET_VEGE2_TOTAL_WEIGHT_WHEN_ERROR
MOV VEGETABLE2_TOTAL_WEIGHT,AX
MOV AX,RESET_VEGE3_TOTAL_WEIGHT_WHEN_ERROR
MOV VEGETABLE3_TOTAL_WEIGHT,AX

MOV AX,RESET_REPORT_TOTAL_WEIGHT_VEGE1
MOV REPORT_TOTAL_WEIGHT_VEGE1,AX
MOV AX,RESET_REPORT_TOTAL_WEIGHT_VEGE2
MOV REPORT_TOTAL_WEIGHT_VEGE2,AX
MOV AX,RESET_REPORT_TOTAL_WEIGHT_VEGE3
MOV REPORT_TOTAL_WEIGHT_VEGE3,AX


MOV AX,RESET_REPORT_TOTAL_COST_VEGE1
MOV REPORT_TOTAL_COST_VEGE1,AX
MOV AX,RESET_REPORT_TOTAL_COST_VEGE2
MOV REPORT_TOTAL_COST_VEGE2,AX
MOV AX,RESET_REPORT_TOTAL_COST_VEGE3
MOV REPORT_TOTAL_COST_VEGE3,AX

MOV AX,RESET_REPORT_REVENUE_VEGE1
MOV REPORT_TOTAL_REVENUE_VEGE1,AX
MOV AX,RESET_REPORT_REVENUE_VEGE2
MOV REPORT_TOTAL_REVENUE_VEGE2,AX 
MOV AX,RESET_REPORT_REVENUE_VEGE3
MOV REPORT_TOTAL_REVENUE_VEGE3,AX

MOV AX,RESET_REPORT_TOTAL_PROFIT_VEGE1
MOV REPORT_TOTAL_PROFIT_VEGE1,AX
MOV AX,RESET_REPORT_TOTAL_PROFIT_VEGE2
MOV REPORT_TOTAL_PROFIT_VEGE2,AX
MOV AX,RESET_REPORT_TOTAL_PROFIT_VEGE3
MOV REPORT_TOTAL_PROFIT_VEGE3,AX


MOV AX,RESET_VEGE1_TOTAL_SALES_WHEN_ERROR
MOV VEGETABLE1_TOTAL_SALES,AX
MOV AX,RESET_VEGE2_TOTAL_SALES_WHEN_ERROR
MOV VEGETABLE2_TOTAL_SALES,AX
MOV AX,RESET_VEGE3_TOTAL_SALES_WHEN_ERROR
MOV VEGETABLE3_TOTAL_SALES,AX

MOV AX,RESET_PAYMENT_TOTAL_PRICE
MOV PAYMENT_TOTAL_PRICE,AX 
MOV AX,RESET_PAYMENT_TOTAL_GST
MOV PAYMENT_TOTAL_GST,AX

MOV AX,RESET_TOTAL_WEIGHT_WHEN_ERROR
MOV TOTAL_WEIGHT,AX
MOV AX,RESET_TOTAL_COST_WHEN_ERROR
MOV TOTAL_COST,AX
MOV AX,RESET_TOTAL_PRICE_WHEN_ERROR
MOV TOTAL_PRICE,AX
MOV AX,RESET_TOTAL_SALE_WHEN_ERROR
MOV TOTAL_SALE,AX
MOV AX,RESET_TOTAL_GST_WHEN_ERROR
MOV TOTAL_GST,AX
MOV AX,RESET_TOTAL_PROFIT_WHEN_ERROR
MOV TOTAL_PROFIT,AX
 CALL CLEAR_SCREEN
 CMP IS_RESET_REQUIRED,1B
 JE SHOW_RESET_STR
 JNE SHOW_MATH_ERROR_STR
 
SHOW_RESET_STR:
MOV IS_RESET_REQUIRED,0B
 ;Restore cursor
 MOV AH,02H    
 MOV BH,0
 MOV DH,5
 MOV DL,20
 INT 10H  

 MOV AH,09H
 LEA DX,STR_GO_TO_RESET
 INT 21H
 JMP SKIP

SHOW_MATH_ERROR_STR:
 ;Restore cursor
 MOV AH,02H    
 MOV BH,0
 MOV DH,5
 MOV DL,23
 INT 10H  

 MOV AH,09H
 LEA DX,STR_VALUE_NOT_IN_RANGE_ERROR
 INT 21H

 
 SKIP:
 CALL LOGO
 
 MOV TOTAL_INTEGER,0
 CALL PROMPT_VALUE_FUNCTION
 
RET

INVALID_VALUE_ERROR_FUNC PROC
 CALL CLEAR_SCREEN
 ;Restore cursor
 MOV AH,02H    
 MOV BH,0
 MOV DH,5
 MOV DL,25
 INT 10H 
 MOV AH,09H
 LEA DX,STR_INVALID_VALUE_ERROR
 INT 21H

 CALL LOGO
 CALL PROMPT_VALUE_FUNCTION
RET

STR_NULL_VALUE_ERROR_FUNC PROC
 CALL CLEAR_SCREEN
 ;Restore cursor
 MOV AH,02H    
 MOV BH,0
 MOV DH,5
 MOV DL,21
 INT 10H 
 MOV AH,09H
 LEA DX,STR_NULL_VALUE_ERROR
 INT 21H
 CALL LOGO
 CALL PROMPT_VALUE_FUNCTION
RET

STR_INSUFFICIENT_VALUE_ERROR_FUNC PROC
 ;CALL CLEAR_SCREEN
 ;Restore cursor
 MOV AH,02H    
 MOV BH,0
 MOV DH,5
 MOV DL,19
 INT 10H 

  MOV IS_PAYMENT,1B
 MOV AH,09H
 LEA DX,STR_INSUFFICIENT_VALUE_ERROR
 INT 21H

 CALL PROMPT_VALUE_FUNCTION
RET
;Day Part
DAY PROC
MOV AX,0
MOV DX,0
MOV AH,2AH    ; To get System Date
INT 21H
MOV AL,DL     ; Day is in DL
AAM
MOV BX,AX
CALL DISP

MOV DL,'/'
MOV AH,02H    ; To Print / in DOS
INT 21H
RET

;Month Part
MONTH PROC
MOV AH,2AH    ; To get System Date
INT 21H
MOV AL,DH     ; Month is in DH
AAM
MOV BX,AX
CALL DISP

MOV DL,'/'    ; To Print / in DOS
MOV AH,02H
INT 21H
RET

;Year Part
YEAR PROC
MOV AH,2AH    ; To get System Date
INT 21H
ADD CX,0F830H ; To negate the effects of 16bit value,
MOV AX,CX     ; since AAM is applicable only for AL (YYYY -> YY)
AAM
MOV BX,AX
CALL DISP
RET

;Display Part
DISP PROC
MOV DL,BH      ; Since the values are in BX, BH Part
ADD DL,30H     ; ASCII Adjustment
MOV AH,02H     ; To Print in DOS
INT 21H
MOV DL,BL      ; BL Part 
ADD DL,30H     ; ASCII Adjustment
MOV AH,02H     ; To Print in DOS
INT 21H
MOV AX,0
MOV DX,0
RET

STOCKINOUT_FUNCTION PROC
CALL CLEAR_SCREEN
CALL LOGO

MOV AH,02H    
MOV BH,0
MOV DH,7		
MOV DL,18
INT 10H  
MOV AX, 0000H
MOV AH, 09H
LEA DX, MENU_TITLE
INT 21H
MOV AH,02H    
MOV BH,0
MOV DH,9		
MOV DL,30
INT 10H  
MOV AH, 09H
LEA DX, MENU_LIST1
INT 21H
MOV AH,02H    
MOV BH,0
MOV DH,10		
MOV DL,30
INT 10H  
MOV AH, 09H
LEA DX, MENU_LIST2
INT 21H
MOV AH,02H    
MOV BH,0
MOV DH,11		
MOV DL,30
INT 10H  
MOV AH, 09H
LEA DX, MENU_LIST3
INT 21H
MOV AH,02H    
MOV BH,0
MOV DH,12		
MOV DL,30
INT 10H  
MOV AH, 09H
LEA DX, MENU_LIST4
INT 21H
CALL PROMPT_USERINPUT_MENU
RET 
STOCKINOUT_FUNCTION ENDP

PROMPT_USERINPUT_MENU PROC
MOV AH,02H    
MOV BH,0
MOV DH, 14	
MOV DL,3
INT 10H  
MOV AH, 09H
LEA DX, ASK_USERINPUT_MENU
INT 21H
MOV AH, 01H
INT 21H

MOV USERINPUT_MENU, AL
CMP USERINPUT_MENU, 31H
JE STOCKIN
CMP USERINPUT_MENU, 32H
JE STOCKOUT
CMP USERINPUT_MENU, 33H
JE DISPLAY_STOCK
CMP USERINPUT_MENU, 34H
JE EXIT1
JNE ERROR_MENU

STOCKIN:
CALL STOCKIN_FUNCTION

STOCKOUT:
CALL STOCKOUT_FUNCTION

DISPLAY_STOCK:
CALL DISPLAY_FUNCTION

EXIT1:
CALL CLEAR_SCREEN
CALL MAIN_MENU

ERROR_MENU:
CALL PRT_ERRMSG_MENU
JMP PROMPT_USERINPUT_MENU

RET
PROMPT_USERINPUT_MENU ENDP

PRT_ERRMSG_MENU PROC
MOV AH,02H    
MOV BH,0
MOV DH, 6
MOV DL, 8
INT 10H  
MOV AH, 09H
LEA DX, ERR_MSG_MENUINPUT
INT 21H
RET
PRT_ERRMSG_MENU ENDP

STOCKIN_FUNCTION PROC
CALL CLEAR_SCREEN
CALL LOGO
MOV AH,02H    
MOV BH,0
MOV DH,7		
MOV DL,30
INT 10H  
MOV AH, 09H
LEA DX, STOCKIN_MENU
INT 21H
MOV AH,02H    
MOV BH,0
MOV DH,9		
MOV DL,30
INT 10H  
MOV AH, 09H
LEA DX, VEGE_1
INT 21H
MOV AH,02H    
MOV BH,0
MOV DH,10		
MOV DL,30
INT 10H  
MOV AH, 09H
LEA DX, VEGE_2
INT 21H
MOV AH,02H    
MOV BH,0
MOV DH,11		
MOV DL,30
INT 10H  
MOV AH, 09H
LEA DX, VEGE_3
INT 21H
MOV AH,02H    
MOV BH,0
MOV DH,12		
MOV DL,30
INT 10H  
MOV AH, 09H
LEA DX, VEGE_4
INT 21H
CALL PROMPT_USERINPUT_VEGE_STOCKIN
RET
STOCKIN_FUNCTION ENDP

STOCKOUT_FUNCTION PROC
CALL CLEAR_SCREEN
CALL LOGO
MOV AH,02H    
MOV BH,0
MOV DH,7		
MOV DL,30
INT 10H  
MOV AH, 09H
LEA DX, STOCKOUT_MENU
INT 21H
MOV AH,02H    
MOV BH,0
MOV DH,9		
MOV DL,30
INT 10H  
MOV AH, 09H
LEA DX, VEGE_1
INT 21H
MOV AH,02H    
MOV BH,0
MOV DH,10		
MOV DL,30
INT 10H  
MOV AH, 09H
LEA DX, VEGE_2
INT 21H
MOV AH,02H    
MOV BH,0
MOV DH,11		
MOV DL,30
INT 10H  
MOV AH, 09H
LEA DX, VEGE_3
INT 21H
MOV AH,02H    
MOV BH,0
MOV DH,12		
MOV DL,30
INT 10H  
MOV AH, 09H
LEA DX, VEGE_4
INT 21H
CALL PROMPT_USERINPUT_VEGE_STOCKOUT
RET
STOCKOUT_FUNCTION ENDP

DISPLAY_FUNCTION PROC
CALL CLEAR_SCREEN
CALL LOGO
MOV AH,02H    
MOV BH,0
MOV DH,7		
MOV DL,30
INT 10H  
MOV AH, 09H
LEA DX, DISPLAY_MENU
INT 21H
CALL RECORD_STOCK_TOMATO
CALL RECORD_STOCK_LETTUCE
CALL RECORD_STOCK_CUCUMBER
CALL PRT_STK_TOMATO_DISPLAY
CALL PRT_STK_LETTUCE_DISPLAY
CALL PRT_STK_CUCUMBER_DISPLAY

MOV AH,02H    
MOV BH,0
MOV DH,16	
MOV DL,10
INT 10H
MOV AH, 09H
LEA DX, ANYKEY
INT 21H

MOV AH, 01H
INT 21H

JMP STOCKINOUT_FUNCTION
RET
DISPLAY_FUNCTION ENDP

PRT_STK_TOMATO_DISPLAY PROC
CALL LOGO

MOV AH,02H    
MOV BH,0
MOV DH,10
MOV DL,12
INT 10H  
MOV AH, 09H
LEA DX, MSG_TOTALSTOCK_TOMATO
INT 21H

MOV CX, 0000H
MOV CL, 5
MOV SI, 0
MOV AX, 0000H

CHK_ZERO_TOMATO_DISPLAY:
CMP TOMATOINSTOCK_ARRAY[SI], 30H
JE INCSI_TOMATO_DISPLAY
JNE CONTINUE_PRT_TOMATO_DISPLAY

INCSI_TOMATO_DISPLAY:
INC SI
LOOP CHK_ZERO_TOMATO_DISPLAY

CONTINUE_PRT_TOMATO_DISPLAY:
JMP PRT_TOMATO_DISPLAY

LOOP CHK_ZERO_TOMATO_DISPLAY

PRT_TOMATO_DISPLAY:
MOV AH, 02H
MOV DL, TOMATOINSTOCK_ARRAY[SI]
INT 21H
INC SI
LOOP PRT_TOMATO_DISPLAY

RET
PRT_STK_TOMATO_DISPLAY ENDP

PRT_STK_LETTUCE_DISPLAY PROC
CALL LOGO

MOV AH,02H    
MOV BH,0
MOV DH,12
MOV DL,12
INT 10H  
MOV AH, 09H
LEA DX, MSG_TOTALSTOCK_LETTUCE
INT 21H

MOV CX, 0000H
MOV CL, 5
MOV SI, 0
MOV AX, 0000H

CHK_ZERO_LETTUCE_DISPLAY:
CMP LETTUCEINSTOCK_ARRAY[SI], 30H
JE INCSI_LETTUCE_DISPLAY
JNE CONTINUE_PRT_LETTUCE_DISPLAY

INCSI_LETTUCE_DISPLAY:
INC SI
LOOP CHK_ZERO_LETTUCE_DISPLAY

CONTINUE_PRT_LETTUCE_DISPLAY:
JMP PRT_LETTUCE_DISPLAY

LOOP CHK_ZERO_LETTUCE_DISPLAY

PRT_LETTUCE_DISPLAY:
MOV AH, 02H
MOV DL, LETTUCEINSTOCK_ARRAY[SI]
INT 21H
INC SI
LOOP PRT_LETTUCE_DISPLAY

RET
PRT_STK_LETTUCE_DISPLAY ENDP

PRT_STK_CUCUMBER_DISPLAY PROC
CALL LOGO

MOV AH,02H    
MOV BH,0
MOV DH,14
MOV DL,12
INT 10H  
MOV AH, 09H
LEA DX, MSG_TOTALSTOCK_CUCUMBER
INT 21H

MOV CX, 0000H
MOV CL, 5
MOV SI, 0
MOV AX, 0000H

CHK_ZERO_CUCUMBER_DISPLAY:
CMP CUCUMBERINSTOCK_ARRAY[SI], 30H
JE INCSI_CUCUMBER_DISPLAY
JNE CONTINUE_PRT_CUCUMBER_DISPLAY

INCSI_CUCUMBER_DISPLAY:
INC SI
LOOP CHK_ZERO_CUCUMBER_DISPLAY

CONTINUE_PRT_CUCUMBER_DISPLAY:
JMP PRT_CUCUMBER_DISPLAY

LOOP CHK_ZERO_CUCUMBER_DISPLAY

PRT_CUCUMBER_DISPLAY:
MOV AH, 02H
MOV DL, CUCUMBERINSTOCK_ARRAY[SI]
INT 21H
INC SI
LOOP PRT_CUCUMBER_DISPLAY

RET
PRT_STK_CUCUMBER_DISPLAY ENDP

PROMPT_USERINPUT_VEGE_STOCKIN PROC
MOV AH,02H    
MOV BH,0
MOV DH,15
MOV DL,1
INT 10H  
MOV AH, 09H
LEA DX, ASK_USERINPUT_VEGE
INT 21H
MOV AH, 01H
INT 21H

MOV USERINPUT_VEGE, AL
CMP USERINPUT_VEGE, 31H
JE TOMATO_IN
CMP USERINPUT_VEGE, 32H
JE LETTUCE_IN
CMP USERINPUT_VEGE, 33H
JE CUCUMBER_IN
CMP USERINPUT_VEGE, 34H
JE BACK_MAINMENU
JNE ERROR_VEGE_IN

TOMATO_IN:
CALL CLEAR_SCREEN
CALL LOGO
CALL TOMATO_STOCKIN

LETTUCE_IN:
CALL CLEAR_SCREEN
CALL LOGO
CALL LETTUCE_STOCKIN

CUCUMBER_IN:
CALL CLEAR_SCREEN
CALL LOGO
CALL CUCUMBER_STOCKIN

BACK_MAINMENU:
CALL STOCKINOUT_FUNCTION

ERROR_VEGE_IN:
CALL PRT_ERRMSG_MENU
JMP PROMPT_USERINPUT_VEGE_STOCKIN

RET
PROMPT_USERINPUT_VEGE_STOCKIN ENDP


TOMATO_STOCKIN PROC
CALL RECORD_STOCK_TOMATO
CALL PRT_STK_TOMATO
MOV AH,02H    
MOV BH,0
MOV DH,10		
MOV DL,5
INT 10H  
MOV AH, 09H
LEA DX, ASK_USERINPUT_STOCKIN
INT 21H
MOV AH, 0AH
LEA DX, STOCKINARRAY
INT 21H

CMP STOCKINACT, 5
JE TOMATO_5DIGIT_IN
CMP STOCKINACT, 4
JE TOMATO_4DIGIT_IN
CMP STOCKINACT, 3
JE TOMATO_3DIGIT_IN
CMP STOCKINACT, 2
JE TOMATO_2DIGIT_IN
CMP STOCKINACT, 1
JE TOMATO_1DIGIT_IN
RET 

TOMATO_5DIGIT_IN:
CALL CONVERSION_HEX_DECIMAL_STOCKIN
CALL FIVE_DIGIT_STOCKIN
CALL ADD_STOCK_TOMATO
CALL RECORD_STOCK_TOMATO
CALL PRT_STK_TOMATO_2
CALL CONTINUE_ADD

TOMATO_4DIGIT_IN:
CALL CONVERSION_HEX_DECIMAL_STOCKIN
CALL FOUR_DIGIT_STOCKIN
CALL ADD_STOCK_TOMATO
CALL RECORD_STOCK_TOMATO
CALL PRT_STK_TOMATO_2
CALL CONTINUE_ADD

TOMATO_3DIGIT_IN:
CALL CONVERSION_HEX_DECIMAL_STOCKIN
CALL THREE_DIGIT_STOCKIN
CALL ADD_STOCK_TOMATO
CALL RECORD_STOCK_TOMATO
CALL PRT_STK_TOMATO_2
CALL CONTINUE_ADD

TOMATO_2DIGIT_IN:
CALL CONVERSION_HEX_DECIMAL_STOCKIN
CALL TWO_DIGIT_STOCKIN
CALL ADD_STOCK_TOMATO
CALL RECORD_STOCK_TOMATO
CALL PRT_STK_TOMATO_2
CALL CONTINUE_ADD

TOMATO_1DIGIT_IN:
CALL CONVERSION_HEX_DECIMAL_STOCKIN
CALL ONE_DIGIT_STOCKIN
CALL ADD_STOCK_TOMATO
CALL RECORD_STOCK_TOMATO
CALL PRT_STK_TOMATO_2
CALL CONTINUE_ADD

TOMATO_STOCKIN ENDP

LETTUCE_STOCKIN PROC
CALL RECORD_STOCK_LETTUCE
CALL PRT_STK_LETTUCE
MOV AH,02H    
MOV BH,0
MOV DH,10		
MOV DL,5
INT 10H  
MOV AH, 09H
LEA DX, ASK_USERINPUT_STOCKIN
INT 21H
MOV AH, 0AH
LEA DX, STOCKINARRAY
INT 21H

CMP STOCKINACT, 5
JE LETTUCE_5DIGIT_IN
CMP STOCKINACT, 4
JE LETTUCE_4DIGIT_IN
CMP STOCKINACT, 3
JE LETTUCE_3DIGIT_IN
CMP STOCKINACT, 2
JE LETTUCE_2DIGIT_IN
CMP STOCKINACT, 1
JE LETTUCE_1DIGIT_IN
RET 

LETTUCE_5DIGIT_IN:
CALL CONVERSION_HEX_DECIMAL_STOCKIN
CALL FIVE_DIGIT_STOCKIN
CALL ADD_STOCK_LETTUCE
CALL RECORD_STOCK_LETTUCE
CALL PRT_STK_LETTUCE_2
CALL CONTINUE_ADD

LETTUCE_4DIGIT_IN:
CALL CONVERSION_HEX_DECIMAL_STOCKIN
CALL FOUR_DIGIT_STOCKIN
CALL ADD_STOCK_LETTUCE
CALL RECORD_STOCK_LETTUCE
CALL PRT_STK_LETTUCE_2
CALL CONTINUE_ADD

LETTUCE_3DIGIT_IN:
CALL CONVERSION_HEX_DECIMAL_STOCKIN
CALL THREE_DIGIT_STOCKIN
CALL ADD_STOCK_LETTUCE
CALL RECORD_STOCK_LETTUCE
CALL PRT_STK_LETTUCE_2
CALL CONTINUE_ADD

LETTUCE_2DIGIT_IN:
CALL CONVERSION_HEX_DECIMAL_STOCKIN
CALL TWO_DIGIT_STOCKIN
CALL ADD_STOCK_LETTUCE
CALL RECORD_STOCK_LETTUCE
CALL PRT_STK_LETTUCE_2
CALL CONTINUE_ADD

LETTUCE_1DIGIT_IN:
CALL CONVERSION_HEX_DECIMAL_STOCKIN
CALL ONE_DIGIT_STOCKIN
CALL ADD_STOCK_LETTUCE
CALL RECORD_STOCK_LETTUCE
CALL PRT_STK_LETTUCE_2
CALL CONTINUE_ADD

LETTUCE_STOCKIN ENDP

CUCUMBER_STOCKIN PROC
CALL RECORD_STOCK_CUCUMBER
CALL PRT_STK_CUCUMBER
MOV AH,02H    
MOV BH,0
MOV DH,10		
MOV DL,5
INT 10H  
MOV AH, 09H
LEA DX, ASK_USERINPUT_STOCKIN
INT 21H
MOV AH, 0AH
LEA DX, STOCKINARRAY
INT 21H

CMP STOCKINACT, 5
JE CUCUMBER_5DIGIT_IN
CMP STOCKINACT, 4
JE CUCUMBER_4DIGIT_IN
CMP STOCKINACT, 3
JE CUCUMBER_3DIGIT_IN
CMP STOCKINACT, 2
JE CUCUMBER_2DIGIT_IN
CMP STOCKINACT, 1
JE CUCUMBER_1DIGIT_IN
RET 

CUCUMBER_5DIGIT_IN:
CALL CONVERSION_HEX_DECIMAL_STOCKIN
CALL FIVE_DIGIT_STOCKIN
CALL ADD_STOCK_CUCUMBER
CALL RECORD_STOCK_CUCUMBER
CALL PRT_STK_CUCUMBER_2
CALL CONTINUE_ADD

CUCUMBER_4DIGIT_IN:
CALL CONVERSION_HEX_DECIMAL_STOCKIN
CALL FOUR_DIGIT_STOCKIN
CALL ADD_STOCK_CUCUMBER
CALL RECORD_STOCK_CUCUMBER
CALL PRT_STK_CUCUMBER_2
CALL CONTINUE_ADD

CUCUMBER_3DIGIT_IN:
CALL CONVERSION_HEX_DECIMAL_STOCKIN
CALL THREE_DIGIT_STOCKIN
CALL ADD_STOCK_CUCUMBER
CALL RECORD_STOCK_CUCUMBER
CALL PRT_STK_CUCUMBER_2
CALL CONTINUE_ADD

CUCUMBER_2DIGIT_IN:
CALL CONVERSION_HEX_DECIMAL_STOCKIN
CALL TWO_DIGIT_STOCKIN
CALL ADD_STOCK_CUCUMBER
CALL RECORD_STOCK_CUCUMBER
CALL PRT_STK_CUCUMBER_2
CALL CONTINUE_ADD

CUCUMBER_1DIGIT_IN:
CALL CONVERSION_HEX_DECIMAL_STOCKIN
CALL ONE_DIGIT_STOCKIN
CALL ADD_STOCK_CUCUMBER
CALL RECORD_STOCK_CUCUMBER
CALL PRT_STK_CUCUMBER_2
CALL CONTINUE_ADD

CUCUMBER_STOCKIN ENDP

PROMPT_USERINPUT_VEGE_STOCKOUT PROC
MOV AH,02H    
MOV BH,0
MOV DH,15		
MOV DL,2
INT 10H  
MOV AH, 09H
LEA DX, ASK_USERINPUT_VEGE
INT 21H
MOV AH, 01H
INT 21H

MOV USERINPUT_VEGE, AL
CMP USERINPUT_VEGE, 31H
JE TOMATO_OUT
CMP USERINPUT_VEGE, 32H
JE LETTUCE_OUT
CMP USERINPUT_VEGE, 33H
JE CUCUMBER_OUT
CMP USERINPUT_VEGE, 34H
JE BACK_MAINMENU_OUT
JNE ERROR_VEGE_OUT

TOMATO_OUT:
CALL CLEAR_SCREEN
CALL LOGO
CALL TOMATO_STOCKOUT

LETTUCE_OUT:
CALL CLEAR_SCREEN
CALL LOGO
CALL LETTUCE_STOCKOUT

CUCUMBER_OUT:
CALL CLEAR_SCREEN
CALL LOGO
CALL CUCUMBER_STOCKOUT

BACK_MAINMENU_OUT:
CALL STOCKINOUT_FUNCTION

ERROR_VEGE_OUT:
CALL PRT_ERRMSG_MENU
JMP PROMPT_USERINPUT_VEGE_STOCKOUT

RET
PROMPT_USERINPUT_VEGE_STOCKOUT ENDP

TOMATO_STOCKOUT PROC
CALL RECORD_STOCK_TOMATO
CALL PRT_STK_TOMATO
MOV AH,02H    
MOV BH,0
MOV DH,10		
MOV DL,5
INT 10H  
MOV AH, 09H
LEA DX, ASK_USERINPUT_STOCKOUT
INT 21H
MOV AH, 0AH
LEA DX, STOCKOUTARRAY
INT 21H

CMP STOCKOUTACT, 5
JE TOMATO_5DIGIT_OUT
CMP STOCKOUTACT, 4
JE TOMATO_4DIGIT_OUT
CMP STOCKOUTACT, 3
JE TOMATO_3DIGIT_OUT
CMP STOCKOUTACT, 2
JE TOMATO_2DIGIT_OUT
CMP STOCKOUTACT, 1
JE TOMATO_1DIGIT_OUT 
RET

TOMATO_5DIGIT_OUT:
CALL CONVERSION_HEX_DECIMAL_STOCKOUT
CALL FIVE_DIGIT_STOCKOUT
CALL MINUS_STOCK_TOMATO
CALL RECORD_STOCK_TOMATO
CALL PRT_STK_TOMATO_2
CALL CONTINUE_MINUS


TOMATO_4DIGIT_OUT:
CALL CONVERSION_HEX_DECIMAL_STOCKOUT
CALL FOUR_DIGIT_STOCKOUT
CALL MINUS_STOCK_TOMATO
CALL RECORD_STOCK_TOMATO
CALL PRT_STK_TOMATO_2
CALL CONTINUE_MINUS


TOMATO_3DIGIT_OUT:
CALL CONVERSION_HEX_DECIMAL_STOCKOUT
CALL THREE_DIGIT_STOCKOUT
CALL MINUS_STOCK_TOMATO
CALL RECORD_STOCK_TOMATO
CALL PRT_STK_TOMATO_2
CALL CONTINUE_MINUS


TOMATO_2DIGIT_OUT:
CALL CONVERSION_HEX_DECIMAL_STOCKOUT
CALL TWO_DIGIT_STOCKOUT
CALL MINUS_STOCK_TOMATO
CALL RECORD_STOCK_TOMATO
CALL PRT_STK_TOMATO_2
CALL CONTINUE_MINUS


TOMATO_1DIGIT_OUT:
CALL CONVERSION_HEX_DECIMAL_STOCKOUT
CALL ONE_DIGIT_STOCKOUT
CALL MINUS_STOCK_TOMATO
CALL RECORD_STOCK_TOMATO
CALL PRT_STK_TOMATO_2
CALL CONTINUE_MINUS


TOMATO_STOCKOUT ENDP

LETTUCE_STOCKOUT PROC
CALL RECORD_STOCK_LETTUCE
CALL PRT_STK_LETTUCE
MOV AH,02H    
MOV BH,0
MOV DH,10		
MOV DL,5
INT 10H  
MOV AH, 09H
LEA DX, ASK_USERINPUT_STOCKOUT
INT 21H
MOV AH, 0AH
LEA DX, STOCKOUTARRAY
INT 21H

CMP STOCKOUTACT, 5
JE LETTUCE_5DIGIT_OUT
CMP STOCKOUTACT, 4
JE LETTUCE_4DIGIT_OUT
CMP STOCKOUTACT, 3
JE LETTUCE_3DIGIT_OUT
CMP STOCKOUTACT, 2
JE LETTUCE_2DIGIT_OUT
CMP STOCKOUTACT, 1
JE LETTUCE_1DIGIT_OUT
RET 


LETTUCE_5DIGIT_OUT:
CALL CONVERSION_HEX_DECIMAL_STOCKOUT
CALL FIVE_DIGIT_STOCKOUT
CALL MINUS_STOCK_LETTUCE
CALL RECORD_STOCK_LETTUCE
CALL PRT_STK_LETTUCE_2
CALL CONTINUE_MINUS

LETTUCE_4DIGIT_OUT:
CALL CONVERSION_HEX_DECIMAL_STOCKOUT
CALL FOUR_DIGIT_STOCKOUT
CALL MINUS_STOCK_LETTUCE
CALL RECORD_STOCK_LETTUCE
CALL PRT_STK_LETTUCE_2
CALL CONTINUE_MINUS

LETTUCE_3DIGIT_OUT:
CALL CONVERSION_HEX_DECIMAL_STOCKOUT
CALL THREE_DIGIT_STOCKOUT
CALL MINUS_STOCK_LETTUCE
CALL RECORD_STOCK_LETTUCE
CALL PRT_STK_LETTUCE_2
CALL CONTINUE_MINUS

LETTUCE_2DIGIT_OUT:
CALL CONVERSION_HEX_DECIMAL_STOCKOUT
CALL TWO_DIGIT_STOCKOUT
CALL MINUS_STOCK_LETTUCE
CALL RECORD_STOCK_LETTUCE
CALL PRT_STK_LETTUCE_2
CALL CONTINUE_MINUS

LETTUCE_1DIGIT_OUT:
CALL CONVERSION_HEX_DECIMAL_STOCKOUT
CALL ONE_DIGIT_STOCKOUT
CALL MINUS_STOCK_LETTUCE
CALL RECORD_STOCK_LETTUCE
CALL PRT_STK_LETTUCE_2
CALL CONTINUE_MINUS

LETTUCE_STOCKOUT ENDP

CUCUMBER_STOCKOUT PROC
CALL RECORD_STOCK_CUCUMBER
CALL PRT_STK_CUCUMBER
MOV AH,02H    
MOV BH,0
MOV DH,10		
MOV DL,5
INT 10H  
MOV AH, 09H
LEA DX, ASK_USERINPUT_STOCKOUT
INT 21H
MOV AH, 0AH
LEA DX, STOCKOUTARRAY
INT 21H

CMP STOCKOUTACT, 5
JE CUCUMBER_5DIGIT_OUT
CMP STOCKOUTACT, 4
JE CUCUMBER_4DIGIT_OUT
CMP STOCKOUTACT, 3
JE CUCUMBER_3DIGIT_OUT
CMP STOCKOUTACT, 2
JE CUCUMBER_2DIGIT_OUT
CMP STOCKOUTACT, 1
JE CUCUMBER_1DIGIT_OUT
RET 

CUCUMBER_5DIGIT_OUT:
CALL CONVERSION_HEX_DECIMAL_STOCKOUT
CALL FIVE_DIGIT_STOCKOUT
CALL MINUS_STOCK_CUCUMBER
CALL RECORD_STOCK_CUCUMBER
CALL PRT_STK_CUCUMBER_2
CALL CONTINUE_MINUS

CUCUMBER_4DIGIT_OUT:
CALL CONVERSION_HEX_DECIMAL_STOCKOUT
CALL FOUR_DIGIT_STOCKOUT
CALL MINUS_STOCK_CUCUMBER
CALL RECORD_STOCK_CUCUMBER
CALL PRT_STK_CUCUMBER_2
CALL CONTINUE_MINUS


CUCUMBER_3DIGIT_OUT:
CALL CONVERSION_HEX_DECIMAL_STOCKOUT
CALL THREE_DIGIT_STOCKOUT
CALL MINUS_STOCK_CUCUMBER
CALL RECORD_STOCK_CUCUMBER
CALL PRT_STK_CUCUMBER_2
CALL CONTINUE_MINUS


CUCUMBER_2DIGIT_OUT:
CALL CONVERSION_HEX_DECIMAL_STOCKOUT
CALL TWO_DIGIT_STOCKOUT
CALL MINUS_STOCK_CUCUMBER
CALL RECORD_STOCK_CUCUMBER
CALL PRT_STK_CUCUMBER_2
CALL CONTINUE_MINUS


CUCUMBER_1DIGIT_OUT:
CALL CONVERSION_HEX_DECIMAL_STOCKOUT
CALL ONE_DIGIT_STOCKOUT
CALL MINUS_STOCK_CUCUMBER
CALL RECORD_STOCK_CUCUMBER
CALL PRT_STK_CUCUMBER_2
CALL CONTINUE_MINUS

CUCUMBER_STOCKOUT ENDP

CONVERSION_HEX_DECIMAL_STOCKIN PROC
MOV CX, 0000H
MOV CL, STOCKINACT
MOV SI, 0
CONVERT_HEX_DECIMAL_STOCKIN:
SUB STOCKINARRAY_DATA[SI], 30H
INC SI
LOOP CONVERT_HEX_DECIMAL_STOCKIN
RET
CONVERSION_HEX_DECIMAL_STOCKIN ENDP

CONVERSION_HEX_DECIMAL_STOCKOUT PROC
MOV CX, 0000H
MOV CL, STOCKOUTACT
MOV SI, 0
CONVERT_HEX_DECIMAL_STOCKOUT:
SUB STOCKOUTARRAY_DATA[SI], 30H
INC SI
LOOP CONVERT_HEX_DECIMAL_STOCKOUT
RET
CONVERSION_HEX_DECIMAL_STOCKOUT ENDP

FIVE_DIGIT_STOCKIN PROC
MOV CX, 0000H
MOV CL, STOCKINACT
MOV SI, 4
MOV ONE, 1
MOV TOTAL_INPUT_STOCKIN, 0000H
CALCULATION5_STOCKIN:
MOV AX, 0000H
MOV AL, STOCKINARRAY_DATA[SI]
MUL ONE
ADD TOTAL_INPUT_STOCKIN, AX
JC PRT_ERRMSG_INPUTMORE_IN
DEC SI
MOV AX, 0000H
MOV AX, ONE
MUL TEN_STOCK
MOV ONE, AX
MOV AX, 0000H
MOV AX, TOTAL_INPUT_STOCKIN
CMP AX, 65535
JA PRT_ERRMSG_INPUTMORE_IN
LOOP CALCULATION5_STOCKIN
RET

PRT_ERRMSG_INPUTMORE_IN:
CALL CLEAR_SCREEN
CALL LOGO
MOV AH,02H    
MOV BH,0
MOV DH,6
MOV DL,10
INT 10H  
MOV AH, 09H
LEA DX, ERR_MSG_INPUTMORE
INT 21H

CMP USERINPUT_VEGE, 31H
JE CALL_TOMATO_STOCKIN
CMP USERINPUT_VEGE, 32H
JE CALL_LETTUCE_STOCKIN
CMP USERINPUT_VEGE, 33H
JE CALL_CUCUMBER_STOCKIN

CALL_TOMATO_STOCKIN:
JMP TOMATO_STOCKIN

CALL_LETTUCE_STOCKIN:
JMP LETTUCE_STOCKIN

CALL_CUCUMBER_STOCKIN:
JMP CUCUMBER_STOCKIN

FIVE_DIGIT_STOCKIN ENDP

FIVE_DIGIT_STOCKOUT PROC
MOV CX, 0000H
MOV CL, STOCKOUTACT
MOV SI, 4
MOV ONE, 1
MOV TOTAL_INPUT_STOCKOUT, 0000H
CALCULATION5_STOCKOUT:
MOV AX, 0000H
MOV AL, STOCKOUTARRAY_DATA[SI]
MUL ONE
ADD TOTAL_INPUT_STOCKOUT, AX
JC PRT_ERRMSG_INPUTMORE_OUT
DEC SI
MOV AX, 0000H
MOV AX, ONE
MUL TEN_STOCK
MOV ONE, AX
MOV AX, 0000H
MOV AX, TOTAL_INPUT_STOCKOUT
CMP AX, 65535
JA PRT_ERRMSG_INPUTMORE_OUT
LOOP CALCULATION5_STOCKOUT
RET

PRT_ERRMSG_INPUTMORE_OUT:
CALL CLEAR_SCREEN
CALL LOGO
MOV AH,02H    
MOV BH,0
MOV DH,6
MOV DL,10
INT 10H  
MOV AH, 09H
LEA DX, ERR_MSG_INPUTMORE
INT 21H

CMP USERINPUT_VEGE, 31H
JE CALL_TOMATO_STOCKOUT
CMP USERINPUT_VEGE, 32H
JE CALL_LETTUCE_STOCKOUT
CMP USERINPUT_VEGE, 33H
JE CALL_CUCUMBER_STOCKOUT

CALL_TOMATO_STOCKOUT:
JMP TOMATO_STOCKOUT

CALL_LETTUCE_STOCKOUT:
JMP LETTUCE_STOCKOUT

CALL_CUCUMBER_STOCKOUT:
JMP CUCUMBER_STOCKOUT

FIVE_DIGIT_STOCKOUT ENDP

FOUR_DIGIT_STOCKIN PROC
MOV CX, 0000H
MOV CL, STOCKINACT
MOV SI, 3
MOV ONE, 1
MOV TOTAL_INPUT_STOCKIN, 0000H
CALCULATION4_STOCKIN:
MOV AX, 0000H
MOV AL, STOCKINARRAY_DATA[SI]
MUL ONE
ADD TOTAL_INPUT_STOCKIN, AX
DEC SI
MOV AX, 0000H
MOV AX, ONE
MUL TEN_STOCK
MOV ONE, AX
LOOP CALCULATION4_STOCKIN
RET

FOUR_DIGIT_STOCKIN ENDP

FOUR_DIGIT_STOCKOUT PROC
MOV CX, 0000H
MOV CL, STOCKOUTACT
MOV SI, 3
MOV ONE, 1
MOV TOTAL_INPUT_STOCKOUT, 0000H
CALCULATION4_STOCKOUT:
MOV AX, 0000H
MOV AL, STOCKOUTARRAY_DATA[SI]
MUL ONE
ADD TOTAL_INPUT_STOCKOUT, AX
DEC SI
MOV AX, 0000H
MOV AX, ONE
MUL TEN_STOCK
MOV ONE, AX
LOOP CALCULATION4_STOCKOUT
RET

FOUR_DIGIT_STOCKOUT ENDP

THREE_DIGIT_STOCKIN PROC
MOV CX, 0000H
MOV CL, STOCKINACT
MOV SI, 2
MOV ONE, 1
MOV TOTAL_INPUT_STOCKIN, 0000H
CALCULATION3_STOCKIN:
MOV AX, 0000H
MOV AL, STOCKINARRAY_DATA[SI]
MUL ONE
ADD TOTAL_INPUT_STOCKIN, AX
DEC SI
MOV AX, 0000H
MOV AX, ONE
MUL TEN_STOCK
MOV ONE, AX
LOOP CALCULATION3_STOCKIN
RET

THREE_DIGIT_STOCKIN ENDP

THREE_DIGIT_STOCKOUT PROC
MOV CX, 0000H
MOV CL, STOCKOUTACT
MOV SI, 2
MOV ONE, 1
MOV TOTAL_INPUT_STOCKOUT, 0000H
CALCULATION3_STOCKOUT:
MOV AX, 0000H
MOV AL, STOCKOUTARRAY_DATA[SI]
MUL ONE
ADD TOTAL_INPUT_STOCKOUT, AX
DEC SI
MOV AX, 0000H
MOV AX, ONE
MUL TEN_STOCK
MOV ONE, AX
LOOP CALCULATION3_STOCKOUT
RET

THREE_DIGIT_STOCKOUT ENDP

TWO_DIGIT_STOCKIN PROC
MOV CX, 0000H
MOV CL, STOCKINACT
MOV SI, 1
MOV ONE, 1
MOV TOTAL_INPUT_STOCKIN, 0000H
CALCULATION2_STOCKIN:
MOV AX, 0000H
MOV AL, STOCKINARRAY_DATA[SI]
MUL ONE
ADD TOTAL_INPUT_STOCKIN, AX
DEC SI
MOV AX, 0000H
MOV AX, ONE
MUL TEN_STOCK
MOV ONE, AX
LOOP CALCULATION2_STOCKIN
RET

TWO_DIGIT_STOCKIN ENDP

TWO_DIGIT_STOCKOUT PROC
MOV CX, 0000H
MOV CL, STOCKOUTACT
MOV SI, 1
MOV ONE, 1
MOV TOTAL_INPUT_STOCKOUT, 0000H
CALCULATION2_STOCKOUT:
MOV AX, 0000H
MOV AL, STOCKOUTARRAY_DATA[SI]
MUL ONE
ADD TOTAL_INPUT_STOCKOUT, AX
DEC SI
MOV AX, 0000H
MOV AX, ONE
MUL TEN_STOCK
MOV ONE, AX
LOOP CALCULATION2_STOCKOUT
RET

TWO_DIGIT_STOCKOUT ENDP

ONE_DIGIT_STOCKIN PROC
MOV CX, 0000H
MOV CL, STOCKINACT
MOV SI, 0
MOV ONE, 1
MOV TOTAL_INPUT_STOCKIN, 0000H
CALCULATION1_STOCKIN:
MOV AX, 0000H
MOV AL, STOCKINARRAY_DATA[SI]
MUL ONE
ADD TOTAL_INPUT_STOCKIN, AX
DEC SI
MOV AX, 0000H
MOV AX, ONE
MUL TEN_STOCK
MOV ONE, AX
LOOP CALCULATION1_STOCKIN
RET

ONE_DIGIT_STOCKIN ENDP

ONE_DIGIT_STOCKOUT PROC
MOV CX, 0000H
MOV CL, STOCKOUTACT
MOV SI, 0
MOV ONE, 1
MOV TOTAL_INPUT_STOCKOUT, 0000H
CALCULATION1_STOCKOUT:
MOV AX, 0000H
MOV AL, STOCKOUTARRAY_DATA[SI]
MUL ONE
ADD TOTAL_INPUT_STOCKOUT, AX
DEC SI
MOV AX, 0000H
MOV AX, ONE
MUL TEN_STOCK
MOV ONE, AX
LOOP CALCULATION1_STOCKOUT
RET

ONE_DIGIT_STOCKOUT ENDP

ADD_STOCK_TOMATO PROC
MOV AX, 0000H
MOV AX, TOTAL_TOMATO_INSTOCK
ADD AX, TOTAL_INPUT_STOCKIN
JC PRT_ERRMSG_EXCEED_TOMATO
MOV TOTAL_TOMATO_INSTOCK, AX
MOV AX, 0
MOV AX, TOTAL_TOMATO_INSTOCK
CMP AX, 65535
JA PRT_ERRMSG_EXCEED_TOMATO
MOV TOTAL_TOMATO_INSTOCK, AX
RET

PRT_ERRMSG_EXCEED_TOMATO:
CALL CLEAR_SCREEN
CALL LOGO
MOV AH,02H    
MOV BH,0
MOV DH,6	
MOV DL,11
INT 10H  
MOV AH, 09H
LEA DX, ERR_MSG_EXCEED
INT 21H
JMP TOMATO_STOCKIN

ADD_STOCK_TOMATO ENDP

MINUS_STOCK_TOMATO PROC
MOV AX, 0000H
MOV AX, TOTAL_TOMATO_INSTOCK
SUB AX, TOTAL_INPUT_STOCKOUT
JC PRT_ERRMSG_BELOW_TOMATO
MOV TOTAL_TOMATO_INSTOCK, AX
MOV AX, 0
MOV AX, TOTAL_TOMATO_INSTOCK
CMP AX, 0
JB PRT_ERRMSG_BELOW_TOMATO
MOV TOTAL_TOMATO_INSTOCK, AX
RET

PRT_ERRMSG_BELOW_TOMATO:
CALL CLEAR_SCREEN
CALL LOGO
MOV AH,02H    
MOV BH,0
MOV DH,6
MOV DL,11
INT 10H  
MOV AH, 09H
LEA DX, ERR_MSG_BELOW
INT 21H
JMP TOMATO_STOCKOUT

MINUS_STOCK_TOMATO ENDP

ADD_STOCK_LETTUCE PROC
MOV AX, 0000H
MOV AX, TOTAL_LETTUCE_INSTOCK
ADD AX, TOTAL_INPUT_STOCKIN
JC PRT_ERRMSG_EXCEED_LETTUCE
MOV TOTAL_LETTUCE_INSTOCK, AX
MOV AX, 0
MOV AX, TOTAL_LETTUCE_INSTOCK
CMP AX, 65535
JA PRT_ERRMSG_EXCEED_LETTUCE
MOV TOTAL_LETTUCE_INSTOCK, AX
RET

PRT_ERRMSG_EXCEED_LETTUCE:
CALL CLEAR_SCREEN
CALL LOGO
MOV AH,02H    
MOV BH,0
MOV DH,6	
MOV DL,11
INT 10H  
MOV AH, 09H
LEA DX, ERR_MSG_EXCEED
INT 21H
JMP LETTUCE_STOCKIN

ADD_STOCK_LETTUCE ENDP

MINUS_STOCK_LETTUCE PROC
MOV AX, 0000H
MOV AX, TOTAL_LETTUCE_INSTOCK
SUB AX, TOTAL_INPUT_STOCKOUT
JC PRT_ERRMSG_BELOW_LETTUCE
MOV TOTAL_LETTUCE_INSTOCK, AX
MOV AX, 0
MOV AX, TOTAL_LETTUCE_INSTOCK
CMP AX, 0
JB PRT_ERRMSG_BELOW_LETTUCE
MOV TOTAL_LETTUCE_INSTOCK, AX
RET

PRT_ERRMSG_BELOW_LETTUCE:
CALL CLEAR_SCREEN
CALL LOGO
MOV AH,02H    
MOV BH,0
MOV DH,6	
MOV DL,11
INT 10H  
MOV AH, 09H
LEA DX, ERR_MSG_BELOW
INT 21H
JMP LETTUCE_STOCKOUT

MINUS_STOCK_LETTUCE ENDP

ADD_STOCK_CUCUMBER PROC
MOV AX, 0000H
MOV AX, TOTAL_CUCUMBER_INSTOCK
ADD AX, TOTAL_INPUT_STOCKIN
JC PRT_ERRMSG_EXCEED_CUCUMBER
MOV TOTAL_CUCUMBER_INSTOCK, AX
MOV AX, 0
MOV AX, TOTAL_CUCUMBER_INSTOCK
CMP AX, 65535
JA PRT_ERRMSG_EXCEED_CUCUMBER
MOV TOTAL_CUCUMBER_INSTOCK, AX
RET

PRT_ERRMSG_EXCEED_CUCUMBER:
CALL CLEAR_SCREEN
CALL LOGO
MOV AH,02H    
MOV BH,0
MOV DH,6	
MOV DL,11
INT 10H  
MOV AH, 09H
LEA DX, ERR_MSG_EXCEED
INT 21H
JMP CUCUMBER_STOCKIN

ADD_STOCK_CUCUMBER ENDP

MINUS_STOCK_CUCUMBER PROC
MOV AX, 0000H
MOV AX, TOTAL_CUCUMBER_INSTOCK
SUB AX, TOTAL_INPUT_STOCKOUT
JC PRT_ERRMSG_BELOW_CUCUMBER
MOV TOTAL_CUCUMBER_INSTOCK, AX
MOV AX, 0
MOV AX, TOTAL_CUCUMBER_INSTOCK
CMP AX, 0
JB PRT_ERRMSG_BELOW_CUCUMBER
MOV TOTAL_CUCUMBER_INSTOCK, AX
RET

PRT_ERRMSG_BELOW_CUCUMBER:
CALL CLEAR_SCREEN
CALL LOGO
MOV AH,02H    
MOV BH,0
MOV DH,6	
MOV DL,11
INT 10H  
MOV AH, 09H
LEA DX, ERR_MSG_BELOW
INT 21H
JMP CUCUMBER_STOCKOUT

MINUS_STOCK_CUCUMBER ENDP

RECORD_STOCK_TOMATO PROC
MOV CX, 0000H
MOV CL, 5
MOV SI, 4
MOV AX, TOTAL_TOMATO_INSTOCK
STORE_TOMATO:
MOV DX, 0
DIV TEN_STOCK
MOV QUOTIENT, AX
ADD DX, 30H
MOV TOMATOINSTOCK_ARRAY[SI], DL
MOV AX, QUOTIENT
DEC SI
LOOP STORE_TOMATO
RET
RECORD_STOCK_TOMATO ENDP

RECORD_STOCK_LETTUCE PROC
MOV CX, 0000H
MOV CL, 5
MOV SI, 4
MOV AX, TOTAL_LETTUCE_INSTOCK
STORE_LETTUCE:
MOV DX, 0
DIV TEN_STOCK
MOV QUOTIENT, AX
ADD DX, 30H
MOV LETTUCEINSTOCK_ARRAY[SI], DL
MOV AX, QUOTIENT
DEC SI
LOOP STORE_LETTUCE
RET
RECORD_STOCK_LETTUCE ENDP

RECORD_STOCK_CUCUMBER PROC
MOV CX, 0000H
MOV CL, 5
MOV SI, 4
MOV AX, TOTAL_CUCUMBER_INSTOCK
STORE_CUCUMBER:
MOV DX, 0
DIV TEN_STOCK
MOV QUOTIENT, AX
ADD DX, 30H
MOV CUCUMBERINSTOCK_ARRAY[SI], DL
MOV AX, QUOTIENT
DEC SI
LOOP STORE_CUCUMBER
RET
RECORD_STOCK_CUCUMBER ENDP

PRT_STK_TOMATO PROC
CALL LOGO

MOV AH,02H    
MOV BH,0
MOV DH,8
MOV DL,12
INT 10H  
MOV AH, 09H
LEA DX, MSG_TOTALSTOCK_TOMATO
INT 21H

MOV CX, 0000H
MOV CL, 5
MOV SI, 0
MOV AX, 0000H

CHK_ZERO_TOMATO_KH:
CMP TOMATOINSTOCK_ARRAY[SI], 30H
JE INCSI_TOMATO
JNE CONTINUE_PRT_TOMATO

INCSI_TOMATO:
INC SI
LOOP CHK_ZERO_TOMATO_KH

CONTINUE_PRT_TOMATO:
JMP PRT_TOMATO

LOOP CHK_ZERO_TOMATO_KH

PRT_TOMATO:
MOV AH, 02H
MOV DL, TOMATOINSTOCK_ARRAY[SI]
INT 21H
INC SI
LOOP PRT_TOMATO

RET
PRT_STK_TOMATO ENDP

PRT_STK_TOMATO_2 PROC
CALL LOGO

MOV AH,02H    
MOV BH,0
MOV DH,12
MOV DL,12
INT 10H  
MOV AH, 09H
LEA DX, MSG_TOTALSTOCK_TOMATO
INT 21H

MOV CX, 0000H
MOV CL, 5
MOV SI, 0
MOV AX, 0000H

CHK_ZERO_2_TOMATO:
CMP TOMATOINSTOCK_ARRAY[SI], 30H
JE INCSI_2_TOMATO
JNE CONTINUE_PRT_2_TOMATO

INCSI_2_TOMATO:
INC SI
LOOP CHK_ZERO_2_TOMATO

CONTINUE_PRT_2_TOMATO:
JMP PRT_TOMATO_2

LOOP CHK_ZERO_2_TOMATO

PRT_TOMATO_2:
MOV AH, 02H
MOV DL, TOMATOINSTOCK_ARRAY[SI]
INT 21H
INC SI
LOOP PRT_TOMATO_2

RET
PRT_STK_TOMATO_2 ENDP

PRT_STK_LETTUCE PROC
CALL LOGO

MOV AH,02H    
MOV BH,0
MOV DH,8
MOV DL,12
INT 10H  
MOV AH, 09H
LEA DX, MSG_TOTALSTOCK_LETTUCE
INT 21H

MOV CX, 0000H
MOV CL, 5
MOV SI, 0
MOV AX, 0000H

CHK_ZERO_LETTUCE_KH:
CMP LETTUCEINSTOCK_ARRAY[SI], 30H
JE INCSI_LETTUCE
JNE CONTINUE_PRT_LETTUCE

INCSI_LETTUCE:
INC SI
LOOP CHK_ZERO_LETTUCE_KH

CONTINUE_PRT_LETTUCE:
JMP PRT_LETTUCE

LOOP CHK_ZERO_LETTUCE_KH

PRT_LETTUCE:
MOV AH, 02H
MOV DL, LETTUCEINSTOCK_ARRAY[SI]
INT 21H
INC SI
LOOP PRT_LETTUCE

RET
PRT_STK_LETTUCE ENDP

PRT_STK_LETTUCE_2 PROC
CALL LOGO

MOV AH,02H    
MOV BH,0
MOV DH,12
MOV DL,12
INT 10H  
MOV AH, 09H
LEA DX, MSG_TOTALSTOCK_LETTUCE
INT 21H

MOV CX, 0000H
MOV CL, 5
MOV SI, 0
MOV AX, 0000H

CHK_ZERO_2_LETTUCE:
CMP LETTUCEINSTOCK_ARRAY[SI], 30H
JE INCSI_2_LETTUCE
JNE CONTINUE_PRT_2_LETTUCE

INCSI_2_LETTUCE:
INC SI
LOOP CHK_ZERO_2_LETTUCE

CONTINUE_PRT_2_LETTUCE:
JMP PRT_LETTUCE_2

LOOP CHK_ZERO_2_LETTUCE

PRT_LETTUCE_2:
MOV AH, 02H
MOV DL, LETTUCEINSTOCK_ARRAY[SI]
INT 21H
INC SI
LOOP PRT_LETTUCE_2

RET
PRT_STK_LETTUCE_2 ENDP

PRT_STK_CUCUMBER PROC
CALL LOGO

MOV AH,02H    
MOV BH,0
MOV DH,8
MOV DL,12
INT 10H  
MOV AH, 09H
LEA DX, MSG_TOTALSTOCK_CUCUMBER
INT 21H

MOV CX, 0000H
MOV CL, 5
MOV SI, 0
MOV AX, 0000H

CHK_ZERO_CUCUMBER_KH:
CMP CUCUMBERINSTOCK_ARRAY[SI], 30H
JE INCSI_CUCUMBER
JNE CONTINUE_PRT_CUCUMBER

INCSI_CUCUMBER:
INC SI
LOOP CHK_ZERO_CUCUMBER_KH

CONTINUE_PRT_CUCUMBER:
JMP PRT_CUCUMBER

LOOP CHK_ZERO_CUCUMBER_KH

PRT_CUCUMBER:
MOV AH, 02H
MOV DL, CUCUMBERINSTOCK_ARRAY[SI]
INT 21H
INC SI
LOOP PRT_CUCUMBER

RET
PRT_STK_CUCUMBER ENDP

PRT_STK_CUCUMBER_2 PROC
CALL LOGO

MOV AH,02H    
MOV BH,0
MOV DH,12
MOV DL,12
INT 10H  
MOV AH, 09H
LEA DX, MSG_TOTALSTOCK_CUCUMBER
INT 21H

MOV CX, 0000H
MOV CL, 5
MOV SI, 0
MOV AX, 0000H

CHK_ZERO_2_CUCUMBER:
CMP CUCUMBERINSTOCK_ARRAY[SI], 30H
JE INCSI_2_CUCUMBER
JNE CONTINUE_PRT_2_CUCUMBER

INCSI_2_CUCUMBER:
INC SI
LOOP CHK_ZERO_2_CUCUMBER

CONTINUE_PRT_2_CUCUMBER:
JMP PRT_CUCUMBER_2

LOOP CHK_ZERO_2_CUCUMBER

PRT_CUCUMBER_2:
MOV AH, 02H
MOV DL, CUCUMBERINSTOCK_ARRAY[SI]
INT 21H
INC SI
LOOP PRT_CUCUMBER_2

RET
PRT_STK_CUCUMBER_2 ENDP

CONTINUE_ADD PROC
MOV AH, 02H
MOV BH, 0
MOV DH, 6
MOV DL, 10
INT 10H
MOV AH, 09H
LEA DX, MSG_UPDATED
INT 21H
MOV AH,02H    
MOV BH,0
MOV DH,14
MOV DL,10
INT 10H  
MOV AH, 09H
LEA DX, MSG_CONTINUEADD
INT 21H
MOV AH, 01H
INT 21H

MOV USERINPUT_CONTINUE, AL
CMP USERINPUT_CONTINUE, 31H
JE CALL_STOCKIN
CMP USERINPUT_CONTINUE, 30H
JE CALL_MAINMENU
JNE PRT_ERRMSG_CONTINUE_ADD
RET

CALL_STOCKIN:
JMP STOCKIN_FUNCTION

CALL_MAINMENU:
JMP STOCKINOUT_FUNCTION

PRT_ERRMSG_CONTINUE_ADD:
MOV AH,02H    
MOV BH,0
MOV DH,16
MOV DL,10
INT 10H  
MOV AH, 09H
LEA DX, ERR_MSG_CONTINUE
INT 21H
JMP CONTINUE_ADD

CONTINUE_ADD ENDP

CONTINUE_MINUS PROC
MOV AH, 02H
MOV BH, 0
MOV DH, 6
MOV DL, 10
INT 10H
MOV AH, 09H
LEA DX, MSG_UPDATED
INT 21H
MOV AH,02H    
MOV BH,0
MOV DH,14
MOV DL,10
INT 10H  
MOV AH, 09H
LEA DX, MSG_CONTINUEMINUS
INT 21H
MOV AH, 01H
INT 21H

MOV USERINPUT_CONTINUE, AL
CMP USERINPUT_CONTINUE, 31H
JE CALL_STOCKOUT
CMP USERINPUT_CONTINUE, 30H
JE CALL_MAINMENU2
JNE PRT_ERRMSG_CONTINUE_MINUS
RET

CALL_STOCKOUT:
JMP STOCKOUT_FUNCTION

CALL_MAINMENU2:
JMP STOCKINOUT_FUNCTION

PRT_ERRMSG_CONTINUE_MINUS:
MOV AH,02H    
MOV BH,0
MOV DH,16
MOV DL,10
INT 10H  
MOV AH, 09H
LEA DX, ERR_MSG_CONTINUE
INT 21H
JMP CONTINUE_MINUS

CONTINUE_MINUS ENDP

 MENU_ITEM PROC
 CALL CLEAR_SCREEN
 CALL LOGO

 MOV AH,02H    
 MOV BH,0
 MOV DH,5		
 MOV DL,26
 INT 10H  
 
 MOV AH,09H
 LEA DX,TITLE_MENU
 INT 21H
 
 MOV AH,02H    
 MOV BH,0
 MOV DH,6		
 MOV DL,25
 INT 10H  
 
 MOV AH,09H
 LEA DX,BELOW_TITLE
 INT 21H
 
 MOV AH,02H    
 MOV BH,0
 MOV DH,9		
 MOV DL,25
 INT 10H  
 
 MOV AH,09H
 LEA DX,STR1_MENU
 INT 21H

 MOV AH,02H    
 MOV BH,0
 MOV DH,10	
 MOV DL,25 
 INT 10H  
 
 MOV AH,09H
 LEA DX,STR2_MENU
 INT 21H 
 
 MOV AH,02H    
 MOV BH,0
 MOV DH,11		
 MOV DL,25
 INT 10H  

 MOV AH,09H
 LEA DX,STR3_MENU
 INT 21H
 
 MOV AH,02H    
 MOV BH,0
 MOV DH,12		
 MOV DL,25 
 INT 10H  

 MOV AH,09H
 LEA DX,STR4_MENU
 INT 21H
 
 MOV AH,02H    
 MOV BH,0
 MOV DH,15		
 MOV DL,22
 INT 10H  
 
 MOV AH,09H
 LEA DX,STR5_MENU
 INT 21H

 MOV AL,0
 MOV AX,0
 MOV BX,0
 MOV CX,0
 MOV SI,0
 MOV DI,0
 MOV DX,0
 
 
 MOV AH,01H
 INT 21H

 CMP AL,31H
 JE JMP_CAL_TOMATO
 CMP AL,32H
 JE JMP_CAL_LETTUCE
 CMP AL,33H
 JE JMP_CAL_CUCUMBER
 CMP AL,34H
 JE JMP_MAIN_MENU
 JNE ERROR_MESSAGE
 
 ERROR_MESSAGE:
 CALL CLEAR_SCREEN
 MOV AH,02H    
 MOV BH,0
 MOV DH,7		
 MOV DL,25
 INT 10H  
 
 MOV AH,09H
 LEA DX,DISPLAY_ERROR_MESSAGE
 INT 21H

 JMP JMP_MENU

 
 JMP_CAL_TOMATO:
  CALL CAL_TOMATO
  
 JMP_CAL_LETTUCE:
  CALL CAL_LETTUCE
  
 JMP_CAL_CUCUMBER:
  CALL CAL_CUCUMBER
  
 JMP_MAIN_MENU:
  CALL BACK_MAIN_MENU
  
  JMP_MENU:
  CALL MENU_ITEM
  
   RET
   MENU_ITEM ENDP

 ;----------------------------------------
 
 CAL_TOMATO PROC
 

 MOV AX,0000H
 MOV DX,0000H
 ;------ CALCULATION OF TOMATO
 MOV AX,TOTAL_TOMATO_INSTOCK
 DIV THOUSAND_KH 
 MOV Q_TOMATO,AX
 MOV R_TOMATO,DX
 
 ;----------- MOVE BYTE BY BYTE OF INTEGER TOMATO
 MOV CX,0000H
 MOV AX,0000H
 MOV SI,1
 MOV CL,2
 MOV AX,Q_TOMATO
 MOVE_INTEGER_TOMATO:
  MOV DX,0
  DIV TEN_KH
  MOV QUOTIENT_KH,AX
  ADD DX,30H
  MOV TOMA1[SI],DL
  MOV AX,QUOTIENT_KH
  DEC SI
 LOOP MOVE_INTEGER_TOMATO
 
 ;-------  MOVE BYTE BY BYTE OF DECIMAL TOMATO
 MOV CX,0000H
 MOV AX,0000H
 MOV SI,3
 MOV CL,4
 MOV AX,R_TOMATO
 MOVE_DECIMAL_TOMATO:
  MOV DX,0
  DIV TEN_KH
  MOV REMAINDER,AX
  ADD DX,30H
  MOV TOMA2[SI],DL
  MOV AX,REMAINDER
  DEC SI
 LOOP MOVE_DECIMAL_TOMATO
 
 ;----- MOVE BYTE BY BYTE OF CURRENT TOMATO
 MOV REMAINDER,0
 MOV CX,0000H
 MOV AX,0000H
 MOV SI,4
 MOV CL,5
 MOV AX,TOTAL_TOMATO_INSTOCK
 MOVE_CURRENT_TOMATO:
  MOV DX,0
  DIV TEN_KH
  MOV REMAINDER,AX
  ADD DX,30H
  MOV CUR_TOMATO_DISPLAY[SI],DL
  MOV AX,REMAINDER
  DEC SI
 LOOP MOVE_CURRENT_TOMATO
 
 ;-----CLEAR INFRONT ZERO OF CURRENT STOCK
 MOV SI,0
  RECHK_TOMATO:
 CMP CUR_TOMATO_DISPLAY[SI],"0" ;check the first is zero or not
 JE CLEARZERO_TOMATO 
 JNE CHK_ZERO_TOMATO_PRICE
 
 CHK_ZERO_TOMATO:
  CMP CUR_TOMATO_DISPLAY[SI-1],"0" 
  JE RECHK_TOMATO 
  JNE CHK_ZERO_TOMATO_PRICE 
 CLEARZERO_TOMATO:
  SUB CUR_TOMATO_DISPLAY[SI],10H 
  INC SI
  JMP RECHK_TOMATO
 
 ;------CLEAR INFORNT ZERO OF PRICE
 CHK_ZERO_TOMATO_PRICE:
  CMP TOMA1[0],"0"
  JE CLEARZERO_TOMATO_PRICE
  JNE ROUNDOFF_CHK_TOMATO
  
 CLEARZERO_TOMATO_PRICE:
  SUB TOMA1[0],10H
  
  ;---- ROUND OFF OF PRICE TOMATO
 ROUNDOFF_CHK_TOMATO:
  CMP TOMA2[3],"4"
  JG ROUNDOFF_TOMATO
  JNG PRINT_TOMATO

  ROUNDOFF_TOMATO:
   ADD TOMA2[2],1

  
  PRINT_TOMATO:
  ;---NEW LINE
  CALL CLEAR_SCREEN
  CALL LOGO
 MOV AH,02H    
 MOV BH,0
 MOV DH,5		
 MOV DL,30  
 INT 10H  
 
 MOV AH,09H
 LEA DX,TITLE_FORECAST
 INT 21H
 
 MOV AH,02H    
 MOV BH,0
 MOV DH,6		
 MOV DL,25
 INT 10H  
 
 MOV AH,09H
 LEA DX,BELOW_TITLE
 INT 21H
 MOV AH,02H    
 MOV BH,0
 MOV DH,8		
 MOV DL,20
 INT 10H  
 
 MOV AH,09H
 LEA DX,DISPLAY_SALES
 INT 21H
 
 MOV AH,02H    
 MOV BH,0
 MOV DH,9		
 MOV DL,20
 INT 10H  
 
 MOV AH,09H
 LEA DX,DISPLAY_SALES_TOMATO1
 INT 21H
 
 MOV AH,02H    
 MOV BH,0
 MOV DH,9		
 MOV DL,36
 INT 10H 
 
 MOV CX,0000H
 MOV AX,0000H
 MOV SI,0
 MOV CL,5
 PRINT_CURRENT_TOMATO:
  MOV AH,02H
  MOV DL,CUR_TOMATO_DISPLAY[SI]
  INT 21H
  INC SI
 LOOP PRINT_CURRENT_TOMATO
 
 MOV AH,02H    
 MOV BH,0
 MOV DH,12	
 MOV DL,22
 INT 10H 
   
 MOV AH,09H
 LEA DX,DISPLAY_SALES_TOMATO2
 INT 21H

  ;---- print integer of price (tomato) 
 MOV CX,0000H
 MOV AX,0000H
 MOV SI,0
 MOV CL,2
 PRINT_INTEGER_TOMATO:
  MOV AH,02H
  MOV DL,TOMA1[SI]
  INT 21H
  INC SI
 LOOP PRINT_INTEGER_TOMATO
 
   ;--"."
 MOV AH,02H
 MOV DL,2EH
 INT 21H

 ;------ PRINT DECIMAL OF PRICE (TOMATO)
 MOV CX,0000H
 MOV AX,0000H
 MOV SI,1
 MOV CL,2
 PRINT_DECIMAL_TOMATO:
  MOV AH,02H
  MOV DL,TOMA2[SI]
  INT 21H
  INC SI
 LOOP PRINT_DECIMAL_TOMATO  

 MOV AH,02H    
 MOV BH,0
 MOV DH,24		
 MOV DL,25
 INT 10H 
 
 MOV AH,09H
 LEA DX,DISPLAY_HOLD
 INT 21H
 
 MOV AH,01H
 INT 21H 
 
 CALL CLEAR_SCREEN
 JMP MENU_ITEM
 RET
 CAL_TOMATO ENDP
 

  

;---------------------------------------- 
CAL_LETTUCE PROC
 
 MOV AX,TOTAL_LETTUCE_INSTOCK
 MOV CUR_LETT,AX
 MOV AX,0000H
 MOV DX,0000H
 ;------ CALCULATION OF LETTUCE
 MOV AX,CUR_LETT
 DIV TEN_KH
 MOV Q_LETT,AX  ;1234
 MOV AX,CUR_LETT
 ADD Q_LETT,AX ; Q_LETT =1234+12345 =13579
 
 MOV AX,0000H
 MOV DX,0000H
 MOV AX,Q_LETT
 DIV THOUSAND_KH 
 MOV Q_LETT,AX ; Q_LETT= 13
 MOV R_LETT,DX ; R_LETT= 579

  
 ;----------- MOVE BYTE BY BYTE OF INTEGER LETTUCE
 MOV CX,0000H
 MOV AX,0000H
 MOV SI,1
 MOV CL,2
 MOV AX,Q_LETT
 MOVE_INTEGER_LETTUCE:
  MOV DX,0000H
  DIV TEN_KH
  MOV QUOTIENT,AX
  ADD DX,30H
  MOV LETT1[SI],DL
  MOV AX,QUOTIENT
  DEC SI
 LOOP MOVE_INTEGER_LETTUCE
 
 ;-------  MOVE BYTE BY BYTE OF DECIMAL LETTUCE
 MOV CX,0000H
 MOV AX,0000H
 MOV SI,3
 MOV CL,4
 MOV AX,R_LETT ;AX=579
 MOVE_DECIMAL_LETTUCE:
  MOV DX,0000H
  DIV TEN_KH
  MOV REMAINDER,AX
  ADD DX,30H
  MOV LETT2[SI],DL
  MOV AX,REMAINDER
  DEC SI
 LOOP MOVE_DECIMAL_LETTUCE
 
  ;----- MOVE BYTE BY BYTE OF CURRENT LETTUCE
 MOV REMAINDER,0
 MOV CX,0000H
 MOV AX,0000H
 MOV SI,4
 MOV CL,5
 MOV AX,CUR_LETT
 MOVE_CURRENT_LETTUCE:
  MOV DX,0
  DIV TEN_KH
  MOV REMAINDER,AX
  ADD DX,30H
  MOV CUR_LETTUCE_DISPLAY[SI],DL
  MOV AX,REMAINDER
  DEC SI
 LOOP MOVE_CURRENT_LETTUCE
 
 
 ;-----CLEAR INFRONT ZERO OF CURRENT STOCK
 MOV SI,0
  RECHK_LETTUCE:
 CMP CUR_LETTUCE_DISPLAY[SI],"0" ;check the first is zero or not
 JE CLEARZERO_LETTUCE
 JNE CHK_ZERO_LETTUCE_PRICE
 
 CHK_ZERO_LETTUCE:
  CMP CUR_LETTUCE_DISPLAY[SI-1],"0" 
  JE RECHK_LETTUCE
  JNE CHK_ZERO_LETTUCE_PRICE 
 CLEARZERO_LETTUCE:
  SUB CUR_LETTUCE_DISPLAY[SI],10H 
  INC SI
  JMP RECHK_LETTUCE
 
 ;------CLEAR INFORNT ZERO OF PRICE
 CHK_ZERO_LETTUCE_PRICE:
  CMP LETT1[0],"0"
  JE CLEARZERO_LETTUCE_PRICE
  JNE ROUNDOFF_CHK_LETTUCE
  
 CLEARZERO_LETTUCE_PRICE:
  SUB LETT1[0],10H
  
 
  ROUNDOFF_CHK_LETTUCE:
  CMP LETT2[3],"4"
  JG ROUNDOFF_LETTUCE
  JNG PRINT_LETTUCE

  ROUNDOFF_LETTUCE:
   ADD LETT2[2],1

  PRINT_LETTUCE:
  ;---NEW LINE
  CALL CLEAR_SCREEN
  CALL LOGO
 MOV AH,02H    
 MOV BH,0
 MOV DH,5		
 MOV DL,30  
 INT 10H  
 
 MOV AH,09H
 LEA DX,TITLE_FORECAST
 INT 21H
 
 MOV AH,02H    
 MOV BH,0
 MOV DH,6		
 MOV DL,25
 INT 10H  
 
 MOV AH,09H
 LEA DX,BELOW_TITLE
 INT 21H
 
 MOV AH,02H    
 MOV BH,0
 MOV DH,8		
 MOV DL,20
 INT 10H  
 
 MOV AH,09H
 LEA DX,DISPLAY_SALES
 INT 21H
 
 MOV AH,02H    
 MOV BH,0
 MOV DH,9		
 MOV DL,20
 INT 10H  
 
 MOV AH,09H
 LEA DX,DISPLAY_SALES_LETTUCE1
 INT 21H
 
  
 MOV AH,02H    
 MOV BH,0
 MOV DH,9		
 MOV DL,36
 INT 10H 
 
 MOV CX,0000H
 MOV AX,0000H
 MOV SI,0
 MOV CL,5
 PRINT_CURRENT_LETTUCE:
  MOV AH,02H
  MOV DL,CUR_LETTUCE_DISPLAY[SI]
  INT 21H
  INC SI
 LOOP PRINT_CURRENT_LETTUCE
 
 
 MOV AH,02H    
 MOV BH,0
 MOV DH,12	
 MOV DL,22
 INT 10H 
   
 MOV AH,09H
 LEA DX,DISPLAY_SALES_LETTUCE2
 INT 21H

 
  ;---- print integer of price (lettuce) 
 MOV CX,0000H
 MOV AX,0000H
 MOV SI,0
 MOV CL,2
 PRINT_INTEGER_LETTUCE:
  MOV AH,02H
  MOV DL,LETT1[SI]
  INT 21H
  INC SI
 LOOP PRINT_INTEGER_LETTUCE
 

   ;--"."
 MOV AH,02H
 MOV DL,2EH
 INT 21H

 ;------ PRINT DECUMAL OF PRICE (lettuce)
 MOV CX,0000H
 MOV AX,0000H
 MOV SI,1
 MOV CL,2
 PRINT_DECIMAL_LETTUCE:
  MOV AH,02H
  MOV DL,LETT2[SI]
  INT 21H
  INC SI
 LOOP PRINT_DECIMAL_LETTUCE

 MOV AH,02H    
 MOV BH,0
 MOV DH,24		
 MOV DL,25
 INT 10H 
 
 MOV AH,09H
 LEA DX,DISPLAY_HOLD
 INT 21H
 
 MOV AH,01H
 INT 21H 
 
 CALL CLEAR_SCREEN
 
 JMP MENU_ITEM
 

 CAL_LETTUCE ENDP
;---------------------------------------- 
CAL_CUCUMBER PROC


  MOV AX,TOTAL_CUCUMBER_INSTOCK
 MOV CUR_CUCU,AX
 MOV AX,0000H
 MOV DX,0000H
 ;------ CALCULATION OF LETTUCE
 MOV AX,CUR_CUCU
 DIV TWO_KH
 MOV Q_CUCU,AX  ;1234
 MOV AX,CUR_CUCU
 ADD Q_CUCU,AX ; Q_LETT =1234+12345 =13579
 
 MOV AX,0000H
 MOV DX,0000H
 MOV AX,Q_CUCU
 DIV THOUSAND_KH 
 MOV Q_CUCU,AX ; Q_LETT= 13
 MOV R_CUCU,DX ; R_LETT= 579

  
 ;----------- MOVE BYTE BY BYTE OF INTEGER LETTUCE
 MOV CX,0000H
 MOV AX,0000H
 MOV SI,1
 MOV CL,2
 MOV AX,Q_CUCU
 MOVE_INTEGER_CUCUMBER:
  MOV DX,0000H
  DIV TEN_KH
  MOV QUOTIENT,AX
  ADD DX,30H
  MOV CUCU1[SI],DL
  MOV AX,QUOTIENT
  DEC SI
 LOOP MOVE_INTEGER_CUCUMBER
 
 ;-------  MOVE BYTE BY BYTE OF DECIMAL LETTUCE
 MOV CX,0000H
 MOV AX,0000H
 MOV SI,3
 MOV CL,4
 MOV AX,R_CUCU ;AX=579
 MOVE_DECIMAL_CUCUMBER:
  MOV DX,0000H
  DIV TEN_KH
  MOV REMAINDER,AX
  ADD DX,30H
  MOV CUCU2[SI],DL
  MOV AX,REMAINDER
  DEC SI
 LOOP MOVE_DECIMAL_CUCUMBER
 
  ;----- MOVE BYTE BY BYTE OF CURRENT LETTUCE
 MOV REMAINDER,0
 MOV CX,0000H
 MOV AX,0000H
 MOV SI,4
 MOV CL,5
 MOV AX,CUR_CUCU
 MOVE_CURRENT_CUCUMBER:
  MOV DX,0
  DIV TEN_KH
  MOV REMAINDER,AX
  ADD DX,30H
  MOV CUR_CUCUMBER_DISPLAY[SI],DL
  MOV AX,REMAINDER
  DEC SI
 LOOP MOVE_CURRENT_CUCUMBER
 
 
  ;-----CLEAR INFRONT ZERO OF CURRENT STOCK
 MOV SI,0
  RECHK_CUCUMBER:
 CMP CUR_CUCUMBER_DISPLAY[SI],"0" ;check the first is zero or not
 JE CLEARZERO_CUCUMBER 
 JNE CHK_ZERO_CUCUMBER_PRICE
 
 CHK_ZERO_CUCUMBER:
  CMP CUR_CUCUMBER_DISPLAY[SI-1],"0" 
  JE RECHK_CUCUMBER 
  JNE CHK_ZERO_CUCUMBER_PRICE 
 CLEARZERO_CUCUMBER:
  SUB CUR_CUCUMBER_DISPLAY[SI],10H 
  INC SI
  JMP RECHK_CUCUMBER
 
 ;------CLEAR INFORNT ZERO OF PRICE
 CHK_ZERO_CUCUMBER_PRICE:
  CMP CUCU1[0],"0"
  JE CLEARZERO_CUCUMBER_PRICE
  JNE ROUNDOFF_CHK_CUCUMBER
  
 CLEARZERO_CUCUMBER_PRICE:
  SUB CUCU1[0],10H
 
  ROUNDOFF_CHK_CUCUMBER:
  CMP CUCU2[3],"4"
  JG ROUNDOFF_CUCUMBER
  JNG PRINT_CUCUMBER

  ROUNDOFF_CUCUMBER:
   ADD CUCU2[2],1

  PRINT_CUCUMBER:
  ;---NEW LINE
  CALL CLEAR_SCREEN
   CALL LOGO
 MOV AH,02H    
 MOV BH,0
 MOV DH,5		
 MOV DL,30  
 INT 10H  
 
 MOV AH,09H
 LEA DX,TITLE_FORECAST
 INT 21H
 
 MOV AH,02H    
 MOV BH,0
 MOV DH,6		
 MOV DL,25
 INT 10H
 
 MOV AH,09H
 LEA DX,BELOW_TITLE
 INT 21H
 
 MOV AH,02H    
 MOV BH,0
 MOV DH,8		
 MOV DL,20
 INT 10H  
 
 MOV AH,09H
 LEA DX,DISPLAY_SALES
 INT 21H
 
 MOV AH,02H    
 MOV BH,0
 MOV DH,9		
 MOV DL,20
 INT 10H  
 
 MOV AH,09H
 LEA DX,DISPLAY_SALES_CUCUMBER1
 INT 21H
  
 MOV AH,02H    
 MOV BH,0
 MOV DH,9		
 MOV DL,36
 INT 10H 
 
 
 MOV CX,0000H
 MOV AX,0000H
 MOV SI,0
 MOV CL,5
 PRINT_CURRENT_CUCUMBER:
  MOV AH,02H
  MOV DL,CUR_CUCUMBER_DISPLAY[SI]
  INT 21H
  INC SI
 LOOP PRINT_CURRENT_CUCUMBER
 
 
 MOV AH,02H    
 MOV BH,0
 MOV DH,12	
 MOV DL,22
 INT 10H 
   
 MOV AH,09H
 LEA DX,DISPLAY_SALES_CUCUMBER2
 INT 21H

 
  ;---- print integer of price (cucumber) 
 MOV CX,0000H
 MOV AX,0000H
 MOV SI,0
 MOV CL,2
 PRINT_INTEGER_CUCUMBER:
  MOV AH,02H
  MOV DL,CUCU1[SI]
  INT 21H
  INC SI
 LOOP PRINT_INTEGER_CUCUMBER
 

   ;--"."
 MOV AH,02H
 MOV DL,2EH
 INT 21H

 ;------ PRINT DECUMAL OF PRICE (cucumber)
 MOV CX,0000H
 MOV AX,0000H
 MOV SI,1
 MOV CL,2
 PRINT_DECIMAL_CUCUMBER:
  MOV AH,02H
  MOV DL,CUCU2[SI]
  INT 21H
  INC SI
 LOOP PRINT_DECIMAL_CUCUMBER

 MOV AH,02H    
 MOV BH,0
 MOV DH,24		
 MOV DL,25
 INT 10H 
 
 MOV AH,09H
 LEA DX,DISPLAY_HOLD
 INT 21H
 
 MOV AH,01H
 INT 21H 
 
 CALL CLEAR_SCREEN
 
 JMP MENU_ITEM

 CAL_CUCUMBER ENDP
 
BACK_MAIN_MENU:
  CALL CLEAR_SCREEN
  JMP MAIN_MENU
  
EXIT PROC
MOV AH,4CH
INT 21H
RET

END MAIN